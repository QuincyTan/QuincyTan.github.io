<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quincy&#39;s Blog</title>
  
  <subtitle>学习时长两年半的在校本科生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://quincy.ink/"/>
  <updated>2020-05-07T02:00:16.581Z</updated>
  <id>http://quincy.ink/</id>
  
  <author>
    <name>Quincy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS-Note 刷题总结</title>
    <link href="http://quincy.ink/CS-Note-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
    <id>http://quincy.ink/CS-Note-刷题总结.html</id>
    <published>2020-05-01T01:16:13.000Z</published>
    <updated>2020-05-07T02:00:16.581Z</updated>
    
    <content type="html"><![CDATA[<p>刷了一些题目来源剑指offer、Leetcode的简单算法题和sql题，做些总结~~<a id="more"></a></p><h4 id="算法篇"><a href="#算法篇" class="headerlink" title="算法篇"></a>算法篇</h4><p>1、对于指针操作，务必先判断是否为NULL<br>2、快速统计二进制中1的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    n &amp;= (n - <span class="number">1</span>); <span class="comment">//依次消掉低位第一个1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、判断是否为2的次幂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> x&gt;<span class="number">0</span> &amp;&amp; x&amp;(x<span class="number">-1</span>)==<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>4、根据前序中序遍历结果构造二叉树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;pre,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;in.size();i++) pos[in[i]]=i;</span><br><span class="line">        <span class="keyword">return</span> dfs(pre,<span class="number">0</span>,pre.size()<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode* <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;pre,<span class="keyword">int</span> preL,<span class="keyword">int</span> preR,<span class="keyword">int</span> inL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preL &gt; preR) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val = pre[preL],Lsize = pos[val]-inL;</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = dfs(pre,preL+<span class="number">1</span>,preL+Lsize,inL);</span><br><span class="line">    root-&gt;right = dfs(pre,preL+Lsize+<span class="number">1</span>,preR,inL+Lsize+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、判断链表是否存在环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ListNode *p1=head,*p2=head-&gt;next; <span class="comment">//快慢指针</span></span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span> &amp;&amp; p2!=<span class="literal">NULL</span> &amp;&amp; p2-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1==p2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">        p2=p2-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、快排partition写法（才发现之前算法实验课写的有点bug）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a,<span class="keyword">int</span> l,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = a[l];</span><br><span class="line">    <span class="keyword">while</span> (l&lt;h) &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;h &amp;&amp; a[h]&gt;=pivot) h--;</span><br><span class="line">        a[l]=a[h];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;h &amp;&amp; a[l]&lt;=pivot) l++;</span><br><span class="line">        a[h]=a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l]=pivot;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、指定位置插入vector&amp;&amp;list</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vec.insert(vec.begin()+k,item); <span class="comment">//平均O(n) 较慢</span></span><br><span class="line"></span><br><span class="line">iter = lst.begin();</span><br><span class="line">advance(iter, k); <span class="comment">//迭代器向前移动k个 k为负则向后移动</span></span><br><span class="line">lst.insert(iter, item);</span><br></pre></td></tr></table></figure><p><br></p><h4 id="SQL篇"><a href="#SQL篇" class="headerlink" title="SQL篇"></a>SQL篇</h4><p>1、or/and关键字会使查询全文扫描导致效率较低，如果查询列有索引可以分别查询然后union/intersect</p><p>2、将表中性别列的值取反</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary</span><br><span class="line"><span class="keyword">set</span> sex = <span class="keyword">if</span>(sex=<span class="string">'m'</span>,<span class="string">'f'</span>,<span class="string">'m'</span>); //异或也行sex = char(ascii(sex)^ascii('m')^ascii('f'))</span><br></pre></td></tr></table></figure><p>3、不能将同一张表同时更新和查询，可利用子查询的方式解决</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> person </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">as</span> <span class="keyword">id</span> <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email) <span class="keyword">as</span> temp);</span><br></pre></td></tr></table></figure><p>4、sql各种连接</p><p><img src="https://s1.ax1x.com/2020/05/07/YZV5Ax.png" alt="YZV5Ax.png"></p><p>另外还有内连接；交叉连接（cross join），即笛卡尔积。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷了一些题目来源剑指offer、Leetcode的简单算法题和sql题，做些总结~~
    
    </summary>
    
      <category term="刷题总结" scheme="http://quincy.ink/categories/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="算法" scheme="http://quincy.ink/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="sql" scheme="http://quincy.ink/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>面经</title>
    <link href="http://quincy.ink/%E9%9D%A2%E7%BB%8F.html"/>
    <id>http://quincy.ink/面经.html</id>
    <published>2020-04-11T08:47:38.000Z</published>
    <updated>2020-04-30T08:09:48.321Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下找工作的小颠簸~~<a id="more"></a></p><blockquote><p><strong>总结</strong>：<br>开头自我介绍和最后问面试官的问题比较重要，做好充分准备；<br>回答问题后不要询问回答是否正确；<br>问题不会就是不会，不要把自己弄得很尴尬（态度问题）；<br>最重要的还是专业知识的review；</p></blockquote><h3 id="蚂蚁金服——JAVA研发工程师"><a href="#蚂蚁金服——JAVA研发工程师" class="headerlink" title="蚂蚁金服——JAVA研发工程师"></a>蚂蚁金服——JAVA研发工程师</h3><h4 id="笔试（4-3）"><a href="#笔试（4-3）" class="headerlink" title="笔试（4.3）"></a>笔试（4.3）</h4><blockquote><p>A. 给一个长度n(1e5)的数字序列，对每个数定义f[i]为i左边第一个大于a[i]的数，g[i]为i右边第一个小于a[i]的数，问有多少个a[i]的f[i]和g[i]是倍数关系？<br>思路：set+二分</p><p>B. 给一个n*m(1e3)的矩阵，每个位置有个权值，问从第一行任意起点到第n行任意终点的最小路径权值和是多少？<br>思路：bfs+优先队列</p></blockquote><h4 id="一面（4-11）"><a href="#一面（4-11）" class="headerlink" title="一面（4.11）"></a>一面（4.11）</h4><blockquote><p>自我介绍<br>询问ACM训练情况，队内分工，印象最深的一道题，大学影响最大的一件事<br>问题：<br>1、两幅扑克牌(108张)，四个人玩(每人27张)，问一个人同时拿到一对大王的概率？<br>2、所知道的排序算法的思想及比较<br>3、百度搜索引擎返回结果1e6条，只显示前十条，这个case下哪个排序算法最好？<br>4、所知道的树结构及其定义<br>5、数据库的索引和B+树的特点<br>6、TCP三次握手和四次挥手<br>7、健康码实现需要的东西？（开放题）<br>8、简历中课程项目的实现、效率以及是否可以优化（C语言大作业——IP地址查询系统）<br>9、编程题<br>给定一个字符串S和有效单词的字典D，请确定可以插入到S中的最小空格数，使得最终的字符串完全由D中的有效单词组成，并输出解。<br>如果没有解则应该输出n/a<br>S = “ilikealibaba”<br>D = [“i”, “like”, “ali”, “liba”, “baba”, “alibaba”]<br>输出<br>“i like alibaba”<br>思路：trie+dfs，<a href="https://paste.ubuntu.com/p/gj8YH7PkPn/" target="_blank" rel="noopener">代码点这</a></p></blockquote><h4 id="一面（4-19）"><a href="#一面（4-19）" class="headerlink" title="一面（4.19）"></a>一面（4.19）</h4><blockquote><p>自我介绍<br>问题：<br>1、Java线程池<br>2、synchronized锁<br>3、Student类需要什么条件才能作为HashMap或者HashSet的Key？<br>4、HashMap的内部实现<br>5、关键词final finally finalize区别<br>6、JVM<br>7、怎么找到一个Class？<br>8、弱引用、强引用<br>9、数据库三大范式<br>10、索引可能的带来的坏处<br>11、左连接、右连接、全连接<br>12、SQL注入的定义和防止方法<br>13、问了下高等数学的成绩<br>14、进程和线程的区别<br>15、进程间的通信方式<br>16、OSI七层协议<br>17、TCP、UDP的区别<br>18、TCP的三次握手、四次挥手<br>19、大学遇到比较有成就感or有困难的事情？<br>20、除了算法方面主动学习还有其他的吗？<br>21、问了下移动终端编程小项目<br>22、Java是上课教的还是自学的？<br>23、学习过程中给我帮助最大的人或者最佩服或者最想学习的人是谁？（当然是斯巨啦）<br>24、有关注互联网领域前沿的知识吗？<br>25、说说职业规划<br>26、确认工作地点</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下找工作的小颠簸~~
    
    </summary>
    
      <category term="工作" scheme="http://quincy.ink/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="面经" scheme="http://quincy.ink/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>工程经济学 学习笔记</title>
    <link href="http://quincy.ink/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/工程经济学-学习笔记.html</id>
    <published>2020-03-11T01:49:17.000Z</published>
    <updated>2020-05-02T01:10:23.447Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h4><ul><li><p>工程与经济的关系：工程是手段，经济是目的</p></li><li><p>工程师的基本责任：分析成本<a id="more"></a></p></li></ul><p><br></p><h4 id="第二章-资金的时间价值与现金流量"><a href="#第二章-资金的时间价值与现金流量" class="headerlink" title="第二章 资金的时间价值与现金流量"></a>第二章 资金的时间价值与现金流量</h4><ul><li><p>定义：i 利率 n年数 P现值 F终值 A年金</p></li><li><p>计息方式</p></li></ul><script type="math/tex; mode=display">单利：F=P(1+ni)\\复利：F=P(1+i)^n</script><ul><li><p>现金流量</p><p>CI 现金流入，CO 现金流出<br>现金是价值风险最小的一种资产</p></li><li><p>复利等值计算</p><p>一次支付终值公式：$F=P(1+i)^{n}$<br>一次支付现值公式:$P=F(1+i)^{-n}$<br>年金终值公式:$F=A+A(1+i)+A(1+i)^2+…+A(1+i)^{n-1}=A[(1+i)^{n}-1]／i$<br>偿债基金公式:$A=Fi/[(1+i)^{n}-1]$<br>年金现值公式:$P=A[(1+i)^{n}-1]／\{i(1+i)^{n}\}\quad 永久年金:P=A/i$<br>资金回收公式:$A=Pi(1+i)^{n}/[(1+i)^{n}-1]$<br>名义利率r与实际利率i的换算:$i =(1＋r/m)^m-1 \quad$(m为每年计息次数)</p></li></ul><p><br></p><h4 id="第三章-建设项目评价的基本经济要素"><a href="#第三章-建设项目评价的基本经济要素" class="headerlink" title="第三章 建设项目评价的基本经济要素"></a>第三章 建设项目评价的基本经济要素</h4><ul><li><p>折旧——固定资产<br>摊销——无形资产</p></li><li><p>线性折旧法</p><p>1.平均年限法<br>年折旧额 = 原值 * 折旧率<br>折旧率 = （1 - 净残值率）/ 折旧年限<br>2.工作量法<br>年折旧额 = 工作量 * 折旧率<br>折旧率 = 原值 *（1 - 净残值率）/ 工作量</p></li><li><p>经营成本 = 总成本 - 折旧、摊销 - 财务费用<br>= 外购原材料、燃料、动力费 + 工资及福利费 + 修理费 + 其他费用</p></li><li><p>增值额税 = 销项额税 - 进项额税<br>= 销项额(不含税)* 增值税率  -  进项额(不含税)* 增值税率<br>= [销项额(含税)/(1+增值税率)]* 增值税率  -  [进项额(不含税)/(1+增值税率)]* 增值税率</p></li><li><p>企业所得税的税率为25％<br>所得税 = ( 营业收入 - 总成本 = 营业收入-折旧-摊销-经营成本-财务费用(税收、利息等) )*税率</p></li><li><p>利润</p><p>营业利润=营业收入－总成本－营业税及附加<br>利润总额＝营业利润＋投资净收益＋营业外收支净额<br>净利润＝利润总额－所得税</p></li></ul><p><br></p><h4 id="第四章-建设项目经济评价指标体系"><a href="#第四章-建设项目经济评价指标体系" class="headerlink" title="第四章 建设项目经济评价指标体系"></a>第四章 建设项目经济评价指标体系</h4><ul><li><p>投资回收期<br>$Pt = T - 1 + \frac{第T-1年年净现金流累计值的绝对值}{第T年的现金流}$，T为累积净现金流量首次为非负值所对应的年份<br>计算动态回收期将净现金流折算到投资初期即可<br>评价标准：Pt ≤ Pc(基准回收期)</p></li><li><p>净现值</p><p>$NPV = \sum_{t=0}^n NCF_t(P/F,ic,t)$<br>评价标准：NPV≥ 0</p></li><li><p>内部收益率</p><p>$\sum_{t=0}^nNCF(1+IRR)^{-t}=0$<br>$IRR =i_1 + \frac{NPV_1}{NPV_1+|NPV_2|}(i_2-i_1)，i_2-i_1&lt;0.05$<br>评价标准：IRR≥ic(社会折现率)</p></li><li><p>利息备付率</p><p>ICR = EBIT / PI = 息税前利润 / 计入成本的应付利息<br>评价标准：ICR&gt;2</p></li><li><p>偿债备付率</p><p>DSCR = (EBITAD - TAX)/PD = (息税折旧摊销前利润 - 企业所得税额) / 应还本付息金额<br>评价标准：DSCR&gt;1</p></li></ul><p><br></p><h4 id="第五章-多方案的经济性比较和选择"><a href="#第五章-多方案的经济性比较和选择" class="headerlink" title="第五章  多方案的经济性比较和选择"></a>第五章  多方案的经济性比较和选择</h4><p>A-B</p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章-绪论&quot;&gt;&lt;a href=&quot;#第一章-绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章 绪论&quot;&gt;&lt;/a&gt;第一章 绪论&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;工程与经济的关系：工程是手段，经济是目的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工程师的基本责任：分析成本
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="工程经济学" scheme="http://quincy.ink/tags/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>网络协议分析 学习笔记</title>
    <link href="http://quincy.ink/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/网络协议分析-学习笔记.html</id>
    <published>2019-11-25T02:40:31.000Z</published>
    <updated>2020-05-02T01:12:58.513Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章-TCP-IP概述"><a href="#第一章-TCP-IP概述" class="headerlink" title="第一章 TCP/IP概述"></a>第一章 TCP/IP概述</h4><ol><li><p>什么是Internet？</p><p>Network of Networks（网络之网络），连接各个子网的网络<a id="more"></a></p></li><li><p>如何将异构网络互联？</p><p>使用IP地址，屏蔽所有物理细节，实现异构网络互联</p></li><li><p>TCP/IP分层模型及OSI对应关系</p><p><a href="https://s2.ax1x.com/2019/11/25/MvjaOx.jpg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/25/MvjaOx.jpg" alt="MvjaOx.jpg"></a></p></li><li><p>多路复用</p><p>从源主机的不同套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段，然后将报文段传递到网络层中去</p><p><a href="https://s2.ax1x.com/2019/11/25/MvvxKI.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/25/MvvxKI.png" alt="MvvxKI.png"></a></p></li><li><p>多路分解</p><p>在接收端，运输层检查这些字段并标识出接收套接字，然后将该报文定向到该套接字。其工作方式可以简单地认为是这样的，主机上的每个套接字被分配一个端口号，当报文到达主机时，运输层检查报文段中的目的端口号，并将其定向到相应的套接字</p><p><a href="https://s2.ax1x.com/2019/11/25/MvxkGQ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/25/MvxkGQ.png" alt="MvxkGQ.png"></a></p></li></ol><p><br></p><h4 id="第二章-点到点协议PPP"><a href="#第二章-点到点协议PPP" class="headerlink" title="第二章 点到点协议PPP"></a>第二章 点到点协议PPP</h4><ol><li><p>PPP： Point to Point Protocol</p></li><li><p>PPPoE(PPP over Ethernet)：以太网上的PPP，实际上是两种协议的结合</p></li><li><p>PPP规定的内容：<br>1）帧格式及成帧方法；<br>2）链路控制协议LCP：用于建立、配置和测试PPP链路的（Link Control Protocol）；<br>3）网络控制协议NCP：用于建立和配置网络层协议（Network Control Protocol）。</p></li><li><p>使用的认证协议：<br>1）口令认证协议PAP：Password Authentication Protocol；<br>2）基于挑战的握手认证协议CHAP：Challenge Handshake Authentication Protocol。</p></li><li><p>通信过程</p><p><img src="https://s2.ax1x.com/2019/11/28/QFlA0g.png" width="30%/"></p></li><li><p>以太网回顾</p><p>CSMA/CD：多点接入、载波监听、碰撞检测<br>CA半双工；CD全双工</p></li><li><p>PPPoE的优点</p><p>高带宽；提供用户认证、控制、服务、记账等功能</p></li><li><p>PPPoE协议流程</p><ul><li><p>发现阶段</p><p>发起：客户端通过广播请求以获取可用的AC<br>提供：在收到请求后，若AC可以提供服务，则返回该报文<br>请求：如果客户端收到来自多个AC的应答，则必须从中选择一个并向该AC发出请求<br>确认：收到请求的AC向客户端返回确认，从而建立PPP连接及会话</p></li></ul></li></ol><ul><li><p>会话阶段</p></li><li><p>断开链路</p></li></ul><p><br></p><h4 id="第三章-Internet地址及地址解析"><a href="#第三章-Internet地址及地址解析" class="headerlink" title="第三章 Internet地址及地址解析"></a>第三章 Internet地址及地址解析</h4><p>1. ARP针对问题</p><p>实现IP地址到物理地址之间的映射</p><p>2. ARP 命令</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>参数</strong></th><th style="text-align:center"><strong>含义</strong></th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:center">列出ARP缓存中的所有条目</td></tr><tr><td style="text-align:center">-a inet_addr</td><td style="text-align:center">列出与inet_addr对应的条目</td></tr><tr><td style="text-align:center">-d inet_addr</td><td style="text-align:center">删除与inet_addr对应的条目</td></tr><tr><td style="text-align:center">-s inet_addr eth_addr</td><td style="text-align:center">在ARP缓存中添加一个条目</td></tr></tbody></table></div><p>3.  IP地址分类</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>类型</strong></th><th style="text-align:left"><strong>标志</strong></th><th style="text-align:left"><strong>范围</strong></th><th style="text-align:left"><strong>网络号长度</strong></th><th style="text-align:left"><strong>适用范围</strong></th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left">首位比特为“0”</td><td style="text-align:left">1.0.0.0 - 126.255.255.255</td><td style="text-align:left">1字节</td><td style="text-align:left">超级大网</td></tr><tr><td style="text-align:left">B</td><td style="text-align:left">前两个比特为“10”</td><td style="text-align:left">128.0.0.0 - 191.255.255.255</td><td style="text-align:left">2字节</td><td style="text-align:left">中规模网络</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">前三个比特为“110”</td><td style="text-align:left">192.0.0.0 - 223.255.255.255</td><td style="text-align:left">3字节</td><td style="text-align:left">小规模网络</td></tr><tr><td style="text-align:left">D</td><td style="text-align:left">前四个比特为“1110”</td><td style="text-align:left">224.0.0.0 - 239.255.255.255</td><td style="text-align:left">—</td><td style="text-align:left">组播地址</td></tr><tr><td style="text-align:left">E</td><td style="text-align:left">前四个比特为“1111”</td><td style="text-align:left">240.0.0.0 - 255.255.255.254</td><td style="text-align:left">—</td><td style="text-align:left">保留</td></tr></tbody></table></div><p>特殊的IP地址</p><p>1）网络地址：标识网络，主机号部分设置为全0 ；<br>2）定向广播地址：标识某个网络中的全部主机，主机号部分为全1 ；<br>3）有限广播地址：用于需要在本地网络上广播，又不知道自己所处网络的情形，形式为255.255.255.255 ；<br>4）回送地址：用于本机进程间的通信或协议软件测试，首字节为127；<br>5）保留地址：192.168.0.0 ~ 192.168.255.255//用于私有内部网络</p><p>4. ARP的思想与步骤</p><p>思想：广播询问，单播回应</p><p>步骤：</p><ul><li>发送发以广播方式发送一个ARP请求报文，其中包含接收方的IP地址；</li><li>网络上所有主机接受该请求，将其中IP地址与自身IP地址比较，如果相同则向发送方回应，回应包含自己的物理地址，否则不回应。</li></ul><p>代理ARP：R代理主机D向A发送ARP应答（两次来回）</p><p>安全问题：如何实现ARP劫持？</p><p><img src="https://s2.ax1x.com/2019/11/27/QpReUI.jpg" width="30%"></p><p>嗅探：用以获取网络中的通信数据。<br>共享环境下（广播投递模式）：直接把网卡设置为工作于“混杂（promiscuous）”模式。<br>交换环境下：基于ARP欺骗的嗅探器及会话劫持<br>防范：静态缓存、专门的ARP欺骗防范工具</p><p>5. ARP提高通信效率的措施（没有最好，只有最合适）</p><p>使用缓存机制<br>捎带机制、入网或更换网卡时广播自己的IP/MAC映射关系<br>软状态：如果在给定的时间段（通常为20分钟）内都没有使用某个物理地址，则相应的记录会被删除。（统计性方法或者类似LRU算法的方法优化）</p><p>6.反向地址解析协议RARP</p><p>问题：IP地址保存在硬盘里，无盘工作站没有硬盘，怎么办？<br>RARP：放在服务器里。<br>问题：没有IP地址怎么通信？解决：使用物理广播。 </p><p><br></p><h4 id="第四章-互联网协议IP"><a href="#第四章-互联网协议IP" class="headerlink" title="第四章 互联网协议IP"></a>第四章 互联网协议IP</h4><ol><li><p>引入目的</p><p>用IP（Internet Protocol）屏蔽底层物理网络协议差异，实现异构网络互联。</p></li><li><p>IP协议提供无连接、不保证可靠、<strong>尽最大努力的投递机制</strong>体现在哪里？</p><p>使用ICMP协议允许路由器或主机报告差错情况和提供有关信息 ，帮IP协议尽最大努力服务。</p></li><li><p>IP数据报中的分片问题</p><ul><li><p>字段含义</p><ul><li>标识：2字节，用于数据报分片及重组，相同的分片此字段值相同</li><li>标志：3位，MF为1表示后面还有分片，DF为1表示不能分片</li><li>片偏移量：13位，起始地址/8</li></ul></li><li><p>为什么使用片偏移量，而序列号不行？</p><p>因为永远不知道下一个网络的MTU是多大，可能会继续分片</p></li><li><p>重组：将若干个分片重新组合还原为原来的数据报，地点在目的主机</p></li><li><p>分片迟迟不来怎么处理？</p><p>设置<strong>定时器</strong>防止由于分片丢失造成重组过程无限延长</p></li></ul></li><li><p>Ping命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-t             Ping 指定的主机，直到停止。</span><br><span class="line">               若要查看统计信息并继续操作，请键入 Ctrl+Break；</span><br><span class="line">               若要停止，请键入 Ctrl+C。</span><br><span class="line">-a             将地址解析为主机名。</span><br><span class="line">-n count       要发送的回显请求数。</span><br><span class="line">-l size        发送缓冲区大小。</span><br><span class="line">-f             在数据包中设置“不分段”标记(仅适用于 IPv4)。</span><br><span class="line">-i TTL         生存时间。</span><br><span class="line">-v TOS         服务类型(仅适用于 IPv4。该设置已被弃用，</span><br><span class="line">               对 IP 标头中的服务类型字段没有任何</span><br><span class="line">               影响)。</span><br><span class="line">-r count       记录计数跃点的路由(仅适用于 IPv4)。</span><br><span class="line">-s count       计数跃点的时间戳(仅适用于 IPv4)。</span><br><span class="line">-j host-list   与主机列表一起使用的松散源路由(仅适用于 IPv4)。</span><br><span class="line">-k host-list    与主机列表一起使用的严格源路由(仅适用于 IPv4)。</span><br><span class="line">-w timeout     等待每次回复的超时时间(毫秒)。</span><br><span class="line">-R             同样使用路由标头测试反向路由(仅适用于 IPv6)。</span><br><span class="line">               根据 RFC 5095，已弃用此路由标头。</span><br><span class="line">               如果使用此标头，某些系统可能丢弃</span><br><span class="line">               回显请求。</span><br><span class="line">-S srcaddr     要使用的源地址。</span><br><span class="line">-c compartment 路由隔离舱标识符。</span><br><span class="line">-p             Ping Hyper-V 网络虚拟化提供程序地址。</span><br><span class="line">-4             强制使用 IPv4。</span><br><span class="line">-6             强制使用 IPv6。</span><br></pre></td></tr></table></figure></li><li><p>两种选路方式</p><p>直接选路：源主机和目的主机连接于同一物理网络<br>间接选路：源主机和目的主机不在同一物理网络上<br>选路的基础：路由表</p></li><li><p>路由表构成</p><p>目标网络、子网掩码、网关地址、接口</p></li><li><p>处理传入的数据报</p><p>原则：主机和路由器都要参与选路；仅路由器会转发IP数据报，主机不会转发IP数据报。</p></li></ol><p><br></p><h4 id="第五章-Internet控制报文协议ICMP"><a href="#第五章-Internet控制报文协议ICMP" class="headerlink" title="第五章 Internet控制报文协议ICMP"></a>第五章 Internet控制报文协议ICMP</h4><ol><li><p>Internet <strong>Control</strong> Message Protocol</p></li><li><p>回送应答报文丢了不会重传。</p></li><li><p>需解决问题</p><p>循环投递问题：可能会耗尽网络资源。TTL可以避免这种后果；<br>分片丢失问题：重组超时时钟可防止重组程序无限期等待；<br>投递失败：选路失败、目的主机关机、目的主机处理数据报失败等情况。</p><p>拥塞控制问题：路由器处理能力达到极限时要告诉源端慢点发；<br>选路优化问题：有更好的路径时应通知源端；<br>目的地可达性判断；<br>时钟同步问题。</p><p>传递控制信息+提供差错报告=ICMP</p></li><li><p>原则</p><ol><li>ICMP差错报告报文的数据区包括发生差错的<strong>IP数据报首部以及数据区的至少前64比特</strong>。</li><li>仅能向数据报的<strong>源端</strong>报告差错，不能向中间路由器报告差错。</li><li>当携带ICMP差错报文的IP数据报出现差错时，不会再生成ICMP报文。</li><li>对于被分片的IP数据报，仅能对<strong>第一个分片</strong>应用ICMP协议。</li></ol></li><li><p>差错报告报文分类</p><p>目的站不可达报文：当路由器无法转发报文或交付数据时，可使用该报文通知数据报的发送者<br>超时报文：TTL=0或者分片重组超时<br>参数错误报文：当问题严重到必须把数据报丢弃时发送<br>Photuris：用于IPsec</p></li><li><p>网络控制报文分类</p><p>回送请求/回送应答报文：用于测试网络连通性<br>路由器通告/路由器恳求报文：用于一个网络中有多个路由器的场合<br>时戳请求/时戳应答报文：分布式系统时钟同步；估算两台主机之间传输数据报的往返时间</p><p>初始时戳：记录发送者生成时戳请求报文的时间$T_i$ ；<br>接收时戳：记录接收者收到请求的时间$T_r$ ；<br>传送时戳：记录接收者生成应答报文的时间$T_t$ ；<br>发送方收到回应的时间$T_h$；<br>传输时延：$D_t = [(T_h - T_i) – (T_t - T_r)]/2$</p></li></ol><p><br></p><h4 id="第六章-用户数据报协议UDP"><a href="#第六章-用户数据报协议UDP" class="headerlink" title="第六章 用户数据报协议UDP"></a>第六章 用户数据报协议UDP</h4><ol><li><p>提供不可靠、无连接的数据交互服务</p></li><li><p>报文格式</p><p>源端口，目的端口 ，报文长度，校验和（可选），都为2字节</p></li><li><p>校验和与IP首部校验和的区别</p><p>计算方法类似，UDP需要将伪首部被附加在UDP报文首部和数据区之前；<br>IP只检验数据报的首部 ，UDP 将首部和数据部分一起都检验 。</p><p>校验和计算方法： ①把伪首部添加到UDP上；②将检验和字段添零；③所有位划分为16位的字； 把所有16位的字相加， 0和0相加是0，0和1相加是1，1和1相加是0但要产生一个进位1，加到下一列。若最高位相加后产生进位，则最后得到的结果要加1 ；④最后和取反。</p><p>校验时求和取反为0说明无差错。</p></li><li><p>端口号的实质：缓存</p></li></ol><p><br></p><h4 id="第七章-传输控制协议TCP"><a href="#第七章-传输控制协议TCP" class="headerlink" title="第七章 传输控制协议TCP"></a>第七章 传输控制协议TCP</h4><ol><li><p>三次握手</p><p><img src="https://s2.ax1x.com/2019/11/27/QCJ0DU.md.png" width="50%"></p><p>注意服务端的序列号不是x+1，而是y。</p></li><li><p>改进的三次握手</p><p><img src="https://s2.ax1x.com/2019/11/27/QCYHwF.md.png" width="50%"></p><p>提供半关闭能力：一个方向的连接关闭后，另一个方向的还可以继续使用。</p></li><li><p>RST的作用</p><p>连接双方立即停止传输，关闭连接，并释放所有缓冲区等有关资源。</p></li><li><p>半开连接检测</p><p>服务器发现一条TCP连接上已经很长时间没有传输数据。</p><p>解决方案：引入<strong>保活定时器</strong>（通常2小时）。</p></li><li><p>提供可靠的数据交付服务</p><p>① 防止丢失的机制：带重传的肯定确认技术<br>如果确认报文丢失， 则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。 </p><p>② 防止重复乱序<br>重复原因：确认重传机制造成不必要重传<br>乱序原因：每个报文封装在IP数据报中独立传输<br>解决方案：引入序号，第n+1个报文的序号= 第n个报文的序号+ 第n个报文的长度  </p></li><li><p>传输效率与流量控制<br>滑动窗口思想</p></li></ol><p><br></p><h4 id="第八章-Internet地址扩展技术"><a href="#第八章-Internet地址扩展技术" class="headerlink" title="第八章 Internet地址扩展技术"></a>第八章 Internet地址扩展技术</h4><ol><li><p>透明路由器</p><p>广域网和局域网的中转<br>局域网：没有自己的IP前缀<br>外部视图：透明，是一般的主机；内部视图：网关<br>优点：节省IP地址；支持负载均衡<br>缺点：适用有大量地址空间的网络；不提供标准路由器提供的服务；不能完全参与ICMP或IGMP等网络管理协议。</p></li><li><p>代理ARP</p><p>允许一个网络地址由两个物理网络共享，一个主网络，一个隐藏网络。主网络和隐藏网络通信的路由器运行代理ARP</p></li><li><p>子网编址</p><p>思想：把一个网络分成若干个物理网络<br>IP地址 = 网络号+物理地址+主机<br>分类：定长子网划分、变长子网划分<br>定长子网的子网号不能全1是为了方便定向广播，变长子网的子网号可以全1是为了更好利用地址空间。</p><p>选路算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.  从数据报中提取目的IP地址D,并计算网络前缀N</span><br><span class="line">2.  if N与任何直连的网络地址匹配</span><br><span class="line">    then 通过该网络把数据直接交付到目的地D</span><br><span class="line">3.  else if 表中含D的特定主机路由</span><br><span class="line">then 把数据报发送到表中指定的下一跳</span><br><span class="line">4.  else if 表中含到N的路由</span><br><span class="line">then 把数据报发送到表中指定的下一跳</span><br><span class="line">5.  else if 表中含默认路由</span><br><span class="line">then 把数据报发送到表中指定的下一跳</span><br><span class="line">6.  else 宣布选路出错</span><br></pre></td></tr></table></figure></li><li><p>匿名点到点链路</p></li><li><p>超网编址CIDR</p><p>思想：无类型编址，将两个或多个小型网络合并成一个大网络<br>表示方法：最低地址+子网掩码；斜杠表示法<br>优点：分配各种大小地址块时的灵活性</p></li><li><p>NAT</p><ul><li><p>概念</p><p>不需要网点上的每台主机都拥有一个全球有效的IP地址，仅需要网点有一条到Internet的连接，并且至少有一个全球有效的IP地址G。</p></li><li><p>工作原理</p><ul><li>将全球有效地址（或地址段）G分配给把网点连接到Internet上并运行NAT软件的计算机（一般是一台多地址主机或路由器，称为NAT盒，NAT box）。</li><li>所有数据报从网点传到Internet或从Internet传到网点时，都要通过NAT盒。</li><li>NAT对传入数据报和外发数据报中的地址进行转换，即用G替换每个外发数据报中的源地址，用主机的专用地址替换每个传入数据报的目的地址。</li><li>从外部主机的角度来看，所有数据报都来自NAT盒，所有响应也返回到NAT盒；从内部主机的角度来看，NAT盒看上去是一个可达Internet的路由器。 </li></ul></li><li><p>地址转换方式</p><ul><li>静态NAT，一对一，出于安全考虑</li><li>动态NAT，多对多</li><li>网络地址端口转换，多对一，利用了TCP或UDP协议端口号来提供并发性</li></ul></li></ul></li></ol><p><br></p><h4 id="第九章-路由协议概述"><a href="#第九章-路由协议概述" class="headerlink" title="第九章 路由协议概述"></a>第九章 路由协议概述</h4><ol><li>距离向量算法应用协议：RIP，BGP</li><li>内部网关协议IGP：在一个自制系统内部使用的路由选择协议，如RIP和OSPF协议</li><li>外部网关协议EGP：数据报传到自治系统边界时用到，如BGP</li></ol><p><br></p><h4 id="第十章-选路信息协议RIP"><a href="#第十章-选路信息协议RIP" class="headerlink" title="第十章 选路信息协议RIP"></a>第十章 选路信息协议RIP</h4><ol><li><p>工作原理</p><p>1)RIP路由器使用UDP进行路由信息交换，知名端口为520；<br>2)请求（request）报文：用来向相邻路由器请求路由信息；<br>3)响应（response）报文：用来向相邻路由器通告本地路由信息；<br>4)使用向量距离路由算法。通告路由信息（目的站地址，距离）；<br>5)采用跳数作为距离度量标准。路由器与直接相连网络的距离为1跳。一个路由器R到目的站的一条路径长度是该路径上所有路由器（包括路由器R在内）的数目，有效范围为1-16，其中16表示网络不可达；<br>6)系统启动时，协议模块在所有配置RIP的接口上发出request报文，并进入循环等待状态，等待相邻路由器的request报文或response报文的到来。相邻路由器收到request报文后，将本地路由信息包含在response报文中，予以应答。每当收到response报文，协议模块将调用向量-距离算法，依次处理其中的每一路由条目；<br>7)每个RIP路由器周期性地向相邻路由器通告本地路由信息，该信息也以response报文传送；<br>8)在实际应用中，RIP路由器分为主动型（Active）和被动型（Passive）两种。主机运行RIP时，只能采用被动方式。</p></li><li><p>慢收敛问题</p><p>画拓扑图说明以下对策</p><p><img src="https://s2.ax1x.com/2019/11/28/QPZHrn.png" width="50%"></p><p>计算到无穷问题：R1检测到网络1已经断开，于是将路径设置为不可达（16），并向R2通告该信息；R2也会向R1通告该信息。<br>情形1：在收到R2的通知前，R1已经将信息通报出去，这是理想的情况；<br>情形2：在R1通告前，R2的更新报文已到达，这就坏了……</p><ul><li>简单分割范围法：当路由器向一个接口发送路由更新报文时，其中不包含从该接口获取的路径信息。</li><li><strong>带毒性逆转的分割范围法</strong>：当路由器向一个接口发送路由更新报文时，如果某个条目是通过该接口获得的，则将该条目的距离设置为无穷大。</li><li>抑制法：所有路由器在收到某个网络不可达的消息后，将相应表项的距离值置为16，并将此信息保留一段时间（坏消息保留时间默认60秒）。</li><li>触发更新法：一旦发现网络连接消失，就将该网络设置为不可达，并立即发送路由更新报文，而不等待正常的路由更新周期时间到。</li></ul></li></ol><p><br></p><h4 id="第十一章-开放式最短路径优先OSPF"><a href="#第十一章-开放式最短路径优先OSPF" class="headerlink" title="第十一章 开放式最短路径优先OSPF"></a>第十一章 开放式最短路径优先OSPF</h4><ol><li><p>区域的概念</p><p>区域包括路由器和网络，用一个编号标识。<br>每个AS都有一个骨干区域，编号为0。<br>所有非骨干区域都与骨干区域相连。<br>每个区域内的路由器相互通告链路状态，维护本区域内的链路状态数据库；同一自治系统中的各区域之间只交换经过汇总的路由信息。<br>非骨干区域之间不能直接进行路由信息交互，它们之间的路由信息分发由骨干区域负责。<br>这种体系结构不仅使得路由维护高效，而且可以隐藏区域内的网络拓扑结构，有利于提高网络安全性。</p></li><li><p>路由器分类<br>（1）内部路由器（IR）：一个路由器所有直接相连的网络都在同一区域，同一区域内的各内部路由器有着相同的链路状态数据库。<br>（2）区域边界路由器（ABR）：一个路由器的接口位于多个区域。ABR拥有所连每个区域的链路状态数据库，并将其中的信息进行汇总，发送到骨干区域，后者再将这些信息分发到其它区域。<br>（3）骨干路由器（BR）：一个路由器至少有一个接口位于骨干区域，所有ABR和骨干区域中的IR都是骨干路由器。<br>（4）自治系统边界路由器（ASBR）：负责与其它自治系统交换路由信息。它位于骨干区域，将本自治系统的路由信息向其它自治系统通告，也向整个自治系统通告所得到的自治系统外部的路由信息。自治系统内的所有路由器都知道通往ASBR的路径。</p></li><li><p>区域分类（骨干和非骨干）</p><p>“桩”的引入：减少计算开销。<br>桩域：仅接受默认路由和汇总LSA，不接受AS外部链路，不包含ASBR的非骨干区域都可以配置为桩域；</p></li></ol><p><br></p><h4 id="第十二章-边界网关协议BGP"><a href="#第十二章-边界网关协议BGP" class="headerlink" title="第十二章 边界网关协议BGP"></a>第十二章 边界网关协议BGP</h4><ol><li>用于AS之间进行路由信息交换</li><li>基本原理<br>通过相邻AS之间交换路由信息，使得每个AS都拥有一个AS级的Internet连通图。两个相邻AS之间交换路由信息时，要选择相邻的BGP路由器作为发言人（Speaker）。每个发言人向外通告经过聚类后的可达性路由信息，以降低路由表规模和隐藏网络拓扑结构。这些信息可能是关于其AS内部的，也可能来自其它AS。BGP使用<as有序列表，目的站>来表示一条路由信息，为跨越AS的数据报传递确定路径。</as有序列表，目的站></li><li>基于TCP，使用端口号179</li></ol><p><br></p><h4 id="第十三章-Internet组播"><a href="#第十三章-Internet组播" class="headerlink" title="第十三章 Internet组播"></a>第十三章 Internet组播</h4><ol><li><p>使用D类地址，前四位1110</p><p>永久分配地址：用于Internet上的主要服务及基础设施的维护。<br>临时使用地址：需要时创建，当组成员数为0时予以丢弃。</p></li><li><p>群组管理协议IGMP</p><ul><li><p>功能：成员加入退出群组，判断群组中是否还有组成员。</p></li><li><p>分级</p><ul><li>0 主机不能发送也不能接收组播数据报</li><li>1 主机<strong>能发送但不能接收</strong>组播数据报</li><li>2 主机既能发送也能接收组播数据报</li></ul></li><li><p>管理</p><p>当主机要加入一个群组时，必须向本地组播路由器发送IGMP报文，其中包含该群组的地址，以宣布其成员状态；<br>组播路由器收到报文后，向互联网上的其它组播路由器传播该信息以建立必要的路由。<br>组播路由器周期性地<strong>轮询</strong>本地网络上的主机，以确定现在各个群组中有哪些主机。<br>如果经过若干次轮询后，某个群组中始终没有主机应答，则组播路由器就认为本地网络中不再有该群组的成员，并停止向其它组播路由器通告该群组的成员信息。</p></li></ul></li><li><p>管理为什么使用轮询不用广播？</p><p>使用广播的话，主机可能不应答，避免了广播风暴；<br>轮询更有利于安全性；<br>IGMP是不紧急的事件，允许一定时延</p></li></ol><p><br></p><h4 id="第十四章-移动IP"><a href="#第十四章-移动IP" class="headerlink" title="第十四章 移动IP"></a>第十四章 移动IP</h4><ol><li><p>主机在变换网络后，仍能以原来的IP地址与Internet上的其它主机进行通信。</p></li><li><p>特点<br>透明性；互操作性；安全性；宏安全性</p></li><li><p>两个IP地址</p><p>1) 家乡地址：家乡网络给MH分配的固定地址，在移动过程中保持不变，被主机的应用程序和传输层使用；<br>2) 转交地址：外地网络给MH分配的临时地址，随MH的移动而改变。</p></li></ol><p><br></p><h4 id="第十五章-应用层系统服务"><a href="#第十五章-应用层系统服务" class="headerlink" title="第十五章 应用层系统服务"></a>第十五章 应用层系统服务</h4><ol><li><p>自举协议BOOTH</p><p>解决无盘工作站获取IP地址、网关、掩码、域名服务器等信息的问题。<br>基于UDP，使用端口号67</p><p>Q：没有自己的IP地址，怎么通信？<br>A：使用有限广播，源IP地址字段设置为全0。</p><p>Q：客户端不知道自己的IP地址，也没有IP/MAC映射关系，怎么办？<br>A：（1）在收到BOOTP请求后，服务器就把其中包含的物理地址及相应的IP地址写入ARP缓存，随后使用单播方式发送；<br>（2）广播响应，响应中包含客户端硬件地址。</p><p>Q：什么是冷备份、热备份？优缺点是什么？<br>A： 冷备份：先关闭数据库停止使用，再执行备份的方式；优点是简单快速、容易恢复到某个时间点、方便维护；缺点是只能恢复到某个时间点、备份期间数据不便正常使用。<br>热备份：指执行备份时不影响备份文档正常使用的方式；优点是备份速度快、不影响数据使用；缺点是所有操作都会同步，包括删除。 </p></li><li><p>动态主机配置协议DHCP</p><p>工作原理：设置DHCP服务器，客户端请求服务器给自己分配IP地址。<br>配置方式：手工配置，即管理员可以为特定的计算机配置一个永久IP地址；自动配置，即为某个第一次上网的计算机分配一个永久地址；动态配置，即为上网的计算机分配一个临时地址。</p></li><li><p>域名系统DNS</p><p>作用：IP地址不方便记忆，给Internet上的主机起个便于记忆的名字，同时解决名字到IP地址的映射问题</p><p>两个要素：抽象要素，指明了名字语法和名字的授权管理规则；具体要素，指明了将名字映射到IP地址的具体方法。</p><p>域名解析过程：客户端/服务器模型</p><p>DNS既可以基于TCP，也可以基于UDP，服务器则使用知名端口53。<br>核心：数据传输量少，可靠性要求低的时候用UDP；否则用TCP。</p><p>DNS欺骗：恶意攻击者改变DNS响应并把解析结果指向自己可控的主机</p></li><li><p>域名前加www.的作用？</p><p> 标识这是一个需要用浏览器来访问的网页服务 </p></li><li><p>域名和IP地址的映射关系是一对多还是多对多？为什么？</p><p>多对多；<br>一个域名可以对应多个ip， 根据请求的位置和运营商返回不同的解析结果，比如负载均衡应用；一个ip也可以指向多个域名，比如购买的虚拟主机。 </p></li></ol><p><br></p><h4 id="第十六章-网络管理标准SNMP"><a href="#第十六章-网络管理标准SNMP" class="headerlink" title="第十六章 网络管理标准SNMP"></a>第十六章 网络管理标准SNMP</h4><ol><li><p>网络管理需求</p><p>FCAPS<br>1）故障管理（Fault Management）：用于检测、定位和排除网络硬件和软件中的故障。出现故障时，要能够确认故障、记录故障，找出故障位置并尽可能排除。<br>2.）配置管理（Configuration Management）：掌握和控制网络的运行状态，包括网络内部设备的状态及其连接关系。<br>3）帐务管理（Account Management）：度量各个终端用户和应用程序对网络资源的使用情况，按照一定标准计算费用并进行保存。<br>4） 性能管理（Performance Management）：考虑的是网络运行的好坏。性能需要用一些指标来衡量，比如：吞吐率、响应时间等。</p><p>5）安全管理（Security Management）：对网络资源及重要信息进行访问约束控制。</p></li><li><p>SNMP的3个组件</p><p>MIB：Management Information Base，管理信息库，定义了管理对象的全集；<br>SNMP通信协议：定义了实施网络管理时的通信规约；<br>SMI：Structure of Management Information，管理信息结构，定义了管理对象和传输报文的标准语法。</p></li><li><p>MIB = 对象+实例</p></li><li><p>SNMP规定的内容：访问控制机制、通信规约、报文格式</p></li><li><p>基于UDP，使用端口161（被管者）和162（管理者）</p></li></ol><p><br></p><h4 id="第十七章-万维网与电子邮件系统"><a href="#第十七章-万维网与电子邮件系统" class="headerlink" title="第十七章 万维网与电子邮件系统"></a>第十七章 万维网与电子邮件系统</h4><ol><li><p>WWW</p><p>World Wide Web，万维网<br>组成：大量Web页面，每个页面是一个超媒体（hypermedia）</p></li><li><p>URL：Universal Resource Locator，统一资源定位符，每个页面唯一的标识</p></li><li><p>HTTP</p><p>HyperText Transfer Protocol，超文本传输协议，基于TCP，80端口<br>客户端/服务器模型。页面存储于服务器，客户端通过HTTP向服务器请求页面</p><p>请求方式：<br>GET：读取页面或向某个页面附加资源，体现在URL中。POST：向某个页面附加资源，体现在HTTP的消息主体中<br>HEAD：请求读取某个Web页面的头部；可用于测试URL的有效性和搜索引擎<br>CGI：Common Gateway Interface，公共网关接口，用于连接WWW和数据库的接口脚本或程序，通常放在cgi-bin目录下；动态创建页面<br>表单：用于将数据从浏览器传递给服务器，提交时参数和数据都传递</p><p>非持久连接：客户端与服务器建立连接，获取页面，之后关闭连接。<br>持久连接：一旦客户端与服务器建立了TCP连接，就可以在这个请求上发送多次请求并接收响应，等所有请求都发送完成后再关闭连接。<br>流水线技术：在响应到来之前就可以发送下一个请求。<br>问题：如何分隔每个请求？解答：发送数据前加入相应长度。</p><p>服务器驱动协商方式：浏览器首先发出协商请求，指定一系列选项值及URL；服务器收到请求后，从中选取满足浏览器需求的一项。如果有多项符合条件，则服务器选取优先级最高的一项。<br>浏览器驱动协商方式：浏览器向服务器发送请求，询问可用的内容。服务器返回可能的内容列表。浏览器之后从中选取一项，发送第二个请求获得该数据项。</p><p>代理服务器：浏览器和服务器的中介，提高通信效率，减轻服务器负担。<br>浏览器：使用代理服务器可以绕过某些限制。<br>高速缓存：代理服务器设置，缓存页面，不必每次都到服务器取。</p><p>报文格式：字符串，包括开始行、首部行、实体主体。首部和实体之间间隔一个空行。</p><p>HTTP1问题：只允许一次发送个请求。<br>解决：使用多条链接来并行发送网站请求。<br>HTTP2特点：引入多路复用（Multiplexing）技术来解决请求数量受限的问题，允许同时通过单一的HTTP2连接发起多重的请求-响应消息。</p></li><li><p>电子邮件系统</p><p>MIMIE（Multipurpose Internet Mail Extensions，多用途互联网邮件扩充）解决的问题：让邮件可以发送各种格式的附件</p><p>SMTP：发送邮件的协议；使用客户端/服务器模型；基于TCP，使用知名端口号25；定义了14条命令21种应答。</p><p>POP：Post Office Protocol，用于接收邮件。使用客户端/服务器模型，基于TCP，使用知名端口号110；用户从邮箱中读取邮件时，会把邮件下载到本地保存，之后服务器会把邮件删除掉。</p><p>IMAP：Internet Mail Access Protocol，用于接收邮件。使用客户端/服务器模型，基于TCP，使用知名端口号143 ；对远程邮箱的管理和操作功能更强大，且用IMAP读邮件时，本地并不保存该邮件，在用户明确地发出删除命令之前，服务器都不会删除这个邮件。</p></li></ol><p><br> </p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章-TCP-IP概述&quot;&gt;&lt;a href=&quot;#第一章-TCP-IP概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 TCP/IP概述&quot;&gt;&lt;/a&gt;第一章 TCP/IP概述&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是Internet？&lt;/p&gt;
&lt;p&gt;Network of Networks（网络之网络），连接各个子网的网络
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="网络协议" scheme="http://quincy.ink/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理 学习笔记</title>
    <link href="http://quincy.ink/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/数字图像处理-学习笔记.html</id>
    <published>2019-10-29T02:40:31.000Z</published>
    <updated>2020-05-02T01:12:33.131Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章-数字图像基础"><a href="#第一章-数字图像基础" class="headerlink" title="第一章 数字图像基础"></a>第一章 数字图像基础</h4><ol><li><p>数字图像的概念（理解）</p><p>数字图像用二维的亮度函数 f(x,y) 表示，函数值与对应点的光强成正比。其中数字化的空间位置称为像素（Pixel），数字化的亮度值称为灰度值，表示数字图像的二维矩阵N*M为空间分辨率。<a id="more"></a></p></li><li><p>数字图像的多样性（理解）</p><p>成像类型多样：<strong>反射成像</strong>是由物体表面反射的电磁波到达成像传感器而成像；<strong>发光成像</strong>是物体本身辐射的电磁波到达成像传感器而成像；<strong>吸收成像</strong>是由于一部分透过物体的电磁波到达成像传感器而成像</p><p>尺度多样：日常观察物体或场景$1～10^3$; 天文望远镜$&gt;10^{30}$；电子显微镜$&lt;10^{-10}$</p></li><li><p>根据图像数据量的分类（理解）</p><p>二值图像：每一个像素仅占用1位，灰度值为0或1，其中，0表示黑色，1表示白色</p><p>灰度图像：黑与白之间有多级灰色深度，通常灰度级有2^8=256个</p><p>索引图像：包含颜色查找表，通过查找映射的方法表示彩色图像的颜色，其中颜色查找表有三维分别代表R,G,B的颜色分量</p></li><li><p>图像数字化（掌握）</p><p>概念：自然场景的空间位置和辐射度都是连续量，将连续（模拟）信号转变为离散（数字）信号的转换过程</p><p>过程：</p><ul><li><p>采样：对空间坐标(x,y)的离散化，决定了空间分辨率；空间分辨率越低，可辨细节越差</p></li><li><p>量化：对亮度值f(x,y)的离散化，决定了灰度级分辨率</p></li></ul><p>对于细节相对丰富的图像：空间分辨率对图像质量影响大，而灰度级分辨率对图像质量影响小</p><p>对于灰度相对平坦的图像：灰度级分辨率对图像质量影响大，而空间分辨率对图像质量影响小</p></li><li><p>数字图像的常见失真类型（理解）</p><ul><li>混叠效应<br>当采样间隔过大时，由于采样频率小于奈奎斯特频率，而引起频谱的高频成分发生相互交叠，频谱重叠导致失真</li><li>模糊效应<br>长时间曝光过程中成像设备与成像场景的相对运动而造成运动模糊；<br>光学镜头散焦、大气湍流、短时间曝光而造成散焦模糊。</li><li>块效应<br>在相邻块之间引入的非连续性，视觉上看似马赛克的效果。<br>块效应产生的原因：<br>对图像分块处理而引起的块状失真。<br>在图像压缩编码中，分块离散余弦变换编码和分块运动补偿是造成块效应的两个主要原因。</li><li>噪声<br>感光器件接收光信号并输出的过程中产生的异常像素。<br>根据噪声的分布和统计特征，成像系统的噪声源可以分为光电散粒噪声、读出噪声和脉冲噪声等</li></ul></li></ol><p><br></p><h4 id="第二章-数字图像处理基础"><a href="#第二章-数字图像处理基础" class="headerlink" title="第二章 数字图像处理基础"></a>第二章 数字图像处理基础</h4><ol><li><p>数字图像处理的关键阶段（了解）</p><p>图像获取、图像增强、图像恢复、形态学处理、图像分割、表示与描述、目标识别</p><p>图像压缩、彩色图像处理</p></li><li><p>像素的空间关系（理解）</p><p>邻域：</p><ul><li>4邻域：UDLR4个</li><li>对角邻域 ：对角4个</li><li>8邻域 ：周围8个</li></ul><p>邻接的两个必要条件：</p><ul><li>两个像素的位置在某种情况下是否相邻(4邻接、8邻接)</li><li>两个像素的值是否满足某种相似性</li></ul><p>连通的必要条件：设 p 和 q 是某一图像子集  S 中的两个像素，若存在一条完全由 S 中的像素组成的从 p 到 q 的通路，则称像素 p 和 q 是连通的(4连通、8连通)</p><p>区域：设  p为某一图像子集  S 中的一个像素，若像素 p 的某一邻域包含于 S 中则称像素 p 为  S 的内点，若  S 中的像素都是内点，则  S 称为开集，连通的开集称为开区域，简称为区域</p><p>边界：若像素  p 的任意邻域内有属于 S  的像素也有不属于 S  的像素，则像素 p 称为 S 的边界像素。 S 的边界像素的全体称为 S 的边界</p><p>距离度量：</p><ul><li>像素在空间上的近邻程度可以用像素之间的距离来度量</li><li>若三个像素满足(正定性：两点之间距离大于等于0) (对称性：距离与方向无关) (三角不等式：两点之间直线距离最短)三个条件，则称d( *,* )为距离函数</li><li>1范数(曼哈顿距离、菱形) ；2范数(欧几里得距离、圆形)；3范数(切比雪夫距离、正方形) </li></ul></li></ol><p><br></p><h4 id="第三章-空域图像增强"><a href="#第三章-空域图像增强" class="headerlink" title="第三章 空域图像增强"></a>第三章 空域图像增强</h4><ol><li><p>背景知识（了解）</p><p>图像增强：通过对图像的处理，使图像处理更适合一个特定的应用</p><p>空域图像增强：点处理和邻域处理</p></li><li><p>直方图（掌握）</p><p>概念：对于每个灰度值、求出在图像中具有该灰度值的像素数或概率(灰度直方图、概率直方图)</p><p>matlab函数：imhist(I)</p><p>性质：只能反映该图像中不同灰度值出现的频数，不能表示出像素的空间位置等其他信息；不同图像可能具有同样的直方图，图像与直方图之间是多对一的映射关系；直方图是总体灰度的概念；直方图可叠加性</p><p>累计直方图：是概率直方图  $P(r_k)$ 关于灰度级 $r_k$ 的累积概率分布(注意暗图像、亮图像、低对比度和高对比度图像各自特点)</p></li><li><p>灰度级变换（理解）</p><p>将灰度级r映射到灰度级s；</p><p>对数变换：压缩图像中较亮区域的动态范围；应用是傅里叶谱的显示；</p><p>指数变换：在照度-反射模型中可对图像进行反变换；应用是对数变换的对消；</p><p>幂次变换：幂<1,增暗降亮；幂>1,增亮降暗；</1,增暗降亮；幂></p><p>灰度反转：突出在大片黑色区域中的白色或灰色细节；</p><p>阈值增强：生成一幅高对比度的图像；软阈值，硬阈值。</p></li><li><p>直方图处理</p><p>基础理论（理解）：<strong>点处理</strong>方法，通过对灰度直方图进行变换有效地实现图像增强</p><p>直方图均衡化（掌握）：将直方图的灰度级概率分布变换为均匀分布</p><p>matlab函数：J = histeq(I)</p><p><img src="https://s2.ax1x.com/2019/11/20/MhYC01.png" alt="MhYC01.png"></p><p>通常新直方图分布比原直方图分布疏散，$S_k$的级数比$r_k$少</p></li><li><p>算术运算（掌握）</p><p>图像相加：对同一场景的多幅序列图像求取平均值，降低加性随机噪声；将一幅图像叠加到另一幅图像上，实现二次曝光效果</p><p>图像相减：显示两幅图像的差异，检测同一场景两幅图像之间的变化；图像分割（背景减除法）</p></li><li><p>空域滤波（理解）</p><p>基本概念</p><ul><li>空域滤波是一种<strong>邻域处理</strong>方法，通过直接在图像空间中对邻域内像素进行处理</li><li>作用域：像素及其邻域</li><li>空域滤波通常使用空域模板进行的图像处理，模板本身被称为空域滤波器</li><li>目的： 达到平滑或锐化图像的作用</li></ul><p>空域滤波器分类</p><p><img src="https://s2.ax1x.com/2019/11/20/MhtXM4.png" alt="MhtXM4.png"></p><p>图像平滑的作用：模糊、降低噪声</p><p>图像空域平滑分类：</p><ul><li><p>线性平滑滤波</p><p>特征：权系数全为正值；系数之和等于1，不会增加总体灰度程度</p><p>均值平滑(加权系数平均)、加权平均模板(加权系数中大边小)</p></li><li><p>统计排序平滑滤波</p><p>中值滤波：区域内像素排序后取中值；去噪同时保留了边缘和细节，对滤除脉冲噪声(椒盐噪声)非常有效</p><p>选取领域内最大(小)值-最大(小)值滤波</p></li></ul></li><li><p>双边滤波（理解）</p><p>非线性滤波</p><p>权系数由空域和值域平滑函数的乘积给出</p><p>随着与中心像素的距离和灰度差值的增大，邻域像素的权系数逐渐减小</p><p>双边滤波很好地保持图像的边缘；平滑低对比度变化的细节特征，包括噪声；值域尺度越小，则边缘保持越好</p></li><li><p>图像锐化（掌握）</p><p>作用：增强图像中的边缘和细节， 如边缘增强；减弱或清除灰度变化缓慢的区域，如边缘检测</p><p>差分近似偏导数，差分算子的响应程度与图像在该点灰度值的突变程度有关，图像锐化使用差分算子</p><p>一阶差分特点：在边缘处有一个强的响应，形成一个峰；一阶差分算子用于边缘检测</p><p>二阶差分特点：在边缘过零点，在过零点两侧，分别形成一个峰和一个谷；二阶差分算子用于边缘增强</p><p><strong>[#]</strong>Sobel算子</p><p><strong>[#]</strong>拉普拉斯算子</p></li></ol><p><br></p><h4 id="第五章-频域图像增强"><a href="#第五章-频域图像增强" class="headerlink" title="第五章 频域图像增强"></a>第五章 频域图像增强</h4><ol><li><p>滤波基础（理解）</p><p>卷积定理是空间域滤波和频率域滤波之间的纽带。</p><p>频率平面与图像空域特性的关系：</p><ul><li>图像变化平缓的部分靠近频率平面的圆心，这个区域为低频区域</li><li>图像中的边、噪声、变化陡峻的部分，以放射方向离开频率平面的圆心，这个区域为高频区域</li></ul><p>为什么要在频率域研究图像增强？</p><ul><li>可以利用<strong>频率成分和图像表观之间的对应关系</strong>。一些在空间域表述困难的增强任务，在频率域中变得非常简单</li><li><strong>滤波在频率域更为直观</strong>，它可以解释空间域滤波的某些性质</li><li>可以<strong>在频率域指定滤波器</strong>，做逆变换，然后在空间域使用结果滤波器作为空间域滤波器的指导</li></ul><p>频域滤波的基本流程：空域-&gt;频域；频域滤波；频域-&gt;空域</p><p><a href="https://imgchr.com/i/M5KqHK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/21/M5KqHK.md.png" alt="M5KqHK.md.png"></a></p></li><li><p>低通滤波器（理解）</p><p>概念：允许图像的低频成分通过，限制高频成分通过；低通滤波器和空域中的平滑模板具有等效的作用</p><p>振铃效应：在图像灰度剧烈变化的邻域产生灰度振荡的图像失真现象</p><p>理想低通滤波器：完全截断频谱中的高频成分；锐截止频率<strong>不能</strong>用电子器件实现，且会产生<strong>振铃效应</strong>，表现为在图像灰度剧烈变化的邻域产生<strong>灰度振荡</strong>；非常不实用，但是原理简单</p><p>巴特沃斯低通滤波器：物理可实现；通带与阻带之间并非锐截止而是逐渐下降为零，通带到阻带之间平滑过渡，因而滤波图像的振铃效应不明显；随着阶数增加，振铃效应越明显</p><p>指数低通滤波器：物理可实现；一阶二阶都没有振铃效应；随着阶数的增加，接近理想低通滤波器，振铃现象越明显</p></li><li><p>高通滤波器（理解）</p><p>概念：允许图像的高频成分通过，而限制低频成分通过；限制或减弱频谱中的低频成分可以起到图像锐化的作用</p><p>理想高通滤波器：无法用电子器件实现的，且会产生明显的振铃效应；随着截止频率的增大，被滤除的低频成分越多，边缘、细节逐渐突出；存在振铃效应，截止频率为15和30的振铃效应在图像上体现为边缘产生重影。随着截止频率的进一步增大，振铃效应应趋于增强，但是允许通过的高频也进一步减少，边缘逐渐细化，振铃效应反而不明显</p><p>巴特沃斯高通滤波器：物理可实现；如同二阶巴特沃斯低通滤波器，二阶巴特沃斯高通滤波器的传递函数在阻带与通带之间不是锐截止，是平滑的过渡，使滤波器具有良好的性能；随着截止频率的增大，被滤除的低频成分越多，边缘更加清晰化</p><p>指数高通滤波器：物理可实现；如同高斯低通滤波器，高斯高通滤波器的传递函数在阻带与通带之间平滑的过渡，使滤波器具有良好的性能；随着截止频率增加，被滤除的低频成分越多，边缘更加清晰化；相同截止频率的指数高通滤波器比巴特沃斯高通滤波器允许更多的低频成分通过，保留了更多的背景基调</p></li><li><p>带通、带阻与陷波滤波器（理解）</p><p>带通滤波器：允许一定频带的信号通过，用于抑制低于或高于该频带的信号、噪声干扰</p><p>带阻滤波器：与带通滤波器执行相反的操作；带阻滤波器限制某一带宽范围的频率成分通过，而允许带宽范围以外的频率成分通过</p><p>陷波滤波器：一种窄阻带的带阻滤波器；限制某一中心频率邻域内的频率成分通过，而允许其他频率成分通过</p></li><li><p>空滤滤波与频率滤波的对应关系（理解）</p><ul><li>频域滤波器的传递函数和空域冲激响应函数<strong>互为傅里叶变换对</strong></li><li>通过<strong>分析频域特性「主要是幅度特性」来分析空域模板的作用</strong>；借助频域滤波器的设计来指导空域模板</li><li>在频域图像增强中，利用频率成分和图像内容之间的对应关系，<strong>主观判断指定频域滤波器</strong>。一些直接在空域中表述困难的增强任务，在频域中变得直观</li><li>空域模板的作用可以通过<strong>分析其频域特性</strong>而知</li></ul></li></ol><p><br></p><h4 id="第八章-数学形态图像处理"><a href="#第八章-数学形态图像处理" class="headerlink" title="第八章 数学形态图像处理"></a>第八章 数学形态图像处理</h4><ol><li><p>背景（了解）</p><p>数学形态学的概念：数学形态学是一种基于形状的图像处理理论和方法，数学形态学图像处理的基本思想是选择具有一定尺寸和形状的结构元素度量，并提取图像中相关形状结构的图像分量，以达到对图像分析和识别的目的</p></li><li><p>基础（理解）</p><p>集合运算：并集、交集、差集、补集、映射、平移</p><p>逻辑运算：与、或、非</p><p>结构元素：是一个由0值和1值组成的矩阵；每一个结构元素有一个原点，结构元素中的原点指定待处理像素的位置；结构元素中的1值定义了结构元素的邻域，输出图像中对应原点的值建立在输入图像中相应像素及其邻域像素比较的基础上</p></li><li><p>二值图像形态学基本运算（掌握）</p><p>膨胀：$A  \oplus  B$，在图像中目标边界周围增添像素；结构元素对集合膨胀生成的集合是 B 的映射平移集合与集合 A 相交至少有一个非零元素时 B 的原点位置的集合</p><p><img src="https://s2.ax1x.com/2019/11/23/MH7fOI.png" alt="MH7fOI.png"></p><p>腐蚀：$A   \ominus   B$，移除图像中目标边界的像素；结构元素 B 对集合 A 腐蚀生成的集合是 B 的平移集合完全包含在集合 A 中时，B 的原点位置的集合</p><p><img src="https://s2.ax1x.com/2019/11/23/MH7qpQ.png" alt="MH7qpQ.png"></p><p>开运算：$A  \circ  B$，先腐蚀后膨胀；能消除小尺寸的目标和细小的突出部分，断开细小的桥接部分而分离目标区域、并在不明显改变目标区域面积的条件下平滑较大目标边界的作用</p><p>闭运算：$A  \bullet B$，先膨胀后腐蚀；能填补目标区域内部小尺寸的孔洞和细窄的缺口、桥接狭窄的断裂部分而使目标区域连通、并在不明显改变目标区域面积的条件下平滑较大目标边界的作用</p><p>击中击不中运算：$A \otimes  B$，定义在交集为空集的两个结构元素的膨胀和腐蚀运算的基础上；当且仅当 B1 平移某一z值包含在集合 A 的内部「即   B1 击中 A  」，且  B2 平移同一z值包含在集合  A  的外部「即  B2  击不中  A 」，这两个条件同时成立时，B  的原点位置的集合</p></li><li><p>二值图像形态学实用算法（掌握）</p><p>去噪：先开运算后闭运算</p><p>边界提取：$ \beta(A)=A-(A \ominus B)$</p><p>空洞填充：利用膨胀不断将由连通的边界包围的背景区域构成目标区域</p></li><li><p>二值图像形态学运算及其性质总结（理解）</p><p><br></p></li><li><p>灰度图像形态学算法（了解）</p><p>灰度膨胀</p><p>灰度腐蚀</p><p>灰度开运算</p><p>灰度闭运算</p></li></ol><p><br></p><h4 id="第九章-图像分割"><a href="#第九章-图像分割" class="headerlink" title="第九章 图像分割"></a>第九章 图像分割</h4><ol><li><p>图像分割基础（理解）</p><p>概念：将图像划分为若干有意义的区域或部分，或者从图像中提取感兴趣目标的图像处理技术</p><p>基本策略：根据特征（灰度、颜色、纹理等）； 图像各区域表现为不连续性（边缘检测）和相似性（阈值处理、区域生长）</p><p>图像抠图和图像分割的区别：图像抠图是指从一幅图像中尽可能完整地提取出感兴趣的目标；图像分割只是将一幅图像中的前景（目标）从背景中分离出来</p></li><li><p>基于边界的分割</p><p>边缘的定义（理解）：图像中灰度发生突变或不连续的微小区域（一组相连的像素集合），即是两个具有相对不同灰度值特性的区域的分界线。有方向和幅度两个特性。</p><p>一阶差分算子（掌握）</p><p><img src="https://s2.ax1x.com/2019/11/23/Mbb4hT.png" alt="Mbb4hT.png"></p><p><img src="https://s2.ax1x.com/2019/11/23/Mbbbu9.png" alt="Mbbbu9.png"></p><p><img src="https://s2.ax1x.com/2019/11/23/MbqS3D.png" alt="MbqS3D.png"></p><p>二阶差分算子（掌握）</p><p>…</p><p>不同边缘检测算子间的比较（掌握）</p><ul><li><p>梯度算子</p><p>Roberts算子利用一阶差分检测边缘，边缘定位精度较高，但抑制噪声能力较差，适用于陡峭边缘且信噪比高的图像。</p><p>Sobel与Prewitt算子等效于首先对图像进行加权平滑处理，然后再计算差分，因此，对噪声有一定的抑制能力，但检测出的边缘具有一定宽度，且不能形成闭合、连通的轮廓。</p></li><li><p>二阶差分算子<br>拉普拉斯算子对噪声非常敏感，不适合直接用于边缘检测。<br>LoG算子克服了拉普拉斯算子抗噪能力差的弱点，并能产生闭合、连通的轮廓，但在抑制噪声的同时也模糊了边缘，从而造成弱边缘漏检。<br>Canny算子可以形成闭合、连通且单像素宽度的边缘，但也会产生类似意大利式细面条盘子效应的虚假边缘</p></li></ul></li><li><p>基于阈值的图像分割</p><p>原理：通过设定不同的阈值，将图像中的像素分为两类或多类，具有计算简单、容易实现的优点；阈值的选取决定了阈值分割的效果，阈值法的关键是如何选择合适的阈值</p><p>特点：适用于目标与背景在灰度上有较强对比度，且目标或背景的灰度比较单一的图像；这种方法总可以得到封闭且连通区域的边界</p><p>分类：全局阈值法——利用全局信息对整幅图像求出最优分割阈值，可以是单一或多个阈值；局部阈值法——将整幅图像划分为若干区域，再对各个区域使用全局阈值法分别求出最优分割阈值</p><p>P参数法、梯度直方图、灰度-梯度二维直方图、多阈值法（理解）<br>Otsu阈值法、迭代阈值法（掌握）</p></li><li><p>基于区域的图像分割</p><p>区域生长法（掌握）<br>区域分裂合并法（理解）</p></li></ol><p><br></p><h4 id="第十章-小波变换与多分辨率分析"><a href="#第十章-小波变换与多分辨率分析" class="headerlink" title="第十章 小波变换与多分辨率分析"></a>第十章 小波变换与多分辨率分析</h4><ol><li><p>二维离散小波变换（ 2D-DWT）的背景（了解）</p><p>含噪图像噪声明显, 去噪图像中噪声被显著抑制；去噪过程,  “黑匣子”处理含噪图像,  获得“黑匣子”图像； “黑匣子”是去噪的核心部分, “黑匣子”图像经后续处理得去噪图像；此“黑匣子”即小波变换</p><p>小波变换全称为离散小波变换；小波变换能集中信号能量、去信号相关性；针对图像的小波变换为二维小波变换；二维小波变换对应的英文名为2D-DWT，2D Discrete Wavelet Transform</p></li><li><p>二维离散小波变换（ 2D-DWT）的效果（理解） </p><p>经过一级DWT变换(正变换)，原始图像被分解为四个子图：低频A1，以及三个高频H1,V1,D1.  四子图的大小为原始图像的1/4；由DWT子图可还原出原始图像, 此过程称为逆变换；前述图像去噪, 黑匣子为正变换, 后续处理包括逆变换和其它操作</p><p>二级DWT通过分解一级DWT的低频子图A1实现；三级DWT通过分解二级DWT的低频子图A2实现；更高级DWT的分解类似完成</p></li><li><p>二维离散小波变换（ 2D-DWT）的原理（理解）</p><ul><li>先处理原始图像的每一行<br>每一行为1D信号(矢量)，变换后得到两个部分，长度均为1D信号的1/2<br>逐行变换后，得行变换子图</li><li>后处理行变换子图的每一列<br>每一列为1D信号(矢量)，变换后得到两个部分，长度均为1D信号的1/2<br>逐列变换后，得列变换子图，亦即DWT子图</li></ul></li><li>一维离散小波变换（ 1D-DWT）的效果（掌握）</li><li>一维离散小波变换（ 1D-DWT）的原理（掌握）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章-数字图像基础&quot;&gt;&lt;a href=&quot;#第一章-数字图像基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 数字图像基础&quot;&gt;&lt;/a&gt;第一章 数字图像基础&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数字图像的概念（理解）&lt;/p&gt;
&lt;p&gt;数字图像用二维的亮度函数 f(x,y) 表示，函数值与对应点的光强成正比。其中数字化的空间位置称为像素（Pixel），数字化的亮度值称为灰度值，表示数字图像的二维矩阵N*M为空间分辨率。
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="数字图像处理" scheme="http://quincy.ink/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>通信原理 学习笔记</title>
    <link href="http://quincy.ink/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/通信原理-学习笔记.html</id>
    <published>2019-09-16T07:49:32.000Z</published>
    <updated>2020-05-02T01:12:45.783Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h4><ol><li><p>模拟信号与数字信号的区别(给定信号，要求能够区分)</p><p>模拟信号：载荷消息的信号参量取值连续（不可数、无穷多），如电话机输出的语音信号，其电压瞬时值随时间连续变化。也称为连续信号，连续是指信号载荷的消息的常量连续变化，在某一取值范围内可以取无穷多个值，而不一定要在时间上连续。</p><p>数字信号：载荷消息的信号参量只有有限个取值，如电报机、计算机输出的信号。<a id="more"></a></p></li><li><p>通信系统的一般模型</p><p>① 一般模型</p><p><a href="https://imgchr.com/i/nR4On1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nR4On1.jpg" alt="nR4On1.jpg"></a></p><p>信源：把消息变为原始电信号(基带信号)</p><p>发送设备：信号变换、放大、滤波、编码和调制等过程</p><p>信道：传输媒介</p><p>接收设备：信号放大、译码、解调等</p><p>信宿：把原始电信号变为消息</p><p>② 模拟通信模型</p><p><a href="https://imgchr.com/i/nR4bc9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nR4bc9.jpg" alt="nR4bc9.jpg"></a></p><p>调制器：基带信号变换为已调信号(带通信号)</p><p>③ 数字通信模型</p><p><a href="https://imgchr.com/i/nR4qXR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nR4qXR.jpg" alt="nR4qXR.jpg"></a></p><p>信源编码与译码：提高信息传输有效性；完成模/数(A/D)转换</p><p>信道编码与译码：加入监督码元，提高通信系统可靠性</p><p>加密与解密：提高安全性</p><p>调制：使信号适应信道的特性</p><p>同步：使收发两端的信号在时间上保持步调一直一致</p></li><li><p>数字通信的特点</p><p>优点：抗干扰能力强，噪声不积累；传输差错可控；便于数字信息的处理、变换、储存；易于集成，使通信设备轻量化；易于加密且保密性好</p><p>缺点：可能需要较大的传输带宽；对同步要求高，系统设备复杂</p></li><li><p>信息及其度量</p><p>①信息量 ，其中a=e时,单位为奈特(nit)；a=10时,单位为哈特莱(Hartly)；a=2时,单位为比特(bit,b)</p><script type="math/tex; mode=display">I = log_a\frac{1}{P(x)} = -log_aP(x)</script><p>②平均信息量(熵)，等概率时，$H_{max}=log_2M$；M代表符号集合大小</p><script type="math/tex; mode=display">H(x)=-\sum_{i=1}^{M}P(x_i)log_2P(x_i) (b/符号)</script><p>③总信息量，n代表符号数</p><script type="math/tex; mode=display">I=n*H(x)</script></li><li><p>通信系统的两个性能指标</p><p>①有效性</p><p>模拟通信系统看传输同样信源信号所需带宽，其越小频带利用率越高，有效性越好</p><p>数字通信系统</p><script type="math/tex; mode=display">R_B(码元传输速率，波特率) = \frac{1}{T_B(码元持续时间,码元宽度)} (Baud)</script><script type="math/tex; mode=display">R_b(信息传输速率,比特率) = R_B*log_2M(b/s)</script><script type="math/tex; mode=display">频带利用率\eta = \frac{R_B}{B}(Baud/Hz) 或 \eta_b = \frac{R_b}{B}(b/(s*Hz))</script><p>②可靠性</p><script type="math/tex; mode=display">误码率 P_e = \frac{错误码元数}{传输总码元数}</script><script type="math/tex; mode=display">误信率P_b = \frac{错误比特数}{传输总比特数}</script><p>在二进制中，$P_b=P_e$；M进制中，$P_b&lt;P_e$</p></li></ol><p><br></p><h4 id="第二章-确知信号"><a href="#第二章-确知信号" class="headerlink" title="第二章 确知信号"></a>第二章 确知信号</h4><ol><li><p>单位门函数频谱密度 ：$  \tau Sa(\pi f  \tau )$</p></li><li><p>单位冲激函数的特点（$ \delta $函数的性质）</p><p>①可用抽样函数的极限表示</p><script type="math/tex; mode=display">\delta(t) = \lim_{k\to \infty}\frac{k}{\pi}Sa(kt)</script><p>②</p><script type="math/tex; mode=display">f(t_0)=\int_{-\infty}^{\infty}f(t)\delta(t-t_0)dt</script><p>③可以看做单位阶跃函数的导数</p><script type="math/tex; mode=display">u(t) =\begin{cases}0, & t<0 \\1, & t>0 \end{cases};u'(t)=\delta(t)</script></li></ol><p><br></p><h4 id="第三章-随机过程"><a href="#第三章-随机过程" class="headerlink" title="第三章 随机过程"></a>第三章 随机过程</h4><ol><li><p>什么是随机过程？</p><p>①随机试验的全体样本函数的集合</p><p>②在时间进程中处于不同时刻的随机变量的集合</p><p>兼有随机变量和时间函数的特点。</p></li><li><p>什么是平稳随机过程？</p><p>狭义平稳(严平稳)；随机过程的统计特性与时间起点无关，即时间平移不影响其任何统计特性，则称该随机过程是在严格意义下的平稳随机过程，简称严平稳随机过程。</p><p>广义平稳：①均值与t无关，为常数a；②自相关函数只与时间间t2-t1有关</p><p>严平稳随机过程必定是广义平稳过程，反之不一定成立。</p></li><li><p>什么是各态历经性？</p><p>含义：随机过程中任一次实现都经历了随机过程的所有可能状态。</p><p>意义：过程的统计平均值和样本的时间平均值相同，可用一次实现的”<strong>时间平均</strong>“取代过程的”<strong>统计平均</strong>“，使测量和计算的问题大大简化。</p><p>具有各态历经性的随机过程一定是平稳过程，反之不一定成立。</p></li><li><p>平稳随机过程通过线性系统（输出均值、功率谱密度）</p><p>输出均值：$E = a * H(0)$ ，H(0)为线性系统在f=0处的频率响应，即直流增益</p><p>功率谱密度：$P_o(f) = P_i(f) * |H(f)|^2$，输入过程的功率谱密度乘以系统频率响应模值的平方</p></li><li><p>窄带过程的两种表示方法 and 结论1,2</p><p>表达式1：包络-相位形式</p><script type="math/tex; mode=display">\xi(t) = a_{\xi}(t)cos[w_ct+\varphi_{\xi}(t)]，a_{\xi}\ge0</script><p>表达式2：同相-正交形式</p><script type="math/tex; mode=display">\xi(t) = \xi_c(t)cosw_ct - \xi_s(t)sinw_ct</script><p>其中$\xi_c(t)$为同相分量 ，$\xi_s(t)$为正交分量</p><p>结论1：对于均值为0，方差为$\sigma_{\xi}^2$的平稳高斯窄带过程，其同相分量和正交分量也是平稳高斯过程；均值皆为0，方差等于为 $\sigma_{\xi}^2$，且两者在同一时刻的取值是互不相关的和统计独立的（因为是高斯过程）。</p><p>结论2：对于均值为0，方差为$\sigma_{\xi}^2$的平稳高斯窄带过程，其包络和相位的一维分布分别为瑞利分布和均匀分布，且两者统计独立。</p></li></ol><p><br></p><h4 id="第四章-信道"><a href="#第四章-信道" class="headerlink" title="第四章 信道"></a>第四章 信道</h4><ol><li><p>信道的分类</p><p>按照传输媒介分类</p><ul><li>有线信道：明线、对称电缆、同轴电缆及光纤等；</li><li>无线信道：可以传输电磁波(包括光波)的空间；传输方式有地波、天波和视线传播三种。</li></ul><p>按信道特性分类</p><ul><li>恒定参量信道：信道特性参数随时间缓变或不变；</li><li>随机参量信道：信道特性参数随时间随机变化；</li></ul></li><li><p>多径效应</p><p>多径传播：①信号的衰减随时间而变②信号的传输时延随时间而变③信号经过几条路径到达接收端，且每条路径的时延和衰减都随时间而变。</p><p>多径传播对信号的影响称为多径效应。</p></li><li><p>频率选择性衰弱</p><p>衰弱与信号频率及相对时延差有关，当发送信号具有一定频带宽度时，多径传播会导致信号中某些频率成分发生严重的随机性衰弱。</p></li><li><p>连续信道容量的表达式 </p><p>B(带宽Hz)、S(信号平均功率W)、N(噪声功率W)、n0(噪声功率谱密度W/Hz)</p><script type="math/tex; mode=display">C_t = Blog_2(1+\frac{S}{N})=Blog_2(1+\frac{S}{n_0B})</script></li></ol><p><br></p><h4 id="第五章-模拟调制系统"><a href="#第五章-模拟调制系统" class="headerlink" title="第五章 模拟调制系统"></a>第五章 模拟调制系统</h4><ol><li><p>调制的目的和作用</p><p>将基带信号转换成适合在信道中传输的已调信号，提高发射效率；实现信道的多路复用，以提高信道利用率；扩展信号带宽，提高系统抗干扰能力。</p></li><li><p>线性调制有哪一些？为什么称为线性调制？</p><p>调幅(AM)、双边带(DSB)、单边带(SSB)、残留边带(VSB)</p><p>在频谱结构上，幅度已调信号的频谱完全是基带信号在频域内的简单搬移，由于这种搬移是线性的，因此幅度调制又称为线性调制。</p></li><li><p>单边带调制实现的两种方法</p><p>滤波法、相移法</p></li><li><p>调频信号的带宽</p><script type="math/tex; mode=display">B_{FM}=2(m_f+1)f_m=2(\Delta f+f_m)</script></li></ol><p><br></p><h4 id="第六章-数字基带传输系统"><a href="#第六章-数字基带传输系统" class="headerlink" title="第六章 数字基带传输系统"></a>第六章 数字基带传输系统</h4><ol><li><p>什么是数字基带传输系统？</p><p>未经过载波调制而直接传输数字基带信号的系统。</p></li><li><p>什么是数字频带传输系统？</p><p>包括了调制和解调过程的数字传输系统。</p></li><li><p>导致误码率的两个原因</p><p>码间串扰、噪声</p></li><li><p>数字基带信号的几种波形（画图）</p><p>单极性、双极性、单极性归零、双极性归零、差分、多电平</p></li><li><p>基带信号的频谱情况</p><p>①二进制随机脉冲序列的功率谱$P_s(f)$可能包含连续谱和离散谱；</p><p>②连续谱总是存在，因为实际中的$G_1(f)  &ne; G_2(f)$。连续谱的形状取决于$g_1(t)$和$g_2(t)$的频谱以及概率P；</p><p>③离散谱是否存在，取决于$g_1(t)$和$g_2(t)$的频谱以及概率P。当$g_1(t) = -g_2(t) = g(t) $ 且概率 $P=1/2$时，没有离散分量；</p><p>④根据连续谱可以确定信号的带宽，根据离散谱可以确定随机序列是否有直流分量和定时分量。</p></li><li><p>无码间串扰的时域条件推导出频域条件(大题15)</p><p>教材P146 and 习题</p></li></ol><p><br></p><h4 id="第七章-数字带通传输系统"><a href="#第七章-数字带通传输系统" class="headerlink" title="第七章 数字带通传输系统"></a>第七章 数字带通传输系统</h4><ol><li><p>两种解调方法</p><p>非相干解调(包络检波法)、相干解调(同步检测法)</p></li><li><p>几种二进制调制系统所占带宽</p><script type="math/tex; mode=display">B_{2ASK}=2f_B=2/T_B=2R_B</script><script type="math/tex; mode=display">B_{2FSK}\approx |f_2-f_1|+2f_B</script><script type="math/tex; mode=display">B_{2PSK}=B_{2DPSK}=B_{2ASK}=2f_B</script></li><li><p>2DPSK的解调方法</p><p> 相干解调(极性比较)&amp;&amp;码反变换法、差分相干解调(相位比较法)</p></li><li><p>2FSK的分析模型图 （画图，图7-25,7-22,7-26） 每个模块的作用</p><p><a href="https://imgchr.com/i/KxKt3D" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/04/KxKt3D.md.jpg" alt="KxKt3D.md.jpg"></a></p><p><br></p><p><a href="https://imgchr.com/i/KxKs4f" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/04/KxKs4f.md.jpg" alt="KxKs4f.md.jpg"></a></p><p><br></p><p><a href="https://imgchr.com/i/KxK2vQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/04/KxK2vQ.md.jpg" alt="KxK2vQ.md.jpg"></a></p></li><li><p>性能比较 为什么</p><ul><li>误码率：2PSK&lt;2DPSK&lt;2FSK&lt;2ASK</li><li>频带宽度：2FSK系统的频带利用率最低</li><li>2ASK对信道特性变化最敏感</li></ul></li></ol><p><br></p><h4 id="第十章-信源编码"><a href="#第十章-信源编码" class="headerlink" title="第十章 信源编码"></a>第十章 信源编码</h4><ol><li><p>数字化三个步骤</p><p>抽样、量化、编码</p></li><li><p>两个抽样定理</p><p>低通抽样定理：</p><script type="math/tex; mode=display">最低抽样速率f_S\geq2f_H,最大抽样间隔T_s\leq\frac{1}{2f_H}</script><p>带通抽样定理：</p><script type="math/tex; mode=display">fs = 2B(1+\frac{k}{n})，B为信号带宽,n为f_H/B的整数部分,k为小数部分</script></li><li><p>典型电话信号带宽</p><p>频率限制300Hz-3400Hz，抽样频率8000Hz</p></li><li><p>13、15折线（习题）</p><ul><li>A=1和$\mu$=0无压缩效果</li><li>实用的典型值A=87.5，$\mu$=255</li></ul></li></ol><p><br></p><h4 id="第十一章-差错控制编码"><a href="#第十一章-差错控制编码" class="headerlink" title="第十一章 差错控制编码"></a>第十一章 差错控制编码</h4><ol><li><p>差错控制编码的作用</p><p>克服信道噪声及其他干扰引起的误码，提高传输可靠性</p></li><li><p>最小码距d0和编码检错纠错的关系</p><ul><li>要求检测e个错码：$d_0 \geq e+1$</li><li>要求纠正t个错误：$d_0 \geq 2t+1$</li><li>要求纠正t个错码，同时检测e个错误：$d_0 \geq e+t+1,e \gt t$</li></ul></li></ol><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章-绪论&quot;&gt;&lt;a href=&quot;#第一章-绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章 绪论&quot;&gt;&lt;/a&gt;第一章 绪论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;模拟信号与数字信号的区别(给定信号，要求能够区分)&lt;/p&gt;
&lt;p&gt;模拟信号：载荷消息的信号参量取值连续（不可数、无穷多），如电话机输出的语音信号，其电压瞬时值随时间连续变化。也称为连续信号，连续是指信号载荷的消息的常量连续变化，在某一取值范围内可以取无穷多个值，而不一定要在时间上连续。&lt;/p&gt;
&lt;p&gt;数字信号：载荷消息的信号参量只有有限个取值，如电报机、计算机输出的信号。
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="通信原理" scheme="http://quincy.ink/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2019杭电多校 补题日志</title>
    <link href="http://quincy.ink/2019%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1-%E8%A1%A5%E9%A2%98%E6%97%A5%E5%BF%97.html"/>
    <id>http://quincy.ink/2019杭电多校-补题日志.html</id>
    <published>2019-07-22T11:59:53.000Z</published>
    <updated>2019-08-22T08:25:07.731Z</updated>
    
    <content type="html"><![CDATA[<p>留点曾经被搞自闭的印象…<a id="more"></a></p><h4 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6586" target="_blank" rel="noopener">1009-String</a></p><p><strong>题意</strong>：在n长字符串中选出k长子序列，使子序列中每个字母的出现次数分别在一个区间内，且要求字典序最小</p><p><strong>思路</strong>：统计后缀和，记录[i..n]还有多少个某字符，记录每个字符出现的所有位置，然后每次对于要放的第i个位置，贪心的从小的字母开始选，如果选定该字符且后面的字符个数符合条件就取该字符放在第i个位置，否则下一个；如果有某一位选不了，就说明不够构造出答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pos[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">30</span>],used[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn],ans[maxn];</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">30</span>],r[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,s,&amp;k))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            pos[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lens<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                cnt[i][j]=cnt[i+<span class="number">1</span>][j]+(s[i]-<span class="string">'a'</span>==j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            pos[s[i]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            p[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> last=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            ok=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(used[j]==r[j]) <span class="keyword">continue</span>; <span class="comment">//限制最多拿该字符取的个数</span></span><br><span class="line">                <span class="keyword">while</span>(p[j]!=pos[j].size()&amp;&amp;pos[j][p[j]]&lt;=last) p[j]++; <span class="comment">//当前位置在上一次选定位置之前</span></span><br><span class="line">                <span class="keyword">if</span>(p[j]==pos[j].size()) <span class="keyword">continue</span>;</span><br><span class="line">                used[j]++;</span><br><span class="line">                <span class="keyword">int</span> now = pos[j][p[j]];</span><br><span class="line">                <span class="keyword">int</span> flag=<span class="number">1</span>,need=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt[now+<span class="number">1</span>][k]&lt;l[k]-used[k]) flag=<span class="number">0</span>; <span class="comment">//后面总字符个数不够</span></span><br><span class="line">                    need += max(<span class="number">0</span>,l[k]-used[k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(need &gt; k-i<span class="number">-1</span>) flag=<span class="number">0</span>; <span class="comment">//至少需要的字符个数位置不够</span></span><br><span class="line">                <span class="keyword">if</span>(!flag)&#123; <span class="comment">//该字符不可取</span></span><br><span class="line">                    used[j]--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ans[i]=<span class="string">'a'</span>+j;</span><br><span class="line">                    ok=<span class="literal">true</span>;</span><br><span class="line">                    last=now;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!ok) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[k]=<span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h4><p><a href="http://acm.hdu.edu.cn/contests/contest_showproblem.php?pid=1009&amp;cid=849" target="_blank" rel="noopener">1009-I Love Palindrome String</a></p><p><strong>题意</strong>：求所有长度的回文子串，其前一半也是回文子串的个数</p><p><strong>思路</strong>：PAM模板题，记录每个状态的最后一个字符的下标，然后就可以根据位置和长度hash去判断每个状态的回文串是否合法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[maxn][N] ;<span class="comment">//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span></span><br><span class="line">    <span class="keyword">int</span> fail[maxn] ;<span class="comment">//fail指针，失配后跳转到fail指针指向的节点</span></span><br><span class="line">    <span class="keyword">int</span> cnt[maxn] ; <span class="comment">//在最后统计后它可以表示形如以i为结尾的回文串中最长的那个串个数</span></span><br><span class="line">    <span class="keyword">int</span> num[maxn] ; <span class="comment">//表示以i结尾的回文串的种类数</span></span><br><span class="line">    <span class="keyword">int</span> len[maxn] ;<span class="comment">//len[i]表示节点i表示的回文串的长度</span></span><br><span class="line">    <span class="keyword">int</span> S[maxn] ;<span class="comment">//存放添加的字符</span></span><br><span class="line">    <span class="keyword">int</span> last ;<span class="comment">//指向上一个字符所在的节点，方便下一次add</span></span><br><span class="line">    <span class="keyword">int</span> n ;<span class="comment">//字符数组指针</span></span><br><span class="line">    <span class="keyword">int</span> p ;<span class="comment">//节点指针</span></span><br><span class="line">    <span class="keyword">int</span> pos[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">        cnt[p] = <span class="number">0</span> ;</span><br><span class="line">        num[p] = <span class="number">0</span> ;</span><br><span class="line">        len[p] = l ;</span><br><span class="line">        <span class="keyword">return</span> p ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">        p = <span class="number">0</span> ;</span><br><span class="line">        newnode (  <span class="number">0</span> ) ;</span><br><span class="line">        newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">        last = <span class="number">0</span> ;</span><br><span class="line">        n = <span class="number">0</span> ;</span><br><span class="line">        S[n] = <span class="number">-1</span> ;<span class="comment">//开头放一个字符集中没有的字符，减少特判</span></span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;<span class="comment">//和KMP一样，失配后找一个尽量最长的</span></span><br><span class="line">        <span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line">        <span class="keyword">return</span> x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c ,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        c -= <span class="string">'a'</span> ;</span><br><span class="line">        S[++ n] = c ;</span><br><span class="line">        <span class="keyword">int</span> cur = get_fail ( last ) ;<span class="comment">//通过上一个回文串找这个回文串的匹配位置</span></span><br><span class="line">        <span class="keyword">if</span> ( !next[cur][c] ) &#123;<span class="comment">//如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span></span><br><span class="line">            <span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;<span class="comment">//新建节点</span></span><br><span class="line">            fail[now] = next[get_fail ( fail[cur] )][c] ;<span class="comment">//和AC自动机一样建立fail指针，以便失配后跳转</span></span><br><span class="line">            next[cur][c] = now ;</span><br><span class="line">            num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">            pos[now] = id;</span><br><span class="line">        &#125;</span><br><span class="line">        last = next[cur][c] ;</span><br><span class="line">        cnt[last] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Count</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = p - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; -- i ) cnt[fail[i]] += cnt[i] ;</span><br><span class="line">        <span class="comment">//父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; ptree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line">ull base=<span class="number">233</span>;</span><br><span class="line">ull p[maxn],hs[maxn];</span><br><span class="line"><span class="function">ull <span class="title">geths</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hs[r]-p[r-l+<span class="number">1</span>]*hs[l<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) p[i]=p[i<span class="number">-1</span>]*base;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        ptree.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans[i]=<span class="number">0</span>;</span><br><span class="line">            ptree.add(s[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        ptree.Count();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hs[i]=hs[i<span class="number">-1</span>]*base+s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;ptree.p;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> len=ptree.len[i],cnt=ptree.cnt[i];</span><br><span class="line">            <span class="keyword">int</span> r=ptree.pos[i];</span><br><span class="line">            <span class="keyword">int</span> l=r-len+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//printf("%d %d %d %d\n",l,r,len,cnt);</span></span><br><span class="line">            <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(geths(l,m)==geths(m+(len%<span class="number">2</span>==<span class="number">0</span>),r))&#123;</span><br><span class="line">                ans[len]+=cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==n?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/contests/contest_showproblem.php?pid=1012&amp;cid=849" target="_blank" rel="noopener">1012-Longest Subarray</a></p><p><strong>题意</strong>：求最长的一段连续序列的长度，序列中使得每个数出现次数&gt;=k</p><p><strong>思路</strong>：枚举右端点，对于当前数字c，它的当前位置为pos[i]，那么它有两个合法区间：一个是[pos[i]+1,pos[i+1]-1],这段区间对后面的数来说是不选该数，那么该区间左端点的选择合法；另一个是[1,离当前位置前k-1个该数的位置]，左端点落入这段区间就意味该数出现次数&gt;=k。</p><p>然后就可以线段树维护每个数的合法区间，对于每个右端点，离它最远满足每个数的合法区间为最优解，对于每个合法区间，线段树区间+1，右端点移动的时候就可以动态更新合法区间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,c,k;</span><br><span class="line"><span class="keyword">int</span> a[maxn],pre[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pos[maxn];</span><br><span class="line"><span class="keyword">int</span> Max[maxn&lt;&lt;<span class="number">2</span>],add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Max[o]=max(Max[o&lt;&lt;<span class="number">1</span>],Max[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(add[o])&#123;</span><br><span class="line">        add[o&lt;&lt;<span class="number">1</span>]+=add[o];</span><br><span class="line">        add[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[o];</span><br><span class="line">        Max[o&lt;&lt;<span class="number">1</span>]+=add[o];</span><br><span class="line">        Max[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[o];</span><br><span class="line">        add[o]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Max[o]=<span class="number">0</span>;</span><br><span class="line">    add[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        Max[o]+=v;</span><br><span class="line">        add[o]+=v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(o);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=m) update(L,R,v,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m)  update(L,R,v,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    push_down(o);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Max[o&lt;&lt;<span class="number">1</span>]==c)   <span class="keyword">return</span> query(lson);</span><br><span class="line">    <span class="keyword">if</span>(Max[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]==c) <span class="keyword">return</span> query(rson);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;c,&amp;k))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line">            pos[i].clear();</span><br><span class="line">            pos[i].push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            pos[a[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line">            pre[i]=<span class="number">0</span>;</span><br><span class="line">            pos[i].push_back(n+<span class="number">1</span>);</span><br><span class="line">            update(<span class="number">1</span>,pos[i][<span class="number">1</span>]<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = a[i];</span><br><span class="line">            <span class="comment">//先减去上一次的合法区间</span></span><br><span class="line">            update(pos[x][pre[x]]+<span class="number">1</span>,pos[x][pre[x]+<span class="number">1</span>]<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(pre[x]&gt;=k) update(<span class="number">1</span>,pos[x][pre[x]-k+<span class="number">1</span>],<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            pre[x]++;</span><br><span class="line">            <span class="comment">//更新这次的合法区间</span></span><br><span class="line">            update(pos[x][pre[x]]+<span class="number">1</span>,pos[x][pre[x]+<span class="number">1</span>]<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(pre[x]&gt;=k) update(<span class="number">1</span>,pos[x][pre[x]-k+<span class="number">1</span>],<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> j = query(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(j) ans=max(ans,(i-j+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h4><p><a href="http://acm.hdu.edu.cn/contests/contest_showproblem.php?pid=1004&amp;cid=850" target="_blank" rel="noopener">1004-Distribution of books</a></p><p>咕咕咕~</p><h4 id="第四场"><a href="#第四场" class="headerlink" title="第四场"></a>第四场</h4><p><a href="http://acm.hdu.edu.cn/contests/contest_showproblem.php?pid=1003&amp;cid=851" target="_blank" rel="noopener">1003-Divide the Stones</a></p><p><strong>题意</strong>：给n个数分别是1,2,…,n，要求分为k组，每组个数相等且和相等</p><p><strong>思路</strong>：找规律</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        ll n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        ll sum=(<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum%k!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"no"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) ans[i].clear();</span><br><span class="line">        <span class="keyword">if</span>((n/k)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> now=<span class="number">1</span>,op=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n/k;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(op)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) ans[i].push_back(now++);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;=<span class="number">1</span>;i--) ans[i].push_back(now++);</span><br><span class="line">                &#125;</span><br><span class="line">                op^=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ll need = (<span class="number">1</span>+<span class="number">3</span>*k)*<span class="number">3</span>*k/<span class="number">2</span>/k;</span><br><span class="line">            <span class="keyword">int</span> now=<span class="number">1</span>,op=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) ans[i].push_back(now++);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) ans[i].push_back(now++);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) ans[i].push_back(now++);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) ans[i].push_back(need - ans[i][<span class="number">0</span>] - ans[i][<span class="number">1</span>]);</span><br><span class="line">            now+=k;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">4</span>;j&lt;=n/k;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(op)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) ans[i].push_back(now++);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;=<span class="number">1</span>;i--) ans[i].push_back(now++);</span><br><span class="line">                &#125;</span><br><span class="line">                op^=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"yes"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n/k;j++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i][j<span class="number">-1</span>],(j==n/k)?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/contests/contest_showproblem.php?pid=1008&amp;cid=851" target="_blank" rel="noopener">1008-K-th Closest Distance</a></p><p><strong>题意</strong>：强制在线查询区间离p第k近(绝对值第k小)</p><p><strong>思路</strong>：对于每个查询区间，先主席树二分区间第k小找到区间&lt;=p最大的那个数，然后双指针左右移动，哪边相差绝对值小就往哪边走，走k次即为答案，复杂度O(kmlogn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=maxn*<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> T[maxn],L[maxm],R[maxm],sum[maxm];</span><br><span class="line"><span class="keyword">int</span> sz[maxn],h[maxn];</span><br><span class="line"><span class="keyword">int</span> n,q,tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(L[rt],l,mid);</span><br><span class="line">    build(R[rt],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pre,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) update(L[rt],l,mid,L[pre],x);</span><br><span class="line">    <span class="keyword">else</span> update(R[rt],mid+<span class="number">1</span>,r,R[pre],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> e,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res=sum[L[e]]-sum[L[s]];</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= res) <span class="keyword">return</span> query(L[s],L[e],l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(R[s],R[e],mid+<span class="number">1</span>,r,k-res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ca;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ca);</span><br><span class="line">    <span class="keyword">while</span>(ca--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]);</span><br><span class="line">            h[i]=sz[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(h+<span class="number">1</span>,h+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">int</span> num=unique(h+<span class="number">1</span>,h+<span class="number">1</span>+n)-(h+<span class="number">1</span>);</span><br><span class="line">        build(T[<span class="number">0</span>],<span class="number">1</span>,num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) update(T[i],<span class="number">1</span>,num,T[i<span class="number">-1</span>],lower_bound(h+<span class="number">1</span>,h+<span class="number">1</span>+num,sz[i])-(h));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ql,qr,p,k,l,r,pre,suf,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;ql,&amp;qr,&amp;p,&amp;k);</span><br><span class="line">            ql^=ans,qr^=ans,p^=ans,k^=ans;</span><br><span class="line">            <span class="keyword">if</span>(p&lt;=h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,<span class="number">1</span>)])&#123;</span><br><span class="line">                l=<span class="number">0</span>,r=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p&gt;=h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,qr-ql+<span class="number">1</span>)])&#123;</span><br><span class="line">                l=qr-ql+<span class="number">1</span>;</span><br><span class="line">                r=qr-ql+<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                l=<span class="number">1</span>,r=qr-ql+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,mid)]&lt;=p) l=mid;</span><br><span class="line">                    <span class="keyword">else</span>                                      r=mid<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                r=l+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l!=<span class="number">0</span>)        pre=h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,l)];</span><br><span class="line">            <span class="keyword">if</span>(r!=qr-ql+<span class="number">2</span>)  suf=h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,r)];</span><br><span class="line">            <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(l==<span class="number">0</span>)&#123;</span><br><span class="line">                    r+=k;</span><br><span class="line">                    ans=<span class="built_in">abs</span>(p-h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,r)]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(r==qr-ql+<span class="number">2</span>)&#123;</span><br><span class="line">                    l-=k;</span><br><span class="line">                    ans=<span class="built_in">abs</span>(p-h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,l)]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> x=<span class="built_in">abs</span>(p-pre),y=<span class="built_in">abs</span>(p-suf);</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;=y)&#123;</span><br><span class="line">                        ans=x;</span><br><span class="line">                        l--;</span><br><span class="line">                        <span class="keyword">if</span>(l!=<span class="number">0</span>)        pre=h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,l)];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        ans=y;</span><br><span class="line">                        r++;</span><br><span class="line">                        <span class="keyword">if</span>(r!=qr-ql+<span class="number">2</span>)  suf=h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,r)];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第五场"><a href="#第五场" class="headerlink" title="第五场"></a>第五场</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6625" target="_blank" rel="noopener">1002-three arrays</a></p><p><strong>题意</strong>：给出两个n长整数序列，求两两配对异或后组成的新的序列字典序最小</p><p><strong>思路</strong>：要求字典序最小，长度肯定也是n，那么每次贪心构造出最小异或值，建两个trie树，从高位到低位每次尽量都往相同的二进制位方向移动，这样使得异或出来的值尽可能小</p><p>get：动态开点初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tot[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">2</span>][maxn][<span class="number">2</span>],val[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> op,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> to = (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!t[op][now][to])&#123;</span><br><span class="line">            t[op][now][to] = ++tot[op];</span><br><span class="line">            val[op][tot[op]] = <span class="number">0</span>;</span><br><span class="line">            t[op][tot[op]][<span class="number">0</span>] = t[op][tot[op]][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        now = t[op][now][to];</span><br><span class="line">        val[op][now]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p0=<span class="number">0</span>,p1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(val[<span class="number">0</span>][t[<span class="number">0</span>][p0][<span class="number">0</span>]] &amp;&amp; val[<span class="number">1</span>][t[<span class="number">1</span>][p1][<span class="number">0</span>]])&#123;</span><br><span class="line">            p0=t[<span class="number">0</span>][p0][<span class="number">0</span>];</span><br><span class="line">            p1=t[<span class="number">1</span>][p1][<span class="number">0</span>];</span><br><span class="line">            val[<span class="number">0</span>][p0]--;</span><br><span class="line">            val[<span class="number">1</span>][p1]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val[<span class="number">0</span>][t[<span class="number">0</span>][p0][<span class="number">1</span>]] &amp;&amp; val[<span class="number">1</span>][t[<span class="number">1</span>][p1][<span class="number">1</span>]])&#123;</span><br><span class="line">            p0=t[<span class="number">0</span>][p0][<span class="number">1</span>];</span><br><span class="line">            p1=t[<span class="number">1</span>][p1][<span class="number">1</span>];</span><br><span class="line">            val[<span class="number">0</span>][p0]--;</span><br><span class="line">            val[<span class="number">1</span>][p1]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val[<span class="number">0</span>][t[<span class="number">0</span>][p0][<span class="number">0</span>]] &amp;&amp; val[<span class="number">1</span>][t[<span class="number">1</span>][p1][<span class="number">1</span>]])&#123;</span><br><span class="line">            p0=t[<span class="number">0</span>][p0][<span class="number">0</span>];</span><br><span class="line">            p1=t[<span class="number">1</span>][p1][<span class="number">1</span>];</span><br><span class="line">            val[<span class="number">0</span>][p0]--;</span><br><span class="line">            val[<span class="number">1</span>][p1]--;</span><br><span class="line">            ans+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val[<span class="number">0</span>][t[<span class="number">0</span>][p0][<span class="number">1</span>]] &amp;&amp; val[<span class="number">1</span>][t[<span class="number">1</span>][p1][<span class="number">0</span>]])&#123;</span><br><span class="line">            p0=t[<span class="number">0</span>][p0][<span class="number">1</span>];</span><br><span class="line">            p1=t[<span class="number">1</span>][p1][<span class="number">0</span>];</span><br><span class="line">            val[<span class="number">0</span>][p0]--;</span><br><span class="line">            val[<span class="number">1</span>][p1]--;</span><br><span class="line">            ans+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        tot[<span class="number">0</span>]=tot[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        t[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = t[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        t[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = t[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            Insert(<span class="number">0</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            Insert(<span class="number">1</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ans[i]=query();</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ans,ans+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==n<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第六场"><a href="#第六场" class="headerlink" title="第六场"></a>第六场</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6635" target="_blank" rel="noopener">1002-Nonsense Time</a></p><p><strong>题意</strong>：给出一个全排列，初始全部不可用，n步操作，每次恢复排列中一个数，问每一步后的序列LIS长度</p><p><strong>思路</strong>：因为数据随机，期望LIS长度为sqrt(n)，考虑反向操作，先直接找出一个LIS，然后倒着删除某个数，如果当前数不在LIS中，那么答案不变；否则需要更新LIS。期望重找LIS的次数也就sqrt(n)次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],ans[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;p;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn],pos[maxn],seq[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">0</span>||a[i]&gt;dp[len])&#123;</span><br><span class="line">                dp[++len]=a[i];</span><br><span class="line">                pos[i]=len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                *(lower_bound(dp+<span class="number">1</span>,dp+<span class="number">1</span>+len,a[i])) = a[i];</span><br><span class="line">                pos[i] = lower_bound(dp+<span class="number">1</span>,dp+<span class="number">1</span>+len,a[i]) - dp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t=len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos[i]==t)&#123;</span><br><span class="line">                seq[t--]=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!t) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            p.push_back(seq[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans[n] = p.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = a[b[i+<span class="number">1</span>]];</span><br><span class="line">            vis[b[i+<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!binary_search(p.begin(),p.end(),x)) ans[i]=ans[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                len=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(len==<span class="number">0</span>||a[i]&gt;dp[len])&#123;</span><br><span class="line">                        dp[++len]=a[i];</span><br><span class="line">                        pos[i]=len;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        *(lower_bound(dp+<span class="number">1</span>,dp+<span class="number">1</span>+len,a[i])) = a[i];</span><br><span class="line">                        pos[i] = lower_bound(dp+<span class="number">1</span>,dp+<span class="number">1</span>+len,a[i]) - dp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> t=len;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(pos[i]==t) seq[t--]=a[i];</span><br><span class="line">                    <span class="keyword">if</span>(!t) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p.clear();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">                    p.push_back(seq[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans[i] = p.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==n?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6638" target="_blank" rel="noopener">1005-Snowy Smile</a></p><p><strong>题意</strong>：给n个点，每个点带点权，问用一个边平行于坐标轴的矩形去框，所得最大点权和为多少</p><p><strong>思路</strong>：因为点的范围较大，首先离散化，使得所有点落入范围为n*n的矩阵内，然后考虑枚举所有子矩阵，朴素枚举时间复杂度O(n^4)，考虑只枚举上下边界，然后把每一列的点权和看成一个数，再求当前上下边界的最大子段和即为一个矩阵内的最大点权和。点按y从小到大排序，就可以不断加点线段树动态维护区间子段和了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,rs</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(y!=hs.y) <span class="keyword">return</span> y&lt;hs.y;</span><br><span class="line">        <span class="keyword">return</span> x&lt;hs.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>],lsum[maxn&lt;&lt;<span class="number">2</span>],rsum[maxn&lt;&lt;<span class="number">2</span>],msum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    sum[o] = sum[ls] + sum[rs];</span><br><span class="line">    msum[o] = max(max(msum[ls],msum[rs]),rsum[ls]+lsum[rs]);</span><br><span class="line">    lsum[o] = max(lsum[ls],sum[ls]+lsum[rs]);</span><br><span class="line">    rsum[o] = max(rsum[rs],sum[rs]+rsum[ls]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    sum[o]=lsum[o]=rsum[o]=msum[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        sum[o]+=v;</span><br><span class="line">        lsum[o]=rsum[o]=msum[o]=sum[o];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid) update(p,v,lson);</span><br><span class="line">    <span class="keyword">else</span>        update(p,v,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;X,Y;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;from[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        X.clear();</span><br><span class="line">        Y.clear();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;p[i].x,&amp;p[i].y,&amp;p[i].w);</span><br><span class="line">            X.push_back(p[i].x);</span><br><span class="line">            Y.push_back(p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(X.begin(),X.end());</span><br><span class="line">        X.erase(unique(X.begin(),X.end()),X.end());</span><br><span class="line">        sort(Y.begin(),Y.end());</span><br><span class="line">        Y.erase(unique(Y.begin(),Y.end()),Y.end());</span><br><span class="line">        <span class="keyword">int</span> Mx=<span class="number">0</span>,My=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            p[i].x=lower_bound(X.begin(),X.end(),p[i].x)-X.begin()+<span class="number">1</span>;</span><br><span class="line">            p[i].y=lower_bound(Y.begin(),Y.end(),p[i].y)-Y.begin()+<span class="number">1</span>;</span><br><span class="line">            Mx=max(Mx,p[i].x);</span><br><span class="line">            My=max(My,p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(p,p+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=My;i++) from[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)   from[p[i].y].push_back(i);</span><br><span class="line"></span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> down=<span class="number">1</span>;down&lt;=My;down++)&#123;</span><br><span class="line">            build(<span class="number">1</span>,Mx,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> up=down;up&lt;=My;up++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;from[up].size();i++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> j=from[up][i];</span><br><span class="line">                    update(p[j].x,p[j].w,<span class="number">1</span>,Mx,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                ans=max(ans,msum[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第七场"><a href="#第七场" class="headerlink" title="第七场"></a>第七场</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6646" target="_blank" rel="noopener">A- A + B = C</a></p><p><strong>题意</strong>：a⋅10^x+b⋅10^y=c⋅10^z，给出a,b,c求x,y,z</p><p><strong>思路</strong>：先将a,b,c尾巴补零补到相同长度，然后分四种情况枚举，对于每一种相加结果判断是否相等用hash直接判</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">ull base=<span class="number">10</span>;</span><br><span class="line">ull p[maxn],hs[<span class="number">3</span>][maxn]; </span><br><span class="line"><span class="function">ull <span class="title">geths</span><span class="params">(ull h[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ull)((h[r]-(p[r-l+<span class="number">1</span>]*h[l<span class="number">-1</span>]%mod)+mod)%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[maxn],b[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        p[i]=(p[i<span class="number">-1</span>]*base)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>,a+<span class="number">1</span>,b+<span class="number">1</span>,c+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lena=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenb=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenc=<span class="built_in">strlen</span>(c+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mlen = max(lena+lenb,lenc);</span><br><span class="line">        mlen=min(mlen,<span class="number">1000000</span>);</span><br><span class="line">        hs[<span class="number">0</span>][<span class="number">1</span>]=hs[<span class="number">1</span>][<span class="number">1</span>]=hs[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)       hs[<span class="number">0</span>][i]=(hs[<span class="number">0</span>][i<span class="number">-1</span>]*base%mod+a[i]-<span class="string">'0'</span>)%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lena+<span class="number">1</span>;i&lt;=mlen;i++) hs[<span class="number">0</span>][i]=(hs[<span class="number">0</span>][i<span class="number">-1</span>]*base%mod)%mod;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenb;i++)       hs[<span class="number">1</span>][i]=(hs[<span class="number">1</span>][i<span class="number">-1</span>]*base%mod+b[i]-<span class="string">'0'</span>)%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lenb+<span class="number">1</span>;i&lt;=mlen;i++) hs[<span class="number">1</span>][i]=(hs[<span class="number">1</span>][i<span class="number">-1</span>]*base%mod)%mod;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenc;i++)       hs[<span class="number">2</span>][i]=(hs[<span class="number">2</span>][i<span class="number">-1</span>]*base%mod+c[i]-<span class="string">'0'</span>)%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lenc+<span class="number">1</span>;i&lt;=mlen;i++) hs[<span class="number">2</span>][i]=(hs[<span class="number">2</span>][i<span class="number">-1</span>]*base%mod)%mod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ull ans = geths(hs[<span class="number">2</span>],<span class="number">1</span>,mlen);</span><br><span class="line">        ull aa = geths(hs[<span class="number">0</span>],<span class="number">1</span>,mlen),bb,cc;</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> x,y,z=mlen-lenc+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lenb;i&lt;=mlen;i++)&#123;</span><br><span class="line">            bb = geths(hs[<span class="number">1</span>],<span class="number">1</span>,i);</span><br><span class="line">            <span class="keyword">if</span>((aa+bb)%mod==ans)&#123;</span><br><span class="line">                ok=<span class="literal">true</span>;</span><br><span class="line">                x=mlen-lena+<span class="number">1</span>;</span><br><span class="line">                y=i-lenb+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!ok)&#123;</span><br><span class="line">            bb = geths(hs[<span class="number">1</span>],<span class="number">1</span>,mlen);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=lena;i&lt;=mlen;i++)&#123;</span><br><span class="line">                aa = geths(hs[<span class="number">0</span>],<span class="number">1</span>,i);</span><br><span class="line">                <span class="keyword">if</span>((aa+bb)%mod==ans)&#123;</span><br><span class="line">                    ok=<span class="literal">true</span>;</span><br><span class="line">                    x=i-lena+<span class="number">1</span>;</span><br><span class="line">                    y=mlen-lenb+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok)&#123;</span><br><span class="line">            aa = geths(hs[<span class="number">0</span>],<span class="number">1</span>,mlen<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=lenb;i&lt;=mlen<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                bb = geths(hs[<span class="number">1</span>],<span class="number">1</span>,i);</span><br><span class="line">                <span class="keyword">if</span>((aa+bb)%mod==ans)&#123;</span><br><span class="line">                    ok=<span class="literal">true</span>;</span><br><span class="line">                    x=mlen-lena;</span><br><span class="line">                    y=i-lenb+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok)&#123;</span><br><span class="line">            bb = geths(hs[<span class="number">1</span>],<span class="number">1</span>,mlen<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=lena;i&lt;=mlen<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                aa = geths(hs[<span class="number">0</span>],<span class="number">1</span>,i);</span><br><span class="line">                <span class="keyword">if</span>((aa+bb)%mod==ans)&#123;</span><br><span class="line">                    ok=<span class="literal">true</span>;</span><br><span class="line">                    x=i-lena+<span class="number">1</span>;</span><br><span class="line">                    y=mlen-lenb;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6651" target="_blank" rel="noopener">F-Final Exam</a></p><p><strong>题意</strong>：有n个题，总分m分，每做出一道题需要这道题的分数+1的时间，问做出k题需要至少多少的时间准备</p><p><strong>思路</strong>：因为事先不知道每道题的分数分布，那就要按最坏情况看待；田忌赛马的博弈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        ll n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(m/(n-k+<span class="number">1</span>) +<span class="number">1</span>)*(k<span class="number">-1</span>)+(m+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6655" target="_blank" rel="noopener">J-Just Repeat</a></p><p><strong>题意</strong>：两个人打牌，每个人有一些种类的牌，如果一个人出了一张对面也有的牌类，那对面这种牌类的牌就不能打出来，最后谁无法出牌谁就输了，问谁最后会赢</p><p><strong>思路</strong>：统计两个人都有的牌类的张数，既然要对面输，就都会先把出现次数最多的牌类打出来，这样使得我手中的牌可以打出的更多或者对面手里牌打出的更少了，最后看不是相同剩余的牌谁能出的多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">gp_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hsa, hsb;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k1, k2;</span><br><span class="line"><span class="keyword">int</span> mod;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rng</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k3 = k1, k4 = k2;</span><br><span class="line">    k1 = k4;</span><br><span class="line">    k3 ^= k3 &lt;&lt; <span class="number">23</span>;</span><br><span class="line">    k2 = k3 ^ k4 ^ (k3 &gt;&gt; <span class="number">17</span>) ^ (k4 &gt;&gt; <span class="number">26</span>);</span><br><span class="line">    <span class="keyword">return</span> k2 + k4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a,<span class="keyword">int</span> b):a(a),b(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;hs.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, p;</span><br><span class="line"><span class="keyword">int</span> b[maxn], a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        hsa.clear();</span><br><span class="line">        hsb.clear();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%llu %llu %d"</span>, &amp;k1, &amp;k2, &amp;mod);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                a[i] = rng() % mod;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%llu %llu %d"</span>, &amp;k1, &amp;k2, &amp;mod);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">                b[i] = rng() % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ansa = n, ansb = m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            hsa[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            hsb[b[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">int</span> cnta=unique(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        priority_queue&lt;node&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnta;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hsa[a[i]] &amp;&amp; hsb[a[i]])</span><br><span class="line">                pq.push(node(hsa[a[i]]+hsb[a[i]],a[i])), ansa-=hsa[a[i]], ansb-=hsb[a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pq.size())&#123;</span><br><span class="line">            node pp = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">if</span>(!t)&#123;</span><br><span class="line">                ansa += hsa[pp.b] - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ansb += hsb[pp.b] - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            t ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t) ansb--;</span><br><span class="line">        <span class="keyword">if</span>(ansa &gt; ansb) <span class="built_in">puts</span>(<span class="string">"Cuber QQ"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Quber CC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第八场"><a href="#第八场" class="headerlink" title="第八场"></a>第八场</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6660" target="_blank" rel="noopener">D-Acesrc and Hunting</a></p><p><strong>题意</strong>：给一个n*m的矩阵，问能否构造出一条任意起点的路径，使得不经过重复点且任意两步之间欧几里得距离大于1且小于3</p><p><strong>思路</strong>：划几个图就能找出一条一定能走出来的路线，但是要注意一些特判</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">3</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> j=m&amp;<span class="number">1</span>?m:m<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j-=<span class="number">2</span>) pr(i,j);</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;j+=<span class="number">2</span>)         pr(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    pr(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;j+=<span class="number">2</span>)          pr(<span class="number">2</span>,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m&amp;<span class="number">1</span>?m:m<span class="number">-1</span>;j&gt;=<span class="number">2</span>;j-=<span class="number">2</span>)  pr(<span class="number">1</span>,j);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) pr((j&amp;<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> j=m&amp;<span class="number">1</span>?m<span class="number">-1</span>:m;j&gt;=<span class="number">2</span>;j-=<span class="number">2</span>) pr(i,j);</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j+=<span class="number">2</span>)         pr(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            pr(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||m==<span class="number">1</span>||(n==<span class="number">2</span>&amp;&amp;m==<span class="number">2</span>))&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pr(i,(i&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) pr(i,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>) pr(i,<span class="number">1</span>);</span><br><span class="line">                pr(n,<span class="number">2</span>);    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pr(i,(i&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) pr(i,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) pr(i,<span class="number">2</span>);</span><br><span class="line">                pr(n,<span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6665" target="_blank" rel="noopener">J-Calabash and Landlord</a></p><p><strong>题意</strong>：给出两个坐标范围很大矩形，问无穷大平面有多少块区域是属于不同的联通块</p><p><strong>思路</strong>：一是直接枚举所有情况，当然两矩形的情况不多，用相交之后共有的小矩形看有多少共边比较好写；</p><p>二是直接离散化这几个点，把区域缩成很小的一块然后爆搜</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">&#125;r[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(rec A,rec B,<span class="keyword">int</span> op)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.a==B.a) v[op].push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(A.b==B.b) v[op].push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(A.c==B.c) v[op].push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(A.d==B.d) v[op].push_back(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;r[i].a,&amp;r[i].c,&amp;r[i].b,&amp;r[i].d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x1=r[<span class="number">1</span>].a,x2=r[<span class="number">1</span>].b,y1=r[<span class="number">1</span>].c,y2=r[<span class="number">1</span>].d;</span><br><span class="line">        <span class="keyword">int</span> x3=r[<span class="number">2</span>].a,x4=r[<span class="number">2</span>].b,y3=r[<span class="number">2</span>].c,y4=r[<span class="number">2</span>].d;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">        a=max(min(x1,x2),min(x3,x4));</span><br><span class="line">        b=min(max(x1,x2),max(x3,x4));</span><br><span class="line">        c=max(min(y1,y2),min(y3,y4));</span><br><span class="line">        d=min(max(y1,y2),max(y3,y4));</span><br><span class="line">        r[<span class="number">0</span>].a = a;r[<span class="number">0</span>].b = b;r[<span class="number">0</span>].c = c;r[<span class="number">0</span>].d = d;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=b||c&gt;=d) ans=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            v[<span class="number">0</span>].clear();</span><br><span class="line">            v[<span class="number">1</span>].clear();</span><br><span class="line">            calc(r[<span class="number">0</span>],r[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">            calc(r[<span class="number">0</span>],r[<span class="number">2</span>],<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">int</span> sum0=<span class="number">0</span>,sum1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)v[<span class="number">0</span>].size();i++)&#123;</span><br><span class="line">                num[<span class="number">0</span>][v[<span class="number">0</span>][i]]++;</span><br><span class="line">                sum0+=v[<span class="number">0</span>][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)v[<span class="number">1</span>].size();i++)&#123;</span><br><span class="line">                num[<span class="number">1</span>][v[<span class="number">1</span>][i]]++;</span><br><span class="line">                sum1+=v[<span class="number">1</span>][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> t1=<span class="number">0</span>,t0=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num[<span class="number">0</span>][i]) t0++;</span><br><span class="line">                <span class="keyword">if</span>(num[<span class="number">1</span>][i]) t1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//printf("~~~~~~~~~~ %d %d\n",t0,t1);</span></span><br><span class="line">            <span class="keyword">if</span>(t0==t1 &amp;&amp; t0==<span class="number">4</span>) ans=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t0==<span class="number">4</span> || t1==<span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t1==<span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(sum1&amp;<span class="number">1</span>) ans = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">else</span> ans = <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t0 == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(sum0&amp;<span class="number">1</span>) ans = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">else</span> ans = <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> ans = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t0==<span class="number">3</span> &amp;&amp; t1==<span class="number">3</span>) ans=<span class="number">4</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t0==<span class="number">3</span> || t1==<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t0 == <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(t1 == <span class="number">1</span>) ans =<span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(sum1&amp;<span class="number">1</span>) ans=<span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">else</span> ans = <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(t0 == <span class="number">1</span>) ans =<span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(sum0&amp;<span class="number">1</span>) ans=<span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">else</span> ans = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum0&amp;<span class="number">1</span>) ans=<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">else</span>  ans=<span class="number">6</span>;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路二</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cerr&lt;&lt;#x<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;<span class="meta-string">'\n'</span>; </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> mat[maxn][maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;X,Y;</span><br><span class="line"><span class="keyword">int</span> go[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x][y]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx=x+go[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ny=y+go[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(nx&gt;=<span class="number">1</span> &amp;&amp; nx&lt;=<span class="number">10</span> &amp;&amp;ny&gt;=<span class="number">1</span> &amp;&amp;ny&lt;=<span class="number">10</span> &amp;&amp; !vis[nx][ny] &amp;&amp;mat[nx][ny]==mat[x][y])&#123;</span><br><span class="line">            dfs(nx,ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;p[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        X.clear();</span><br><span class="line">        Y.clear();</span><br><span class="line">        <span class="built_in">memset</span>(mat,<span class="number">0</span>,<span class="keyword">sizeof</span>(mat));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">            X.push_back(p[i].x);</span><br><span class="line">            Y.push_back(p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(X.begin(),X.end());</span><br><span class="line">        X.erase(unique(X.begin(),X.end()),X.end());</span><br><span class="line">        sort(Y.begin(),Y.end());</span><br><span class="line">        Y.erase(unique(Y.begin(),Y.end()),Y.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            p[i].x = lower_bound(X.begin(),X.end(),p[i].x)-X.begin()+<span class="number">1</span>;</span><br><span class="line">            p[i].y = lower_bound(Y.begin(),Y.end(),p[i].y)-Y.begin()+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//printf("%d %d %d\n",i,p[i].x,p[i].y);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=p[i].x;x&lt;p[i+<span class="number">1</span>].x;x++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> y=p[i].y;y&lt;p[i+<span class="number">1</span>].y;y++)&#123;</span><br><span class="line">                    mat[x][y] += flag;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j] || !mat[i][j])<span class="keyword">continue</span>;</span><br><span class="line">                dfs(i,j);</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第九场"><a href="#第九场" class="headerlink" title="第九场"></a>第九场</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6681" target="_blank" rel="noopener">B-Rikka with Cake</a></p><p><strong>题意</strong>：求平面线段交点个数</p><p><strong>思路</strong>：线段按y排序后枚举每条线段更新线段树or树状数组，单点更新and区间查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxn = 1e6+5;</span><br><span class="line">struct seg&#123;</span><br><span class="line">    int x1,x2,y;</span><br><span class="line">    int v;</span><br><span class="line">    seg()&#123;&#125;</span><br><span class="line">    seg(int x1,int x2,int y,int v):x1(x1),x2(x2),y(y),v(v)&#123;&#125;</span><br><span class="line">    bool operator &lt; (const seg&amp;hs)const&#123;</span><br><span class="line">        if(y==hs.y) return v&gt;hs.v;</span><br><span class="line">        return y&lt;hs.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"></span><br><span class="line">int d[maxn];</span><br><span class="line">int lowbit(int x)&#123;</span><br><span class="line">    return x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line">void add(int x,int v,int n)&#123;</span><br><span class="line">    while(x&lt;=n)&#123;</span><br><span class="line">        d[x]+=v;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum(int x)&#123;</span><br><span class="line">    int ret=0;</span><br><span class="line">    while(x&gt;0)&#123;</span><br><span class="line">        ret+=d[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;X,Y;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int T;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    while(T--)&#123;</span><br><span class="line">        X.clear();</span><br><span class="line">        Y.clear();</span><br><span class="line">        int n,m,k;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        int x1,y1,x2,y2; char op[5];</span><br><span class="line">        int cnt=0;</span><br><span class="line">        for(int i=1;i&lt;=k;i++)&#123;</span><br><span class="line">            scanf(&quot;%d%d%s&quot;,&amp;x1,&amp;y1,op);</span><br><span class="line">            if(op[0]==&apos;L&apos;) x2=1,y2=y1;</span><br><span class="line">            if(op[0]==&apos;R&apos;) x2=n,y2=y1;</span><br><span class="line">            if(op[0]==&apos;U&apos;) x2=x1,y2=m;</span><br><span class="line">            if(op[0]==&apos;D&apos;) x2=x1,y2=1;</span><br><span class="line">            X.push_back(x1);X.push_back(x2);</span><br><span class="line">            Y.push_back(y1);Y.push_back(y2);</span><br><span class="line">            if(x1==x2)&#123;</span><br><span class="line">                if(y1&gt;y2) swap(y1,y2);</span><br><span class="line">                e[cnt++]=seg(x1,x1,y1,1);</span><br><span class="line">                e[cnt++]=seg(x1,x1,y2,-1);</span><br><span class="line">            &#125;</span><br><span class="line">            if(y1==y2)&#123;</span><br><span class="line">                if(x1&gt;x2) swap(x1,x2);</span><br><span class="line">                e[cnt++]=seg(x1,x2,y1,0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(X.begin(),X.end());</span><br><span class="line">        X.erase(unique(X.begin(),X.end()),X.end());</span><br><span class="line">        sort(Y.begin(),Y.end());</span><br><span class="line">        Y.erase(unique(Y.begin(),Y.end()),Y.end());</span><br><span class="line">        for(int i=0;i&lt;cnt;i++)&#123;</span><br><span class="line">            e[i].x1 = lower_bound(X.begin(),X.end(),e[i].x1) - X.begin()+1;</span><br><span class="line">            e[i].x2 = lower_bound(X.begin(),X.end(),e[i].x2) - X.begin()+1;</span><br><span class="line">            e[i].y = lower_bound(Y.begin(),Y.end(),e[i].y) - Y.begin()+1;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(e,e+cnt);</span><br><span class="line">        // for(int i=0;i&lt;cnt;i++)&#123;</span><br><span class="line">        //     printf(&quot;%d %d  %d  %d\n&quot;,e[i].x1,e[i].x2,e[i].y,e[i].v);</span><br><span class="line">        // &#125;</span><br><span class="line"></span><br><span class="line">        int nx = X.size();</span><br><span class="line">        for(int i=1;i&lt;=nx+5;i++) d[i]=0;</span><br><span class="line"></span><br><span class="line">        ll ans=0;</span><br><span class="line">        for(int i=0;i&lt;cnt;i++)&#123;</span><br><span class="line">            //printf(&quot;%d %d %d\n&quot;,e[i].x1,e[i].x2,e[i].v);</span><br><span class="line">            if(e[i].v == 0)&#123;</span><br><span class="line">                ans += sum(e[i].x2)-sum(e[i].x1-1);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                add(e[i].x1,e[i].v,nx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%lld\n&quot;,ans+1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;留点曾经被搞自闭的印象…
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="贪心" scheme="http://quincy.ink/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="PAM" scheme="http://quincy.ink/tags/PAM/"/>
    
      <category term="线段树" scheme="http://quincy.ink/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="主席树" scheme="http://quincy.ink/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="二分" scheme="http://quincy.ink/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="找规律" scheme="http://quincy.ink/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
      <category term="trie" scheme="http://quincy.ink/tags/trie/"/>
    
      <category term="LIS" scheme="http://quincy.ink/tags/LIS/"/>
    
      <category term="最大子段和" scheme="http://quincy.ink/tags/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    
      <category term="hash" scheme="http://quincy.ink/tags/hash/"/>
    
      <category term="博弈" scheme="http://quincy.ink/tags/%E5%8D%9A%E5%BC%88/"/>
    
      <category term="构造" scheme="http://quincy.ink/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="扫描线" scheme="http://quincy.ink/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客暑期多校训练营 补题日志</title>
    <link href="http://quincy.ink/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E8%A1%A5%E9%A2%98%E6%97%A5%E5%BF%97.html"/>
    <id>http://quincy.ink/2019牛客暑期多校训练营-补题日志.html</id>
    <published>2019-07-20T14:16:25.000Z</published>
    <updated>2020-05-02T01:29:44.370Z</updated>
    
    <content type="html"><![CDATA[<p>留点曾经被搞自闭的印象…<a id="more"></a></p><h4 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h4><p><a href="https://ac.nowcoder.com/acm/contest/881/A" target="_blank" rel="noopener">A-Equivalent Prefixes</a></p><p><strong>题意</strong>：给定两个n长整数序列，每个序列不会出现重复元素，问最长的p使得[1,p]区间内的任意子区间都满足[l,r]中的最小值的位置相同</p><p><strong>思路</strong>：二分答案，对于每个长度递归验证合法性，查询区间最值线段树或ST表维护，总时间复杂度O(nlognlogn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> posa[maxn],posb[maxn];</span><br><span class="line"><span class="keyword">int</span> Mina[maxn&lt;&lt;<span class="number">2</span>],Minb[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Mina[o]=min(Mina[o&lt;&lt;<span class="number">1</span>],Mina[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    Minb[o]=min(Minb[o&lt;&lt;<span class="number">1</span>],Minb[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Mina[o]=a[l];</span><br><span class="line">        Minb[o]=b[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> Mina[o];</span><br><span class="line">        <span class="keyword">else</span>     <span class="keyword">return</span> Minb[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=INF;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=min(ret,query(k,L,R,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=min(ret,query(k,L,R,rson));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> mina = query(<span class="number">1</span>,l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> minb = query(<span class="number">2</span>,l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(posa[mina]!=posb[minb]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = posa[mina];</span><br><span class="line">    <span class="keyword">return</span> pd(l,mid<span class="number">-1</span>)&amp;&amp;pd(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            posa[a[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">            posb[b[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pd(<span class="number">1</span>,mid)) l=mid;</span><br><span class="line">            <span class="keyword">else</span>          r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/881/E" target="_blank" rel="noopener">E-ABBA</a></p><p><strong>题意</strong>：有n个”AB”和m个”BA”是由2(n+m)长的字符串中取出的子序列得到，问原字符串有多少种构造可能</p><p><strong>思路</strong>：dp[i][j]表示当前前缀有i个’A’和j个’B’的合法情况种数，根据合法性再进行转移，dp[n+m][n+m]即为答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)&#123;</span><br><span class="line">                f[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//f[i][j] 表示当前前缀有i个'A'和j个'B'的合法序列种类数</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n+m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n+m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n || i-n+<span class="number">1</span>&lt;=j) &#123;<span class="comment">//AB的A少了或者BA的A少了</span></span><br><span class="line">                    f[i+<span class="number">1</span>][j]=(f[i][j]+f[i+<span class="number">1</span>][j])%P;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=m || j-m+<span class="number">1</span>&lt;=i) &#123;<span class="comment">//BA的B少了或者AB的B少了</span></span><br><span class="line">                    f[i][j+<span class="number">1</span>]=(f[i][j]+f[i][j+<span class="number">1</span>])%P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[n+m][n+m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h4><p><a href="https://ac.nowcoder.com/acm/contest/882/D" target="_blank" rel="noopener">D-Kth Minimum Clique</a></p><p><strong>题意</strong>：RT,求一张图的第K小团</p><p><strong>思路</strong>：N最大100，每个团内要求每个点与其他点都有边相连，那么可以对起始每个点作为一个最小独立团进行bfs加点扩大，当新的点满足与当前团内所有点都有边的时候加入该团，bitset标记团内选点和边，K最大1e6，按团的权值出队列最多跑K次，第K次出队列的即为第K小的团，然后每个团记录团内最大结点的id，避免跑出重复的团</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;maxn&gt;sta;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> i,ll w,<span class="built_in">bitset</span>&lt;maxn&gt;s):id(i),w(w),sta(s)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w&gt;hs.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll w[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt;e[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function">ll <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;maxn&gt;sta;</span><br><span class="line">    priority_queue&lt;node&gt; pq;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sta[i]=<span class="number">1</span>;</span><br><span class="line">        pq.push(node(i,w[i],sta));</span><br><span class="line">        sta[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node now;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">        now = pq.top();</span><br><span class="line">        pq.pop();</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> now.w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=now.id+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((e[i]&amp;now.sta)==now.sta)&#123;</span><br><span class="line">                now.sta[i]=<span class="number">1</span>;</span><br><span class="line">                pq.push(node(i,now.w+w[i],now.sta));</span><br><span class="line">                now.sta[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            e[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,bfs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/882/F" target="_blank" rel="noopener">F-Partition problem</a></p><p><strong>题意</strong>：2N个人需要分成两个N人的队，任意两个来自不同队的人配对有个value，求所有队员分别配对后的最大value和</p><p><strong>思路</strong>：起始将2N个人都放在一队，2^2N枚举哪些人被分到了二队，如果第i个人被调到二队，算代价只需O(n)计算第i个人对整体value和的变化，注意剪枝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>];</span><br><span class="line">ll ans,v[maxn][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> cnt,ll sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">        ans=max(ans,sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i-cnt&gt;n) <span class="keyword">return</span>; <span class="comment">//剪枝 前面有i-cnt&gt;n个人在一队肯定不行</span></span><br><span class="line"><span class="comment">//不动</span></span><br><span class="line">    dfs(i+<span class="number">1</span>,cnt,sum);</span><br><span class="line">    <span class="comment">//移到另一队</span></span><br><span class="line">    ll tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[j]) tmp+=v[i][j];</span><br><span class="line">        <span class="keyword">else</span>        tmp-=v[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    vis[i]=<span class="number">1</span>;</span><br><span class="line">    dfs(i+<span class="number">1</span>,cnt+<span class="number">1</span>,sum+tmp);</span><br><span class="line">    vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n;j++)&#123;</span><br><span class="line">            v[i][j]=read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/882/H" target="_blank" rel="noopener">H-Second Large Rectangle</a></p><p><strong>题意</strong>：给出一个n*m的只包含01的矩阵，求第二大的只含1的子矩阵大小</p><p><strong>思路</strong>：对于求第一大，单调栈维护以当前行为底和包含每一列矩阵的左边界和右边界，就可以求出所有可能的最大矩形；对于求第二大，因为有可能是第一大缩小单位宽或者单位高，也可能是和第一大面积相等但位置不同，所以把全部可能情况排序去重查找即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> h,w,x,y,s;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> rec&amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s&lt;hs.s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> rec&amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h==hs.h&amp;&amp;w==hs.w&amp;&amp;x==hs.x&amp;&amp;y==hs.y&amp;&amp;s==hs.s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn*maxn*<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn],L[maxn],R[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mp[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j]==<span class="string">'1'</span>) h[j]++;</span><br><span class="line">            <span class="keyword">else</span>              h[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            L[j]=j;</span><br><span class="line">            <span class="keyword">while</span>(L[j]&gt;<span class="number">1</span>&amp;&amp;h[j]&lt;=h[L[j]<span class="number">-1</span>]) L[j]=L[L[j]<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m; j&gt;=<span class="number">1</span>; j--) &#123;</span><br><span class="line">            R[j]=j;</span><br><span class="line">            <span class="keyword">while</span>(R[j]&lt;m&amp;&amp;h[j]&lt;=h[R[j]+<span class="number">1</span>]) R[j]=R[R[j]+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> hh=h[j],ww=R[j]-L[j]+<span class="number">1</span>,x=i,y=L[j],s=hh*ww;</span><br><span class="line">            a[cnt++]=rec&#123;hh,ww,x,y,s&#125;;</span><br><span class="line">            a[cnt++]=rec&#123;hh<span class="number">-1</span>,ww,x,y,s-ww&#125;;</span><br><span class="line">            a[cnt++]=rec&#123;hh,ww<span class="number">-1</span>,x,y,s-hh&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(a[i]==a[i<span class="number">-1</span>]))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i<span class="number">-1</span>].s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h4><p><a href="https://ac.nowcoder.com/acm/contest/883/F" target="_blank" rel="noopener">F-Planting Trees</a></p><p><strong>题意</strong>：求一个最大矩阵面积，使得其中最大值-最小值&lt;=M</p><p><strong>思路</strong>：看那些猛男都是剪枝+二维ST表也可以过的，我就不行了，n^4优化不来</p><p>正解是枚举小矩阵的上下边界，再枚举右边界的时候用两个单调队列维护影响当前列的最值，就可以O(n)求出每列的最大左边界</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> mi[maxn],mx[maxn];<span class="comment">//在up down上下边界中每一列的最值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,M;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;M);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> up=<span class="number">1</span>;up&lt;=n;up++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) mi[j]=INF,mx[j]=-INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> down=up;down&lt;=n;down++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                    mi[j]=min(mi[j],a[down][j]);</span><br><span class="line">                    mx[j]=max(mx[j],a[down][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q1,q2;<span class="comment">//单调递减和单调递增队列维护前面列影响第r列的最值</span></span><br><span class="line">                <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">1</span>;r&lt;=n;r++)&#123;</span><br><span class="line">                    <span class="keyword">while</span>(!q1.empty()&amp;&amp;mx[r]&gt;mx[q1.back()]) q1.pop_back();</span><br><span class="line">                    q1.push_back(r);</span><br><span class="line">                    <span class="keyword">while</span>(!q2.empty()&amp;&amp;mi[r]&lt;mi[q2.back()]) q2.pop_back();</span><br><span class="line">                    q2.push_back(r);</span><br><span class="line">                    <span class="keyword">while</span>(!q1.empty()&amp;&amp;!q2.empty()&amp;&amp;mx[q1.front()]-mi[q2.front()]&gt;M)&#123;</span><br><span class="line">                        l++;</span><br><span class="line">                        <span class="keyword">if</span>(q1.front()&lt;=l) q1.pop_front();</span><br><span class="line">                        <span class="keyword">if</span>(q2.front()&lt;=l) q2.pop_front();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans=max(ans,(down-up+<span class="number">1</span>)*(r-l));</span><br><span class="line">                    <span class="keyword">if</span>(ans&gt;(down-up+<span class="number">1</span>)*(n-l)) <span class="keyword">break</span>; <span class="comment">//剪枝</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/883/J" target="_blank" rel="noopener">J-LRU management</a></p><p><strong>题意</strong>：模拟LRU调度算法</p><p><strong>思路</strong>：STL瞎搞，pbds大法好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;//用hash</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    node() &#123;&#125;;</span><br><span class="line">    node(<span class="built_in">string</span> s,<span class="keyword">int</span> v): s(s), v(v) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> q,m,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">list</span>&lt;node&gt; L;</span><br><span class="line">        gp_hash_table&lt;<span class="built_in">string</span>,<span class="built_in">list</span>&lt;node&gt;::iterator&gt; mp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;q&gt;&gt;m;</span><br><span class="line">        <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> op,v;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;s&gt;&gt;v;</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp.find(s)!=mp.end()) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> it = mp[s];</span><br><span class="line">                    v = it-&gt;v;</span><br><span class="line">                    L.erase(it);</span><br><span class="line">                &#125;</span><br><span class="line">                L.push_back(node(s,v));</span><br><span class="line">                mp[s]=prev(L.end());</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;v&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">if</span>(L.size()&gt;m) &#123;</span><br><span class="line">                    mp.erase(L.begin()-&gt;s);</span><br><span class="line">                    L.erase(L.begin());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp.find(s)==mp.end()) &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Invalid"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pos=mp[s];</span><br><span class="line">                    <span class="keyword">if</span>((pos==L.begin()&amp;&amp;v==<span class="number">-1</span>)||(pos==prev(L.end())&amp;&amp;v==<span class="number">1</span>)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Invalid"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(v==<span class="number">1</span>)  pos=next(pos);</span><br><span class="line">                        <span class="keyword">if</span>(v==<span class="number">-1</span>) pos=prev(pos);</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;pos-&gt;v&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四场"><a href="#第四场" class="headerlink" title="第四场"></a>第四场</h4><p><a href="https://ac.nowcoder.com/acm/contest/884/C" target="_blank" rel="noopener">C-sequence</a></p><p><strong>题意</strong>：相当于求一段区间的最小值*区间和最大值</p><p><strong>思路</strong>：对于每个a[i]，它作为最小值的区间可用单调栈O(n)处理出左边界L[i]和右边界R[i]，算答案就有两种情况：</p><p>一是a[i]&gt;=0，那么a[i]作为最小值的区间都是非负数，区间和最大即是整个区间和；</p><p>二是a[i]&lt;0，那么区间和就要尽可能小，用[i,R[i]]的最小前缀和减去[L[i],i]的最大前缀和可以使得包含a[i]的区间和最小，答案最优，线段树维护前缀和区间最值即可，3e6的数据范围ST表显然空间不够，题解怎么做到的？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> L[maxn],R[maxn];</span><br><span class="line">ll sum[maxn],Max[maxn&lt;&lt;<span class="number">2</span>],Min[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Max[o]=max(Max[ls],Max[rs]);</span><br><span class="line">    Min[o]=min(Min[ls],Min[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Max[o]=Min[o]=sum[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">querymax</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l=<span class="number">1</span>,<span class="keyword">int</span> r=n,<span class="keyword">int</span> o=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Max[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ret = -INF;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=max(ret,querymax(L,R,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=max(ret,querymax(L,R,rson));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">querymin</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l=<span class="number">1</span>,<span class="keyword">int</span> r=n,<span class="keyword">int</span> o=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Min[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ret = INF;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=min(ret,querymin(L,R,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=min(ret,querymin(L,R,rson));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    a[<span class="number">0</span>]=a[n+<span class="number">1</span>]=-INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()&amp;&amp;a[i]&lt;a[q.back()])&#123;</span><br><span class="line">            R[q.back()]=i<span class="number">-1</span>;</span><br><span class="line">            q.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    q.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()&amp;&amp;a[i]&lt;a[q.back()])&#123;</span><br><span class="line">            L[q.back()]=i+<span class="number">1</span>;</span><br><span class="line">            q.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            ans=max(ans,a[i]*(sum[R[i]]-sum[L[i]<span class="number">-1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans=max(ans,a[i]*(querymin(i,R[i])-querymax(L[i],i)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/884/I" target="_blank" rel="noopener">I-string</a></p><p><strong>题意</strong>：给出一个字符串，求其最大子串集合大小，子串集合中满足无重复串和翻转相同串</p><p><strong>思路</strong>：把原串反过来拼接到原串后面，中间用特殊符号隔开，统计这时所有的子串数-含有特殊字符的字符串数，理论上原串的子串数都会增加一倍，但因为有回文串和翻转相同串的存在会使得新增子串并没有那么多，此时加上原串不同本质回文子串数就使得原串中每个子串又有一个翻转串对应，/2即为答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">27</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tot, last, ch[maxn &lt;&lt; <span class="number">1</span>][N], fa[maxn &lt;&lt; <span class="number">1</span>], len[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Tr</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;<span class="keyword">return</span> c - <span class="string">'a'</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="keyword">return</span> len[c] - len[fa[c]];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        last = tot = <span class="number">1</span>;</span><br><span class="line">        len[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>( ch[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = last, np = last = ++tot;</span><br><span class="line">        len[np] = len[p] + <span class="number">1</span>, cnt[last] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>( ch[np], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[np]);</span><br><span class="line">        <span class="keyword">while</span>( p &amp;&amp; !ch[p][x]) ch[p][x] = np, p = fa[p];</span><br><span class="line">        <span class="keyword">if</span>( p == <span class="number">0</span>) fa[np] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[p][x];</span><br><span class="line">            <span class="keyword">if</span>( len[q] == len[p] + <span class="number">1</span>)</span><br><span class="line">                fa[np] = q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nq = ++tot;</span><br><span class="line">                <span class="built_in">memcpy</span>( ch[nq], ch[q], <span class="keyword">sizeof</span> ch[q]);</span><br><span class="line">                len[nq] = len[p] + <span class="number">1</span>, fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line">                <span class="keyword">while</span>( p &amp;&amp; ch[p][x] == q)  ch[p][x] = nq, p = fa[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; i++) add(Tr(s[i]));</span><br><span class="line">        add(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = lens; i &gt;= <span class="number">1</span>; i--) add(Tr(s[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">getsubnum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += val(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sam;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[maxn][N] ;</span><br><span class="line">    <span class="keyword">int</span> fail[maxn] ;</span><br><span class="line">    <span class="keyword">int</span> cnt[maxn] ; </span><br><span class="line">    <span class="keyword">int</span> num[maxn] ; </span><br><span class="line">    <span class="keyword">int</span> len[maxn] ;</span><br><span class="line">    <span class="keyword">int</span> S[maxn] ;</span><br><span class="line">    <span class="keyword">int</span> last ;</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">int</span> p ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">        cnt[p] = <span class="number">0</span> ;</span><br><span class="line">        num[p] = <span class="number">0</span> ;</span><br><span class="line">        len[p] = l ;</span><br><span class="line">        <span class="keyword">return</span> p ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p = <span class="number">0</span> ;</span><br><span class="line">        newnode (  <span class="number">0</span> ) ;</span><br><span class="line">        newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">        last = <span class="number">0</span> ;</span><br><span class="line">        n = <span class="number">0</span> ;</span><br><span class="line">        S[n] = <span class="number">-1</span> ;</span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line">        <span class="keyword">return</span> x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c -= <span class="string">'a'</span> ;</span><br><span class="line">        S[++ n] = c ;</span><br><span class="line">        <span class="keyword">int</span> cur = get_fail ( last ) ;</span><br><span class="line">        <span class="keyword">if</span> ( !next[cur][c] )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;</span><br><span class="line">            fail[now] = next[get_fail ( fail[cur] )][c] ;</span><br><span class="line">            next[cur][c] = now ;</span><br><span class="line">            num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        last = next[cur][c] ;</span><br><span class="line">        cnt[last] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    sam.init();</span><br><span class="line">    sam.build(s);</span><br><span class="line">    ll ans1 = sam.getsubnum() - <span class="number">1L</span>L*(lens+<span class="number">1</span>)*(lens+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    pam.init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pam.add(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans2 = pam.p<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans1+ans2)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第五场"><a href="#第五场" class="headerlink" title="第五场"></a>第五场</h4><p><a href="https://ac.nowcoder.com/acm/contest/885/G" target="_blank" rel="noopener">G-subsequence 1</a></p><p><strong>题意</strong>：给两个字符串，求字符串s中的字符子序列组合成的无前导零整数大于t组合成的整数的方案数</p><p><strong>思路</strong>：首先长度大于t串的可以枚举非0前导，通过组合数学求出；长度相等的情况dp来搞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#pragma GCC optimize(2)</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxn = 3e3+5;</span><br><span class="line">const int P = 998244353;</span><br><span class="line">  </span><br><span class="line">ll C[maxn][maxn];</span><br><span class="line">void getC()&#123;</span><br><span class="line">    for(int i=0;i&lt;maxn;i++)&#123;</span><br><span class="line">        C[i][0]=C[i][i]=1;</span><br><span class="line">        for(int j=1;j&lt;i;j++)&#123;</span><br><span class="line">            C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">char s[maxn],t[maxn];</span><br><span class="line">ll dp[maxn][maxn];</span><br><span class="line">void Add(ll &amp;x,ll y)&#123;</span><br><span class="line">    x+=y;</span><br><span class="line">    if(x&gt;=P) x-=P;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    getC();</span><br><span class="line">    int T;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    while(T--)&#123;</span><br><span class="line">        int n,m;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">        scanf(&quot;%s%s&quot;,s+1,t+1);</span><br><span class="line">  </span><br><span class="line">        ll ans=0;</span><br><span class="line">        //长度不相等答案</span><br><span class="line">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            if(s[i]!=&apos;0&apos;)&#123;</span><br><span class="line">                for(int j=m;j&lt;=n-i;j++)&#123;</span><br><span class="line">                    Add(ans,C[n-i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //长度相等答案,dp[i][j]表示s串前i个选出j个和t串前j个相等的方案数</span><br><span class="line">        for(int i=0;i&lt;=n;i++)&#123;</span><br><span class="line">            for(int j=0;j&lt;=m;j++)&#123;</span><br><span class="line">                dp[i][j]=0;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][0]=1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            for(int j=1;j&lt;=i;j++)&#123;</span><br><span class="line">                dp[i][j]=dp[i-1][j];</span><br><span class="line">                if(s[i]==t[j])&#123;</span><br><span class="line">                    Add(dp[i][j],dp[i-1][j-1]);</span><br><span class="line">                &#125;</span><br><span class="line">                if(s[i]&gt;t[j])&#123;</span><br><span class="line">                    if(n-i&gt;=0&amp;&amp;m-j&gt;=0&amp;&amp;n-i&gt;=m-j)&#123;</span><br><span class="line">                        Add(ans,dp[i-1][j-1]*C[n-i][m-j]%P);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%lld\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第六场"><a href="#第六场" class="headerlink" title="第六场"></a>第六场</h4><p><a href="https://ac.nowcoder.com/acm/contest/886/D" target="_blank" rel="noopener">D-Move</a></p><p><strong>题意</strong>：n个物品放在k个体积相同的箱子里，规则是对于每一个箱子都一直尽可能放当前最大的物品进去直到不能放就换下一个箱子放，求箱子最小体积</p><p><strong>思路</strong>：二分答案，出来的答案还要瞎搞下，因为不是最优解，复杂度爆炸也过了，毕竟数据水</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[n]&gt;x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">bool</span>)*(n+<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">int</span> take=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">        ll rest=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(rest&gt;=a[i])&#123;</span><br><span class="line">                rest -= a[i];</span><br><span class="line">                vis[i]=<span class="number">1</span>;</span><br><span class="line">                take++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rest&lt;a[<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(take==n)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> take==n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">int</span> ca=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            sum+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">        ll l=<span class="number">0</span>,r=<span class="number">10</span>*sum;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            ll mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pd(mid)) r=mid;</span><br><span class="line">            <span class="keyword">else</span>        l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,ca++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-20</span>;i&lt;=l;i++)</span><br><span class="line">            <span class="keyword">if</span>(pd(i))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/886/G" target="_blank" rel="noopener">G-Is Today Friday?</a></p><p><strong>题意</strong>：给出1e5个由大写字母A-J组成的字符串，每个字符串代表一个规定年限内的周五日期，求A-J每个字母的数字含义，要求字典序最小</p><p><strong>思路</strong>：因为日期有限制，所以1e5个中有很多会有重复的，排序去重后，直接枚举0-9的全排列（合法的其实很少），即枚举答案，同时保证了字典序最小。复习了一下基姆拉尔森公式和判断平闰年qwq</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">15</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">larson</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(month == <span class="number">1</span> || month == <span class="number">2</span>)&#123;</span><br><span class="line">        year -= <span class="number">1</span>;</span><br><span class="line">        month += <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (day+<span class="number">2</span>*month+<span class="number">3</span>*(month+<span class="number">1</span>)/<span class="number">5</span>+year+(year/<span class="number">4</span>)-(year/<span class="number">100</span>)+(year/<span class="number">400</span>)+<span class="number">1</span>)%<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year = a[s[<span class="number">0</span>]-<span class="string">'A'</span>]*<span class="number">1000</span>+a[s[<span class="number">1</span>]-<span class="string">'A'</span>]*<span class="number">100</span>+a[s[<span class="number">2</span>]-<span class="string">'A'</span>]*<span class="number">10</span>+a[s[<span class="number">3</span>]-<span class="string">'A'</span>];</span><br><span class="line">    <span class="keyword">int</span> month = a[s[<span class="number">5</span>]-<span class="string">'A'</span>]*<span class="number">10</span>+a[s[<span class="number">6</span>]-<span class="string">'A'</span>];</span><br><span class="line">    <span class="keyword">int</span> day = a[s[<span class="number">8</span>]-<span class="string">'A'</span>]*<span class="number">10</span>+a[s[<span class="number">9</span>]-<span class="string">'A'</span>];</span><br><span class="line">    <span class="keyword">if</span>( (year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>) || year%<span class="number">400</span>==<span class="number">0</span> ) m[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">else</span> m[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">    <span class="keyword">if</span>(year&lt;<span class="number">1600</span> || month&lt;<span class="number">1</span> ||month&gt;<span class="number">12</span> || day&lt;<span class="number">1</span> ||day&gt;m[month] || larson(year,month,day)!=<span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T,ca=<span class="number">1</span>;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(s,s+n);</span><br><span class="line">        n = unique(s,s+n)-s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) a[i]=i;</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!pd(s[i]))&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                ok=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a,a+<span class="number">10</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,ca++);</span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第七场"><a href="#第七场" class="headerlink" title="第七场"></a>第七场</h4><p><a href="https://ac.nowcoder.com/acm/contest/887/E" target="_blank" rel="noopener">E-Find the median</a></p><p><strong>题意</strong>：给n段区间，每次将区间[L,R]每个数加到当前序列中，区间范围1e9，求每次操作后的中位数</p><p><strong>思路</strong>：如果区间范围较小那就是个权值线段树模板题，这里区间需要离散化，线段树上每个叶子结点代表一个区间，记录每个区间的长度和出现次数，就可以知道当前所有数的个数，然后线段树中二分查找第k小即可</p><p>get：区间离散化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define ls o&lt;&lt;1</span><br><span class="line">#define rs o&lt;&lt;1|1</span><br><span class="line">#define lson l,mid,ls</span><br><span class="line">#define rson mid+1,r,rs</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxn = 2*4e5+5;</span><br><span class="line">ll X[maxn],Y[maxn],l[maxn],r[maxn];</span><br><span class="line">ll A1,A2,B1,B2,C1,C2,M1,M2;</span><br><span class="line">ll cnt[maxn&lt;&lt;2],sum[maxn&lt;&lt;2],len[maxn&lt;&lt;2];//区间覆盖次数,区间所有数个数,区间长度</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">void push_up(int o)&#123;</span><br><span class="line">    sum[o]=sum[ls]+sum[rs];</span><br><span class="line">    len[o]=len[ls]+len[rs];</span><br><span class="line">&#125;</span><br><span class="line">void push_down(int o)&#123;</span><br><span class="line">    if(cnt[o])&#123;</span><br><span class="line">        cnt[ls]+=cnt[o];</span><br><span class="line">        cnt[rs]+=cnt[o];</span><br><span class="line">        sum[ls]+=cnt[o]*len[ls];</span><br><span class="line">        sum[rs]+=cnt[o]*len[rs];</span><br><span class="line">        cnt[o]=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int o)&#123;</span><br><span class="line">    if(l==r)&#123;</span><br><span class="line">        cnt[o]=sum[o]=0;</span><br><span class="line">        len[o]=v[l]-v[l-1];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (l+r)&gt;&gt;1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int l,int r,int o)&#123;</span><br><span class="line">    if(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        cnt[o]++;</span><br><span class="line">        sum[o]+=len[o];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(o);</span><br><span class="line">    int mid = (l+r)&gt;&gt;1;</span><br><span class="line">    if(L&lt;=mid) update(L,R,lson);</span><br><span class="line">    if(R&gt;mid)  update(L,R,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line">int query(int l,int r,int o,ll k)&#123;</span><br><span class="line">    if(l==r)&#123;</span><br><span class="line">        return v[l-1]+(k-1)/(sum[o]/len[o]);</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(o);</span><br><span class="line">    int mid = (l+r)&gt;&gt;1;</span><br><span class="line">    if(sum[ls]&gt;=k) return query(lson,k);</span><br><span class="line">    else           return query(rson,k-sum[ls]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    scanf(&quot;%lld%lld%lld%lld%lld%lld&quot;,&amp;X[1],&amp;X[2],&amp;A1,&amp;B1,&amp;C1,&amp;M1);</span><br><span class="line">    scanf(&quot;%lld%lld%lld%lld%lld%lld&quot;,&amp;Y[1],&amp;Y[2],&amp;A2,&amp;B2,&amp;C2,&amp;M2);</span><br><span class="line">    for(int i=3;i&lt;=n;i++)&#123;</span><br><span class="line">        X[i] = (A1*X[i-1]%M1 + B1*X[i-2]%M1 + C1)%M1;</span><br><span class="line">        Y[i] = (A2*Y[i-1]%M2 + B2*Y[i-2]%M2 + C2)%M2;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        l[i]=min(X[i],Y[i])+1;</span><br><span class="line">        r[i]=max(X[i],Y[i])+1;</span><br><span class="line">        r[i]++;</span><br><span class="line">        v.push_back(l[i]);v.push_back(r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.end());</span><br><span class="line">    v.erase(unique(v.begin(),v.end()),v.end());</span><br><span class="line">    m=v.size();</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        l[i] = lower_bound(v.begin(),v.end(),l[i])-v.begin()+1;</span><br><span class="line">        r[i] = lower_bound(v.begin(),v.end(),r[i])-v.begin()+1;</span><br><span class="line">        r[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">    build(1,m-1,1);</span><br><span class="line">    ll all=0;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        update(l[i],r[i],1,m-1,1);</span><br><span class="line">        all=sum[1];</span><br><span class="line">        printf(&quot;%d\n&quot;,query(1,m-1,1,(all+1)/2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第八场"><a href="#第八场" class="headerlink" title="第八场"></a>第八场</h4><p><a href="https://ac.nowcoder.com/acm/contest/888/A" target="_blank" rel="noopener">A-All-one Matrices</a></p><p><strong>题意</strong>：求极大全一子矩阵个数</p><p><strong>思路</strong>：固定上边界，单调队列处理当前下边界，这样知道每一列可拓展的最左边界和最右边界，然后看下边界是否可以拓展</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn],L[maxn],R[maxn],sum[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mp[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            sum[i][j] = sum[i][j<span class="number">-1</span>]+(mp[i][j]==<span class="string">'1'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    h[m+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j]==<span class="string">'1'</span>) h[j]++;</span><br><span class="line">            <span class="keyword">else</span>              h[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            L[j]=j;</span><br><span class="line">            <span class="keyword">while</span>(L[j]&gt;<span class="number">1</span>&amp;&amp;h[j]&lt;=h[L[j]<span class="number">-1</span>]) L[j]=L[L[j]<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m; j&gt;=<span class="number">1</span>; j--) &#123;</span><br><span class="line">            R[j]=j;</span><br><span class="line">            <span class="keyword">while</span>(R[j]&lt;m&amp;&amp;h[j]&lt;=h[R[j]+<span class="number">1</span>]) R[j]=R[R[j]+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;h[j]&lt;h[st[top]])&#123;</span><br><span class="line">                <span class="keyword">int</span> now = st[top]; top--;</span><br><span class="line">                <span class="keyword">if</span>(!h[now]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> l = L[now];</span><br><span class="line">                <span class="keyword">int</span> r = R[now];</span><br><span class="line">                <span class="keyword">if</span>(sum[i+<span class="number">1</span>][r]-sum[i+<span class="number">1</span>][l<span class="number">-1</span>] != r-l+<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//printf("%d %d  %d  %d %d\n",i,j,now,l,r);</span></span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">while</span>(top&amp;&amp;st[top]&gt;=l) top--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            st[++top]=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/888/E" target="_blank" rel="noopener">E-Explorer</a></p><p><strong>题意</strong>：一张图中所有边有个[l,r]，问从点1到点n可以有多少个值可以通过</p><p><strong>思路</strong>：线段树维护可撤销并查集，每个结点表示区间被哪些两个点包含，每次将这些两个点的集合加到一起，并查集合并时因为要撤销所以不能路径压缩，只能按秩合并</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,rc</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> U[maxn],V[maxn],L[maxn],R[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ve;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],sz[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==fa[x]?x:Find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;tag[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        tag[o].push_back(v);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) update(L,R,v,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  update(L,R,v,rson);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:tag[o])&#123;</span><br><span class="line">        <span class="keyword">int</span> u = U[i],v = V[i];</span><br><span class="line">        <span class="keyword">int</span> fu = Find(u),fv = Find(v);</span><br><span class="line">        <span class="keyword">if</span>(fu==fv) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(sz[fu]&gt;sz[fv]) swap(fu,fv);</span><br><span class="line">        fa[fu]=fv;</span><br><span class="line">        sz[fv]+=sz[fu];</span><br><span class="line">        tmp.push_back(fu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Find(<span class="number">1</span>)==Find(n)) ans+=ve[r]-ve[l<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        query(lson);</span><br><span class="line">        query(rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:tmp) fa[v]=v;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;U[i],&amp;V[i],&amp;L[i],&amp;R[i]);</span><br><span class="line">        R[i]++;</span><br><span class="line">        ve.push_back(L[i]);</span><br><span class="line">        ve.push_back(R[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ve.begin(),ve.end());</span><br><span class="line">    ve.erase(unique(ve.begin(),ve.end()),ve.end());</span><br><span class="line">    <span class="keyword">int</span> nx = ve.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        L[i]=lower_bound(ve.begin(),ve.end(),L[i])-ve.begin()+<span class="number">1</span>;</span><br><span class="line">        R[i]=lower_bound(ve.begin(),ve.end(),R[i])-ve.begin();</span><br><span class="line">        update(L[i],R[i],i,<span class="number">1</span>,nx,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">        sz[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    query(<span class="number">1</span>,nx,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第九场"><a href="#第九场" class="headerlink" title="第九场"></a>第九场</h4><p><a href="https://ac.nowcoder.com/acm/contest/889/H" target="_blank" rel="noopener">H-Cutting Bamboos</a></p><p><strong>题意</strong>：区间一些数减到某一定值，操作y次，要使每次减掉部分和相等，问第x次减到的定值</p><p><strong>思路</strong>：实数域上二分答案，主席树区间查询比&lt;=x的和为多大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T[maxn*<span class="number">20</span>],L[maxn*<span class="number">20</span>],R[maxn*<span class="number">20</span>],cnt[maxn*<span class="number">20</span>];</span><br><span class="line">ll sum[maxn*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    x=++tot;</span><br><span class="line">    sum[x]=cnt[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(L[x],l,mid);</span><br><span class="line">    build(R[x],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;now,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    now=++tot;</span><br><span class="line">    L[now]=L[pre];</span><br><span class="line">    R[now]=R[pre];</span><br><span class="line">    cnt[now]=cnt[pre]+<span class="number">1</span>;</span><br><span class="line">    sum[now]=sum[pre]+h;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(h&lt;=mid) update(L[now],L[pre],l,mid,h);</span><br><span class="line">    <span class="keyword">else</span>       update(R[now],R[pre],mid+<span class="number">1</span>,r,h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> nnum,ssum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;h) &#123;</span><br><span class="line">        nnum += cnt[qr]-cnt[ql];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=h)&#123;</span><br><span class="line">        ssum += sum[qr]-sum[ql];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    query(L[ql],L[qr],l,mid,h);</span><br><span class="line">    query(R[ql],R[qr],mid+<span class="number">1</span>,r,h);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">100000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    build(T[<span class="number">0</span>],<span class="number">1</span>,all);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;h[i]);</span><br><span class="line">        update(T[i],T[i<span class="number">-1</span>],<span class="number">1</span>,all,h[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> ql,qr,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;ql,&amp;qr,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">double</span> rest = (sum[T[qr]]-sum[T[ql<span class="number">-1</span>]])*<span class="number">1.0</span>/y*(y-x);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">double</span> l=<span class="number">0.0</span>,r=<span class="number">100000.0</span>,mid,eps=<span class="number">1e-8</span>;</span><br><span class="line">        <span class="keyword">while</span>(l+eps&lt;r)&#123;</span><br><span class="line">            mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            nnum=ssum=<span class="number">0</span>;</span><br><span class="line">            query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,all,mid);</span><br><span class="line">            ssum += nnum*mid;</span><br><span class="line">            <span class="keyword">if</span>(ssum&gt;rest) r=mid;</span><br><span class="line">            <span class="keyword">else</span>          l=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.15f\n"</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/889/J" target="_blank" rel="noopener">J-Symmetrical Painting</a></p><p><strong>题意</strong>：给n个矩形，要求去掉部分矩形覆盖面积，使得剩余矩形覆盖面积关于某对称轴水平对称，求最大剩余覆盖面积</p><p><strong>思路</strong>：要使水平对称，那枚举每个矩形的对称轴，上中下，每次根据位置标记算贡献</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> y;<span class="keyword">int</span> w;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">double</span> a,<span class="keyword">int</span> b):y(a),w(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y&lt;hs.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn*<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        a[cnt++]=node(l,<span class="number">1</span>);</span><br><span class="line">        a[cnt++]=node((l+r)*<span class="number">1.0</span>/<span class="number">2</span>,<span class="number">-2</span>);</span><br><span class="line">        a[cnt++]=node(r,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+cnt);</span><br><span class="line">    <span class="keyword">double</span> pre=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>,now=<span class="number">0</span>,len=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        len = a[i].y - pre;</span><br><span class="line">        sum += <span class="number">1L</span>L*now*len*<span class="number">2</span>;</span><br><span class="line">        ans = max(ans,sum);</span><br><span class="line">        now += a[i].w;</span><br><span class="line">        pre = a[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第十场"><a href="#第十场" class="headerlink" title="第十场"></a>第十场</h4><p><a href="https://ac.nowcoder.com/acm/contest/890/B" target="_blank" rel="noopener">B-Coffee Chicken</a></p><p><strong>题意</strong>：求斐波那契规则构成的n个字符串，第n个的第k-k+9个字符</p><p><strong>思路</strong>：根据斐波那契的实现，输出长度只有10，最后输出的字符肯定会落在第一个和第二个串上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">5</span>]=&#123;<span class="string">""</span>, <span class="string">" COFFEE"</span>, <span class="string">" CHICKEN"</span>&#125;;</span><br><span class="line">ll f[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">(<span class="keyword">int</span> n,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[n<span class="number">-2</span>]&gt;=k) n-=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span>  k-=f[n<span class="number">-2</span>],n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(s[n][k]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    f[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">500</span>;i++) f[i] = min(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>],(ll)<span class="number">1e12</span>+<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;ll k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k+i&lt;=f[n]) pr(n,k+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/890/F" target="_blank" rel="noopener">F-Popping Balloons</a></p><p><strong>题意</strong>：二维平面上一些点上有气球，现在可以射击6次，水平垂直各3次，射击可使一行或一列的气球都命中，两种方式任意两次射击的距离只能为r，求最大射击气球数</p><p><strong>思路</strong>：线段树维护的叶子结点表示第一发打中x，后面x+r,x+r+r一起的收益，这样固定x轴的，枚举y轴，然后更新减掉x，y重复的，求x轴的最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,rc</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sumx[maxn],Max[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;Y[maxn];</span><br><span class="line"><span class="keyword">int</span> n,r;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Max[o]=max(Max[lc],Max[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Max[o] += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid =(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid) update(p,v,lson);</span><br><span class="line">    <span class="keyword">else</span>       update(p,v,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Mx,My;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    update(p,<span class="number">-1</span>,<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p-r&gt;=<span class="number">0</span>)update(p-r,<span class="number">-1</span>,<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p-r-r&gt;=<span class="number">0</span>)update(p-r-r,<span class="number">-1</span>,<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    update(p,<span class="number">1</span>,<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p-r&gt;=<span class="number">0</span>)update(p-r,<span class="number">1</span>,<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p-r-r&gt;=<span class="number">0</span>)update(p-r-r,<span class="number">1</span>,<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;r);</span><br><span class="line">    Mx=<span class="number">0</span>,My=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        sumx[x]++;</span><br><span class="line">        Y[y].push_back(x);</span><br><span class="line">        Mx=max(Mx,x);</span><br><span class="line">        My=max(My,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=Mx;i++)&#123;</span><br><span class="line">        update(i,sumx[i]+sumx[i+r]+sumx[i+r+r],<span class="number">0</span>,Mx,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=My;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:Y[i]) sub(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:Y[i+r]) sub(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:Y[i+r+r]) sub(p);</span><br><span class="line">        <span class="keyword">int</span> sumX = Max[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> sumY = Y[i].size()+Y[i+r].size()+Y[i+r+r].size();</span><br><span class="line">        <span class="comment">//printf("%d %d %d\n",i,sumX,sumY);</span></span><br><span class="line">        ans=max(ans,sumX+sumY);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:Y[i]) add(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:Y[i+r]) add(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:Y[i+r+r]) add(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结撒花&gt;&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;留点曾经被搞自闭的印象…
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="PAM" scheme="http://quincy.ink/tags/PAM/"/>
    
      <category term="线段树" scheme="http://quincy.ink/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="主席树" scheme="http://quincy.ink/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="二分" scheme="http://quincy.ink/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="分治" scheme="http://quincy.ink/tags/%E5%88%86%E6%B2%BB/"/>
    
      <category term="dp" scheme="http://quincy.ink/tags/dp/"/>
    
      <category term="单调栈" scheme="http://quincy.ink/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="dfs" scheme="http://quincy.ink/tags/dfs/"/>
    
      <category term="bitset" scheme="http://quincy.ink/tags/bitset/"/>
    
      <category term="STL" scheme="http://quincy.ink/tags/STL/"/>
    
      <category term="单调队列" scheme="http://quincy.ink/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="模拟" scheme="http://quincy.ink/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="SAM" scheme="http://quincy.ink/tags/SAM/"/>
    
      <category term="组合数学" scheme="http://quincy.ink/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="几何" scheme="http://quincy.ink/tags/%E5%87%A0%E4%BD%95/"/>
    
      <category term="离散化" scheme="http://quincy.ink/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
      <category term="并查集" scheme="http://quincy.ink/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>CCPC2019女生专场D-Tree</title>
    <link href="http://quincy.ink/CCPC2019%E5%A5%B3%E7%94%9F%E4%B8%93%E5%9C%BAD-Tree.html"/>
    <id>http://quincy.ink/CCPC2019女生专场D-Tree.html</id>
    <published>2019-07-15T11:53:58.000Z</published>
    <updated>2019-07-15T12:06:34.176Z</updated>
    
    <content type="html"><![CDATA[<p>今天花一天时间好好学习了下树链剖分，之前听上去很高大上的样子，上半年寒假集训学长讲的时候还完全不懂，现在学着学着就很好理解了。刚好这道最近要补的题就是个裸题，拿来练练手。</p><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6547" target="_blank" rel="noopener">原题链接</a></p><p>如果想区间维护更新的话因为是开根号，不满足加减乘幂等运算性质，所以只好单点更新，但这样复杂度会是O(qnlogn)？实际上，因为ai最大1e9，对其在在10次开根号的操作下会变为1，然后就不会变了，所以维护一个区间最大值，每次更新看是否最大值&lt;=1，是的话线段树就不要递归向下更新了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to;</span><br><span class="line">&#125;e[maxm*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++cnt]=edge&#123;head[u],v&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,val[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],deep[maxn],siz[maxn],son[maxn],rk[maxn],top[maxn],id[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    fa[u]=pre;deep[u]=dep;siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u,dep+<span class="number">1</span>);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    top[u]=t;id[u]=++cnt;rk[cnt]=u;</span><br><span class="line">    <span class="keyword">if</span>(!son[u])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u],t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=son[u]&amp;&amp;v!=fa[u])dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll Max[maxn&lt;&lt;<span class="number">2</span>],Sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Sum[o]=Sum[o&lt;&lt;<span class="number">1</span>]+Sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    Max[o]=max(Max[o&lt;&lt;<span class="number">1</span>],Max[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Max[o]=Sum[o]=val[rk[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Max[o]&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Sum[o]=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(Sum[o]);</span><br><span class="line">        Max[o]=Sum[o];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)  update(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) update(L,R,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Sum[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;ll ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret+=querysum(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret+=querysum(L,R,rson);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PathUpdate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</span><br><span class="line">        update(id[top[x]],id[x],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id[x]&gt;id[y]) swap(x,y);</span><br><span class="line">    update(id[x],id[y],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">PathQuery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</span><br><span class="line">        ret+=querysum(id[top[x]],id[x],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id[x]&gt;id[y])swap(x,y);</span><br><span class="line">    ret+=querysum(id[x],id[y],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(),q=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=read();</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) head[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        addedge(u,v);</span><br><span class="line">        addedge(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=read(),x=read(),y=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">0</span>)&#123;</span><br><span class="line">            PathUpdate(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,PathQuery(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天花一天时间好好学习了下树链剖分，之前听上去很高大上的样子，上半年寒假集训学长讲的时候还完全不懂，现在学着学着就很好理解了。刚好这道最近要补的题就是个裸题，拿来练练手。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="线段树" scheme="http://quincy.ink/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="树链剖分" scheme="http://quincy.ink/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>牛客小白月赛16&amp;&amp;CodeForces1191 补题</title>
    <link href="http://quincy.ink/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B16-CodeForces1191-%E8%A1%A5%E9%A2%98.html"/>
    <id>http://quincy.ink/牛客小白月赛16-CodeForces1191-补题.html</id>
    <published>2019-07-13T01:45:52.000Z</published>
    <updated>2019-07-13T13:30:04.164Z</updated>
    
    <content type="html"><![CDATA[<p>又是自闭的一天…<a id="more"></a></p><h5 id="D-小阳买水果"><a href="#D-小阳买水果" class="headerlink" title="D-小阳买水果"></a><a href="https://ac.nowcoder.com/acm/contest/949/D" target="_blank" rel="noopener">D-小阳买水果</a></h5><p>求序列连续子段和大于0的最长子序列长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans,sum,n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;  <span class="comment">//枚举r二分l (l,r]</span></span><br><span class="line">        <span class="keyword">int</span> x=read();</span><br><span class="line">        sum+=x;</span><br><span class="line">        a[i]=min(a[i<span class="number">-1</span>],sum);</span><br><span class="line">        <span class="keyword">if</span>(sum-a[i<span class="number">-1</span>]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum-a[m]&gt;<span class="number">0</span>) r=m;</span><br><span class="line">            <span class="keyword">else</span>           l=m+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,i-l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="F-小石的妹子"><a href="#F-小石的妹子" class="headerlink" title="F-小石的妹子"></a><a href="https://ac.nowcoder.com/acm/contest/949/F" target="_blank" rel="noopener">F-小石的妹子</a></h5><p>拓扑思想+线段树维护区间最大值</p><p>发现用数组数组常数小，代码量也少</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;hs.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> bb[maxn],ans[maxn];</span><br><span class="line"><span class="keyword">int</span> Max[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Max[o]=v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid) update(p,v,lson);</span><br><span class="line">    <span class="keyword">else</span>       update(p,v,rson);</span><br><span class="line">    Max[o]=max(Max[o&lt;&lt;<span class="number">1</span>],Max[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymax</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Max[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=max(ret,querymax(L,R,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=max(ret,querymax(L,R,rson));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a=read(),b=read();</span><br><span class="line">        bb[i]=b;</span><br><span class="line">        p[i]=node&#123;a,b,i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p,p+n);</span><br><span class="line">    sort(bb,bb+n); <span class="comment">//离散化bi</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p[i].b=lower_bound(bb,bb+n,p[i].b)-bb+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为已经对ai排序,满足aj&gt;ai,则只要考虑bj&gt;bi的最大排名即可</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ans[p[i].id]=querymax(p[i].b,n,<span class="number">1</span>,n,<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        update(p[i].b,ans[p[i].id],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="H-小阳的贝壳"><a href="#H-小阳的贝壳" class="headerlink" title="H-小阳的贝壳"></a><a href="https://ac.nowcoder.com/acm/contest/949/H" target="_blank" rel="noopener">H-小阳的贝壳</a></h5><p>$gcd(a,b,c)=gcd(a,b-a,c-b)=gcd(a,gcd(b-a,c-b));$</p><p>$gcd([l,r])=gcd(a[l],gcd([l+1,r]))$</p><p>a[l]=$\sum_{i=1}^{l}f[i]$,f[i]为差分数列f[i]=a[i]-a[i-1]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn],f[maxn];</span><br><span class="line"><span class="keyword">int</span> Sum[maxn&lt;&lt;<span class="number">2</span>],Max[maxn&lt;&lt;<span class="number">2</span>],Gcd[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Sum[o]=Sum[o&lt;&lt;<span class="number">1</span>]+Sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    Max[o]=max(Max[o&lt;&lt;<span class="number">1</span>],Max[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    Gcd[o]=__gcd(Gcd[o&lt;&lt;<span class="number">1</span>],Gcd[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Sum[o]=f[l];</span><br><span class="line">        Max[o]=Gcd[o]=<span class="built_in">abs</span>(Sum[o]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        Sum[o]+=v;</span><br><span class="line">        Max[o]=Gcd[o]=<span class="built_in">abs</span>(Sum[o]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid) update(p,v,lson);</span><br><span class="line">    <span class="keyword">else</span>       update(p,v,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymax</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Max[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=max(ret,querymax(L,R,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=max(ret,querymax(L,R,rson));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Sum[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret+=querysum(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret+=querysum(L,R,rson);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querygcd</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> Gcd[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=__gcd(ret,querygcd(L,R,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=__gcd(ret,querygcd(L,R,rson));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        f[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=read(),l=read(),r=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=read();</span><br><span class="line">            update(l,x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(r+<span class="number">1</span>&lt;=n) update(r+<span class="number">1</span>,-x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l==r) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">else</span>     <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,querymax(l+<span class="number">1</span>,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(l==r) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,querysum(<span class="number">1</span>,l,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span>     <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,__gcd(querysum(<span class="number">1</span>,l,<span class="number">1</span>,n,<span class="number">1</span>),querygcd(l+<span class="number">1</span>,r,<span class="number">1</span>,n,<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复习一下线段树~好久没写的样子</p><p><br></p><h5 id="C-Tokitsukaze-and-Discard-Items"><a href="#C-Tokitsukaze-and-Discard-Items" class="headerlink" title="C-Tokitsukaze and Discard Items"></a><a href="http://codeforces.com/contest/1191/problem/C" target="_blank" rel="noopener">C-Tokitsukaze and Discard Items</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    ll n,m,k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">        ll r = ((a[i]-cnt<span class="number">-1</span>)/k+<span class="number">1</span>)*k+cnt; <span class="comment">//计算第一个特殊数所在页上限</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=m&amp;&amp;a[i]&lt;=r)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="D-Tokitsukaze-CSL-and-Stone-Game"><a href="#D-Tokitsukaze-CSL-and-Stone-Game" class="headerlink" title="D-Tokitsukaze, CSL and Stone Game"></a><a href="http://codeforces.com/contest/1191/problem/D" target="_blank" rel="noopener">D-Tokitsukaze, CSL and Stone Game</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">2</span>&amp;&amp;a[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">1</span>]==<span class="number">0</span>)&#123;<span class="comment">//注意特判</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"cslnb"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> has2=<span class="number">0</span>;<span class="comment">//相同数对的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        sum+=a[i]-i; <span class="comment">//贪心选取,要使不重复,最后每堆数目留下的肯定是0,1,2,...</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>&amp;&amp;a[i]==a[i+<span class="number">1</span>]) has2++;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i&lt;n<span class="number">-1</span>&amp;&amp;a[i]==a[i+<span class="number">1</span>]&amp;&amp;a[i<span class="number">-1</span>]+<span class="number">1</span>==a[i])&#123;<span class="comment">//x,x+1,x+1这种情况无论怎么取都先手输</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"cslnb"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((sum&amp;<span class="number">1</span>)==<span class="number">0</span> || has2&gt;=<span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">"cslnb"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"sjfnb"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补完Div2的CD发现真的不难，因为读错题和读题太慢很影响心态，下次还得细心点啊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是自闭的一天…
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="线段树" scheme="http://quincy.ink/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="二分" scheme="http://quincy.ink/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="树状数组" scheme="http://quincy.ink/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="gcd" scheme="http://quincy.ink/tags/gcd/"/>
    
  </entry>
  
  <entry>
    <title>英语语法学习(转)</title>
    <link href="http://quincy.ink/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E8%BD%AC.html"/>
    <id>http://quincy.ink/英语语法学习-转.html</id>
    <published>2019-07-12T08:24:17.000Z</published>
    <updated>2019-07-12T08:25:50.058Z</updated>
    
    <content type="html"><![CDATA[<p>b站上无意翻到新疆小姐姐莎依拜 (Sahiba Anwar)的英语语法视频《一堂课让你懂得英语语法百分之九十五》，全长103分钟，语速较慢，2倍速下不到1小时可以看完。中学上的语法课都是零零散散的，整体总结一下，感觉知识体系清晰了很多。（BTW，小姐姐声音真好听）</p><a id="more"></a><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>  语法是一座体系，是一座大楼，但是中学期间学习的语法是零散的，我们学习的内容都是砖块，无法看到英语语法的大楼。这个视频能够让我们快速认识语法大楼的全貌（相当于理解了95%）。剩余的5%，都是小碎砖，再去细地探索。视频作者是新疆小姐姐<strong>莎依拜 (Sahiba Anwar)</strong>。本篇内容完全来自视频。</p><h2 id="结构分类"><a href="#结构分类" class="headerlink" title="结构分类"></a>结构分类</h2><p>  按照结构分类时，<strong>所有</strong>英文句子能够分成<em>三类</em>：</p><ol><li><p>简单句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主语 + 谓语 + 宾语</span><br></pre></td></tr></table></figure></li><li><p>并列句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主谓宾， 并列词  + 主谓宾  ————————————————⟶</span><br><span class="line">   ↓       ↳ e.g. and,or,but etc.          ↓</span><br><span class="line">(简单句)                               (简单句)</span><br><span class="line">   |-----------同等地位，并列关系------------|</span><br></pre></td></tr></table></figure></li><li><p>复合句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主谓宾， 从句引导词  +  主谓宾   ————————————————⟶</span><br><span class="line">   ↓        ↳ e.g. which,when,where...           ↓</span><br><span class="line">主句(主导地位，大哥，简单句)             从句(从属地位，小弟，简单句)</span><br></pre></td></tr></table></figure><p>从句类型：</p><ul><li>名词性从句（名词）</li><li>定语从句（形容词）</li><li>状语从句（副词）</li></ul></li></ol><blockquote><p>主语：subject → 动作的发出者 ⇒ 我<br>谓语： verb → 动作 ⇒ 踢<br>宾语： object → 动作的承受者 ⇒ 球</p></blockquote><h2 id="主谓宾和它的五个兄弟（简单句的六个基本句型）"><a href="#主谓宾和它的五个兄弟（简单句的六个基本句型）" class="headerlink" title="主谓宾和它的五个兄弟（简单句的六个基本句型）"></a>主谓宾和它的五个兄弟（简单句的六个基本句型）</h2><p>  所有的英文句子无外乎主谓宾的问题，把主谓宾研究清楚了，把所有句子就搞清楚了。</p><h3 id="句型1"><a href="#句型1" class="headerlink" title="句型1"></a>句型1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主（名）      谓（及物）        宾（名）</span><br><span class="line">  I            play             games.</span><br></pre></td></tr></table></figure><h3 id="句型2"><a href="#句型2" class="headerlink" title="句型2"></a>句型2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主（名）      谓（不及物）     </span><br><span class="line">  Spring        comes.            </span><br><span class="line">                  ↳此动作无承受者，所以没有宾语</span><br></pre></td></tr></table></figure><h3 id="句型3"><a href="#句型3" class="headerlink" title="句型3"></a>句型3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主（名）      系               表</span><br><span class="line">              ↳共3种       （名词；形容词；不定式；介宾[介词+名词]）</span><br><span class="line">&lt;1&gt; Be动词：am, is, are, was, were</span><br><span class="line">&lt;2&gt; 感官动词（五官）：look, sound, smell, taste, feel</span><br><span class="line">&lt;3&gt; 变化动词：become, turn, go, get, grow</span><br><span class="line">&lt;4&gt; 静止动词：stay, remain, keep</span><br><span class="line"></span><br><span class="line">* 不定式[to do], 但是如果遇到to + 动词ing，这里的to是介词。</span><br></pre></td></tr></table></figure><h3 id="句型4"><a href="#句型4" class="headerlink" title="句型4"></a>句型4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 主        谓         宾        宾</span><br><span class="line">（名）     (及物)    （名）     （名）</span><br><span class="line"> I          give      you        money</span><br></pre></td></tr></table></figure><h3 id="句型5"><a href="#句型5" class="headerlink" title="句型5"></a>句型5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主         谓         宾         补</span><br><span class="line">（名）    （及物）   （名）    （1.形容词 2.不定式）</span><br><span class="line">|----结构完成，意思不完整---|    |---补充说明意思---|</span><br><span class="line"></span><br><span class="line">1. The music makes me sad.</span><br><span class="line">2. He tells me to go. </span><br><span class="line"></span><br><span class="line">* He helps me (to) understand the problem. 特殊</span><br></pre></td></tr></table></figure><h3 id="句型6"><a href="#句型6" class="headerlink" title="句型6"></a>句型6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">There be 句型，表达&quot;存在&quot;。</span><br><span class="line"></span><br><span class="line">There      be     名词</span><br><span class="line">There is a dog.</span><br><span class="line"></span><br><span class="line">There      be     名词         介宾</span><br><span class="line">There is a dog under the tree.</span><br></pre></td></tr></table></figure><h2 id="从句：引导词-主谓宾（或其五个兄弟）"><a href="#从句：引导词-主谓宾（或其五个兄弟）" class="headerlink" title="从句：引导词 + 主谓宾（或其五个兄弟）"></a>从句：引导词 + 主谓宾（或其五个兄弟）</h2><h3 id="名词性从句"><a href="#名词性从句" class="headerlink" title="名词性从句"></a>名词性从句</h3><ul><li>主语从句</li><li>宾语从句</li><li>表语从句</li><li>同位语从句</li></ul><p>一模一样的句子，只不过位置不同，所以名称不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主             谓             宾语</span><br><span class="line">(名词)        (及物动词)      (名词)</span><br><span class="line">名词性从句                    名词性从句</span><br><span class="line">    ↓                            ↓</span><br><span class="line">主语从句                      宾语从句</span><br></pre></td></tr></table></figure><p>名词性从句常用的引导词有:that, whether, what</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e.g.  名词性从句：  that         he         likes       football</span><br><span class="line">                   (引导词)     (名)        (动)         (名)</span><br><span class="line">                      |          |------主谓宾(句子)-------|    ⇒  不能做句子成分*</span><br><span class="line">                      |-----------------------|      |</span><br><span class="line">                                 ⇓                   ↲ 降级成</span><br><span class="line">                        名词（可以做句子成分）</span><br><span class="line"></span><br><span class="line">* 为什么不能做句子成分？英文里一个句子只能有一个谓语动词，否则句子不成立。</span><br></pre></td></tr></table></figure><ol><li><p>主语从句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">That he likes football surprised us.</span><br><span class="line">---------------------      ▲      ▲</span><br><span class="line">        名词           及物动词  名词</span><br><span class="line">      （主语）         （谓语）（宾语）</span><br></pre></td></tr></table></figure></li><li><p>宾语从句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  He    said      that he likes football.</span><br><span class="line">   ▲      ▲        ----------------------</span><br><span class="line">  名词  及物动词             名词</span><br><span class="line">（主语）（谓语）           （宾语）</span><br></pre></td></tr></table></figure></li><li><p>表语从句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> The fact    is     that he likes football.</span><br><span class="line"> --------    ▲              ▲</span><br><span class="line"> 名词       be动词          名词</span><br><span class="line">（主语）   （系语）       （表语）</span><br></pre></td></tr></table></figure></li><li><p>同位语从句<br>什么是同位语？同位语起解释说明名词的作用，和其解释的名词相等；同位语是[名词]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如： 主， 同位语，  谓宾.    Yusuf, a Uyghur man, loves spring.</span><br><span class="line">     主谓宾， 同位语 .       Yusuf loves spring, on of the four season.</span><br><span class="line">上面的同位语是以插入语的形式。</span><br><span class="line"></span><br><span class="line">The fact that he likes football   surprised     us.</span><br><span class="line">-------- ----------------------       ▲         ▲</span><br><span class="line">  名词       同位语从句           动词（谓）   名词（宾）</span><br><span class="line"></span><br><span class="line">He states  the fact  that he likes football.</span><br><span class="line"> ▲    ▲        ▲     ------------------------</span><br><span class="line"></span><br><span class="line">* 同位语从句的引导词只有that。</span><br></pre></td></tr></table></figure></li></ol><h3 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h3><p>什么是定语？<strong>修饰限定名词，红红的花</strong><br>定语Ⅰ：形容词（短一些）<br>定语Ⅱ：短语或从句（长一些）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">**为什么要分两种呢**？因为英语忌讳头重脚轻，定语稍微长一点，马上往后挪。</span><br><span class="line"></span><br><span class="line">    定Ⅰ 主  定Ⅱ                谓                 定Ⅰ 宾  定Ⅱ</span><br><span class="line">    （名）                     （动）                 （名）</span><br><span class="line"></span><br><span class="line">    A beautiful girl shared a fascinating story.</span><br><span class="line">      ---------   ▲           -----------   ▲     </span><br><span class="line">        定Ⅰ(形)                 定Ⅰ(形)</span><br><span class="line"></span><br><span class="line">    A girl from Mars shared a story about her people.</span><br><span class="line">        ▲  ---------           ▲    ---------------</span><br><span class="line">          定Ⅱ(介宾短语)              定Ⅱ(介宾短语)</span><br><span class="line"></span><br><span class="line">    A task to tackle is the potential crisis.</span><br><span class="line">       ▲   ---------        ---------   ▲</span><br><span class="line">          定Ⅱ(不定式)       定Ⅰ(形)</span><br><span class="line"></span><br><span class="line">    A girl who likes spring shared a story which moved us.</span><br><span class="line">       ▲   ----------------            ▲   ---------------</span><br><span class="line">            (定语从句)                       （定语从句）</span><br></pre></td></tr></table></figure><h3 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h3><blockquote><p>什么是状语？</p><ul><li>副词：修饰动词:walk slowly； 修饰形容词：slightly higher；</li><li>起副词作用的句子：状语从句</li><li>按作用划分：<ol><li>时间状语(从句)：何时？</li><li>地点状语(从句)：在哪？</li><li>原因状语(从句)：为啥？因为…；</li><li>条件状语(从句)：在什么情况下？如果…；只要…；只有…；</li><li>目的状语(从句)：为了啥？为了…；这样就能…；</li><li>结果状语(从句)：导致了啥？结果…；以至于…；</li><li>让步状语(从句)：转折的前奏，强调前的东西不重要。虽然…；</li><li>方式状语(从句)：怎么做的（发生的）？用…；通过…；</li></ol></li></ul></blockquote><p>状语从句是存在于简单句（主谓宾）之外的。</p><p>例子：</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yusuf smiles happily.  副词修饰动词，出现在动词之后</span><br><span class="line">Yusuf quickly understood.  副词修饰动词，出现在动词之前</span><br><span class="line">She is strikingly beautiful.   副词修饰形容词，表示程度：强</span><br><span class="line">He is pretty tall.   副词修饰形容词，表示程度：弱</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">He came yesterday.    时间副词，位置灵活</span><br><span class="line">Yesterday he came.</span><br><span class="line">He called me when I was sleeping. 时间状语从句</span><br><span class="line"></span><br><span class="line">He celebrated hes birthday at school.    地点副词，位置灵活</span><br><span class="line">At school he celebrated his birthday.</span><br><span class="line">We met where we used to go for a walk.  地点状语从句</span><br><span class="line"></span><br><span class="line">He likes spring for its beauty.</span><br><span class="line">He likes srping for it is  beautiful.</span><br><span class="line">He likes spring because it is beautiful.</span><br><span class="line">He likes spring as it is beautiful.</span><br><span class="line">He likes spring since it is beautiful.  </span><br><span class="line">都是从句，原因除了since前后都可以外，其他的都靠后</span><br><span class="line">Because开头的不是状语从句，而是一个名词性句子</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If you win, there will be a reward.     条件状语从句</span><br><span class="line">As long as you win, there will be a reward.  条件状语从句</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I study for my well-being.            </span><br><span class="line">I don&apos;t spend extra to save money. (to is short for in order to)</span><br><span class="line">I don&apos;t spend extra in order to save money. (in order to 可以提前)</span><br><span class="line">I don&apos;t spend extra so that I can save money.     目的状语从句</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">He tried so hard that he finally succeeded. 结果状语从句</span><br><span class="line">这里的so...that...和目的状语从句的so that不同，目的状语从句中的so that不能加任何东西，so that共同引导。</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Although you have a point there, I don&apos;t agree with your proposal.</span><br><span class="line">让步状语从句，不需转折词。重点在转折后面的东西。</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">I learned English through an online course.</span><br><span class="line">I contact my friends via Wechat.</span><br><span class="line">I draw with my pen.</span><br><span class="line">I found differences by contasting the two.</span><br><span class="line">She looks at me as if she knows me.</span><br><span class="line">He finished the work as I told him to.</span><br><span class="line">方式状语</span><br></pre></td></tr></table></figure></li></ol><h3 id="三个特殊句式（对六种基本句型的操纵）"><a href="#三个特殊句式（对六种基本句型的操纵）" class="headerlink" title="三个特殊句式（对六种基本句型的操纵）"></a>三个特殊句式（对六种基本句型的操纵）</h3><ol><li><p>强调句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">He hit me.</span><br><span class="line">It was him that hit me.</span><br><span class="line"></span><br><span class="line">I learned about this project through this site.</span><br><span class="line">It was through this site that I learned about this project.</span><br><span class="line"></span><br><span class="line">It is 名  that  动(名)</span><br><span class="line">It is 介宾  that  主谓(宾)</span><br></pre></td></tr></table></figure></li><li><p>倒装句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正常句序：主 谓  (宾)</span><br><span class="line">倒装句序：谓 主  (宾）  -&gt; 强调加强语气的作用</span><br><span class="line"></span><br><span class="line">正常：We can win only when we try harder.  (情态动词+实意动词 才算一个谓语)</span><br><span class="line">倒装：Only when we try harder can we win.  部分倒装</span><br><span class="line"></span><br><span class="line">正常：The bus comes.</span><br><span class="line">倒装： Here comes the bus.</span><br><span class="line"></span><br><span class="line">正常：The Queen live long!</span><br><span class="line">倒装：Long live The Queen!</span><br></pre></td></tr></table></figure></li><li><p>虚拟语句</p></li></ol><blockquote><p>假设一个有可能发生的事情–&gt;条件状语<br>If it rains, the event will be canceled. (主将从现)</p><p>假设一件不可能发生的事-&gt;虚拟语气<br>现在不可能： If I were a boy, I would be a soldier. (过去时)<br>过去不可能（和既成事实相反）<br>If I had studied English, it would have been easier now.<br>If I hadn’t had that extra cake, I wouldn’t have been feeling guilty.<br>(过去完成) （过去时 + 完成时）</p></blockquote><h3 id="时态"><a href="#时态" class="headerlink" title="时态"></a>时态</h3><ol><li>一般（习惯性）</li><li>进行（正在发生）</li><li>完成（有结果）</li><li>完成进行时（持续性：一直在做）</li></ol><h3 id="语态"><a href="#语态" class="headerlink" title="语态"></a>语态</h3><ol><li><p>主动语态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I finished my task.</span><br></pre></td></tr></table></figure></li><li><p>被动语态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My task is finished.</span><br></pre></td></tr></table></figure></li></ol><h3 id="非谓语"><a href="#非谓语" class="headerlink" title="非谓语"></a>非谓语</h3><p>分词：</p><ol><li><p>现在分词（doing）：和主句主语为主动关系</p></li><li><p>过去分词（done）：和主句主语为被动关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The boy was lost, failing to find the way back home.</span><br><span class="line">                  ----------------------------------</span><br><span class="line">                          非谓语</span><br><span class="line"></span><br><span class="line">The boy was lost, failed by his poor memory.</span><br><span class="line">                  -------------------------</span><br><span class="line">                           非谓语</span><br></pre></td></tr></table></figure></li></ol><p><strong>至此，语法大楼搭建结束，赶紧去拾小砖块。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;b站上无意翻到新疆小姐姐莎依拜 (Sahiba Anwar)的英语语法视频《一堂课让你懂得英语语法百分之九十五》，全长103分钟，语速较慢，2倍速下不到1小时可以看完。中学上的语法课都是零零散散的，整体总结一下，感觉知识体系清晰了很多。（BTW，小姐姐声音真好听）&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://quincy.ink/categories/English/"/>
    
    
      <category term="语法" scheme="http://quincy.ink/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces-1182C Beautiful Lyrics</title>
    <link href="http://quincy.ink/Codeforces-1182C-Beautiful-Lyrics.html"/>
    <id>http://quincy.ink/Codeforces-1182C-Beautiful-Lyrics.html</id>
    <published>2019-06-14T13:00:10.000Z</published>
    <updated>2019-06-14T13:18:40.298Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1182/problem/C" target="_blank" rel="noopener">原题链接</a></p><p><strong>题意：</strong> 给出最多1e5个字符串，问求最多能构成多少个字符串四元组，要求四元组的前两个字符串中的元音字母个数相同，后两个元音字母个数相同且还要每个字符串的最后一个元音字母相同<a id="more"></a></p><p><strong>思路：</strong> 先对所有字符串用STL嵌套分类，把符合后两个字符串条件的优先先分到一块，然后剩下的元音字母数量相同的在分到一块，最后两两合并</p><p>#auto &amp; 表示可以修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isvowel</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ch==<span class="string">'a'</span>||ch==<span class="string">'e'</span>||ch==<span class="string">'i'</span>||ch==<span class="string">'o'</span>||ch==<span class="string">'u'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getcount</span><span class="params">(<span class="built_in">string</span> &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ch:str) <span class="keyword">if</span>(isvowel(ch)) res++;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getlast</span><span class="params">(<span class="built_in">string</span> &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=str.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isvowel(str[i])) <span class="keyword">return</span> str[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&gt; all;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;&gt; both1,both2,ans;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> str; <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">        all[getcount(str)][getlast(str)].push_back(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;same_count:all)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;same_last:same_count.second)&#123;</span><br><span class="line">            <span class="keyword">while</span>(same_last.second.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                a=same_last.second.back(); same_last.second.pop_back();</span><br><span class="line">                b=same_last.second.back(); same_last.second.pop_back();</span><br><span class="line">                both2.push_back(&#123;a,b&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;rest;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;same_last:same_count.second)&#123;</span><br><span class="line">            <span class="keyword">if</span>(same_last.second.size())&#123;</span><br><span class="line">                rest.push_back(same_last.second.back());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(rest.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            a=rest.back(); rest.pop_back();</span><br><span class="line">            b=rest.back(); rest.pop_back();</span><br><span class="line">            both1.push_back(&#123;a,b&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; b1,b2;</span><br><span class="line">    <span class="keyword">while</span>(both1.size()&amp;&amp;both2.size())&#123;</span><br><span class="line">        b1=both1.back(); both1.pop_back();</span><br><span class="line">        b2=both2.back(); both2.pop_back();</span><br><span class="line">        ans.push_back(&#123;b1.first,b2.first&#125;);</span><br><span class="line">        ans.push_back(&#123;b1.second,b2.second&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(both2.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        b1=both2.back(); both2.pop_back();</span><br><span class="line">        b2=both2.back(); both2.pop_back();</span><br><span class="line">        ans.push_back(&#123;b1.first,b2.first&#125;);</span><br><span class="line">        ans.push_back(&#123;b1.second,b2.second&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans.size()/<span class="number">2</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s:ans)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s.first&lt;&lt;<span class="string">' '</span>&lt;&lt;s.second&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1182/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题意：&lt;/strong&gt; 给出最多1e5个字符串，问求最多能构成多少个字符串四元组，要求四元组的前两个字符串中的元音字母个数相同，后两个元音字母个数相同且还要每个字符串的最后一个元音字母相同
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="贪心" scheme="http://quincy.ink/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="STL" scheme="http://quincy.ink/tags/STL/"/>
    
      <category term="cf" scheme="http://quincy.ink/tags/cf/"/>
    
      <category term="字符串" scheme="http://quincy.ink/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>湘潭大学2019程序设计实践</title>
    <link href="http://quincy.ink/%E6%B9%98%E6%BD%AD%E5%A4%A7%E5%AD%A62019%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5.html"/>
    <id>http://quincy.ink/湘潭大学2019程序设计实践.html</id>
    <published>2019-06-03T04:45:18.000Z</published>
    <updated>2020-05-02T01:13:41.220Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="黑体" color="red" size="4px">抄袭一时爽，查重火葬场</font></center><br>因考前会查重，<del>故仅提供思路参考，代码后续补上，</del>有问题欢迎下方评论留言</p><p>ericxie官方解析点<a href="https://www.bilibili.com/video/av55260932" target="_blank" rel="noopener">这里</a></p><p>食用此篇博文代码前建议上网自学一些C++STL容器(set、vector、map等)的用法<a id="more"></a></p><h5 id="1262-Fish"><a href="#1262-Fish" class="headerlink" title="1262 Fish"></a>1262 Fish</h5><p>贪心，优先队列维护每个池塘能钓到鱼的数量即可，当前池塘有最多鱼的池塘优先出队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fish</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    fish()&#123;&#125;</span><br><span class="line">    fish(<span class="keyword">int</span> a,<span class="keyword">int</span> b):a(a),b(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> fish &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;hs.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        priority_queue&lt;fish&gt;pq;</span><br><span class="line">        <span class="keyword">int</span> n,m,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            pq.push(fish(a,b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        fish now;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            now=pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            ans+=now.a;</span><br><span class="line">            now.a=max(<span class="number">0</span>,now.a-now.b);</span><br><span class="line">            pq.push(now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1271-Color"><a href="#1271-Color" class="headerlink" title="1271 Color"></a>1271 Color</h5><p>结论：n*m-(x的种类数)*(y的种类数)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        x.clear();</span><br><span class="line">        y.clear();</span><br><span class="line">        <span class="keyword">int</span> n,m,k,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            x.insert(a);</span><br><span class="line">            y.insert(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n*m-x.size()*y.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1163-ASCLL"><a href="#1163-ASCLL" class="headerlink" title="1163 ASCLL"></a>1163 ASCLL</h5><p>直接模拟，输出%05X和%02X即带前导0的十六进制，回车的ASCLL码也要输出，注意输出空格和回车的地方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar())&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> s+=ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lens=s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%05X "</span>,id++);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02X"</span>,(<span class="keyword">int</span>)s[i]);</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(i!=lens<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt!=<span class="number">16</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1243-Bob’s-Password"><a href="#1243-Bob’s-Password" class="headerlink" title="1243 Bob’s Password"></a>1243 Bob’s Password</h5><p>枚举九个数字会非法的情况即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a=s[i]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                vis[a]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((!vis[<span class="number">2</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'3'</span>)||(!vis[<span class="number">4</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'7'</span>)||(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'9'</span>))&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'8'</span>)&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((!vis[<span class="number">2</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'1'</span>)||(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'7'</span>)||(!vis[<span class="number">6</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'9'</span>))&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'6'</span>)&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'4'</span>)&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">7</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((!vis[<span class="number">4</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'1'</span>)||(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'3'</span>)||(!vis[<span class="number">8</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'9'</span>))&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">8</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'2'</span>)&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((!vis[<span class="number">5</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'1'</span>)||(!vis[<span class="number">6</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'3'</span>)||(!vis[<span class="number">8</span>]&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'7'</span>))&#123;</span><br><span class="line">                    ok=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[a]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span>   <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1246-Matrix-Transposition"><a href="#1246-Matrix-Transposition" class="headerlink" title="1246 Matrix Transposition"></a>1246 Matrix Transposition</h5><p>看半天题意，n,m没用，将输入的x看做y，输入的y看做x，反过来按y优先排序即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,v;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v):x(x),y(y),v(v)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(y!=b.y) <span class="keyword">return</span> y&lt;b.y;</span><br><span class="line">        <span class="keyword">return</span> x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">            p[i]=node(x,y,v);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p,p+k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,p[i].y,p[i].x,p[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1248-Alice-and-Bob"><a href="#1248-Alice-and-Bob" class="headerlink" title="1248 Alice and Bob"></a>1248 Alice and Bob</h5><p>直接模拟，将1作为数字7处理会很好写很多，注意求和依然是+1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnta[<span class="number">10</span>],cntb[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> suma,sumb;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnta[i]==<span class="number">3</span>)a=i;</span><br><span class="line">        <span class="keyword">if</span>(cntb[i]==<span class="number">3</span>)b=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a||b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&amp;&amp;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b) <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Draw"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b) <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,aa=<span class="number">0</span>,b=<span class="number">0</span>,bb=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnta[i]==<span class="number">2</span>)a=i;</span><br><span class="line">        <span class="keyword">if</span>(cntb[i]==<span class="number">2</span>)b=i;</span><br><span class="line">        <span class="keyword">if</span>(cnta[i]==<span class="number">1</span>)aa=i;</span><br><span class="line">        <span class="keyword">if</span>(cntb[i]==<span class="number">1</span>)bb=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a||b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&amp;&amp;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b) <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(aa&gt;bb) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(aa&lt;bb) <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Draw"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b) <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(suma&gt;sumb) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(suma&lt;sumb) <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Draw"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) cnta[i]=cntb[i]=<span class="number">0</span>;</span><br><span class="line">        suma=<span class="number">0</span>,sumb=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            suma+=x;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>) x=<span class="number">7</span>;</span><br><span class="line">            cnta[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            sumb+=x;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>) x=<span class="number">7</span>;</span><br><span class="line">            cntb[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pd1());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pd2());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pd3());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1251-Colombian-Number"><a href="#1251-Colombian-Number" class="headerlink" title="1251 Colombian Number"></a>1251 Colombian Number</h5><p>简单数学，注意到[1,1000000000]区间内数位和在[1,81]内，所以只需在区间[n-81,n]内枚举k看是否能使k+sum(k)==n成立即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        sum+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max(<span class="number">1</span>,n<span class="number">-100</span>);i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+calc(i)==n)&#123;</span><br><span class="line">                ok=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span>   <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1253-Robot"><a href="#1253-Robot" class="headerlink" title="1253 Robot"></a>1253 Robot</h5><p>贪心，如果在中途转弯肯定不如每次从头走到尾，可以证明最多转n-1次，时间复杂度O($n^2$)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> vis[maxn],a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i]&amp;&amp;cnt&gt;=a[i])&#123;</span><br><span class="line">                    vis[i]=<span class="number">1</span>;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt==n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> ans++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i]&amp;&amp;cnt&gt;=a[i])&#123;</span><br><span class="line">                    vis[i]=<span class="number">1</span>;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt==n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1252-Matrix-Word"><a href="#1252-Matrix-Word" class="headerlink" title="1252 Matrix Word"></a>1252 Matrix Word</h5><p>统计每个字符在每一行每一列的出现次数，最后判断是否都为1即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn][<span class="number">26</span>],y[maxn][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="keyword">sizeof</span>(x));</span><br><span class="line">        <span class="built_in">memset</span>(y,<span class="number">0</span>,<span class="keyword">sizeof</span>(y));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                x[i][s[i][j]-<span class="string">'a'</span>]++;</span><br><span class="line">                y[j][s[i][j]-<span class="string">'a'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x[i][s[i][j]-<span class="string">'a'</span>]==<span class="number">1</span> &amp;&amp; y[j][s[i][j]-<span class="string">'a'</span>]==<span class="number">1</span>) ans+=s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1261-Duplicate-Elements"><a href="#1261-Duplicate-Elements" class="headerlink" title="1261 Duplicate Elements"></a>1261 Duplicate Elements</h5><p>unordered_map或map或set记录每个值是否出现即可,当然也可以用其他的哈希方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        <span class="keyword">int</span> n;n=read();</span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;x=read();</span><br><span class="line">            <span class="keyword">if</span>(mp.find(x)==mp.end())&#123;</span><br><span class="line">                ans.push_back(x);</span><br><span class="line">                mp[x]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==ans.size()<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1263-矩形面积的并"><a href="#1263-矩形面积的并" class="headerlink" title="1263 矩形面积的并"></a>1263 矩形面积的并</h5><p>哪一年的蓝桥杯原题来着，求出相交矩形的边界,判掉不会相交的情况，在不知道位置相对位置的情况下计算面积注意取绝对值，面积并=两矩形面积和-两矩形面积交</p><p>l=max(min(x1,x2),min(x3,x4));<br>r=min(max(x1,x2),max(x3,x4));<br>d=max(min(y1,y2),min(y3,y4));<br>u=min(max(y1,y2),max(y3,y4));</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2,x3,y3,x4,y4,a,b,c,d;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;x3,&amp;y3,&amp;x4,&amp;y4))&#123;</span><br><span class="line">        a=max(min(x1,x2),min(x3,x4));</span><br><span class="line">        b=min(max(x1,x2),max(x3,x4));</span><br><span class="line">        c=max(min(y1,y2),min(y3,y4));</span><br><span class="line">        d=min(max(y1,y2),max(y3,y4));</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="built_in">abs</span>(x2-x1)*<span class="built_in">abs</span>(y2-y1)+<span class="built_in">abs</span>(x4-x3)*<span class="built_in">abs</span>(y4-y3);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=b||c&gt;=d) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum-(b-a)*(d-c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1268-鞍点"><a href="#1268-鞍点" class="headerlink" title="1268 鞍点"></a>1268 鞍点</h5><p>输入的时候就记录每行每列的最值即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> minx[maxn],miny[maxn],maxx[maxn],maxy[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ans</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,v;</span><br><span class="line">    Ans()&#123;&#125;</span><br><span class="line">    Ans(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v):x(x),y(y),v(v)&#123;&#125;</span><br><span class="line">&#125;ans[maxn*maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;n=read(),m=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) minx[i]=<span class="number">1001</span>,maxx[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) miny[j]=<span class="number">1001</span>,maxy[j]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                a[i][j]=read();</span><br><span class="line">                minx[i]=min(minx[i],a[i][j]);</span><br><span class="line">                miny[j]=min(miny[j],a[i][j]);</span><br><span class="line">                maxx[i]=max(maxx[i],a[i][j]);</span><br><span class="line">                maxy[j]=max(maxy[j],a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((a[i][j]==minx[i]&amp;&amp;a[i][j]==maxy[j])||(a[i][j]==maxx[i]&amp;&amp;a[i][j]==miny[j]))&#123;</span><br><span class="line">                    ans[cnt++]=Ans(i,j,a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cnt) <span class="built_in">puts</span>(<span class="string">"None"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,ans[i].x,ans[i].y,ans[i].v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1272-Robot"><a href="#1272-Robot" class="headerlink" title="1272 Robot"></a>1272 Robot</h5><p>统计L,R,U,D的个数，假定其中有一种没有，那么剩下三种中使多余的那一种变为另外两种的其中一种看是否这两种数目相等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char s[205];</span><br><span class="line">    int L,R,U,D;</span><br><span class="line">    while(~scanf(&quot;%s&quot;,s))&#123;</span><br><span class="line">        L=R=U=D=0;</span><br><span class="line">        int lens=strlen(s);</span><br><span class="line">        for(int i=0;i&lt;lens;i++)&#123;</span><br><span class="line">            if(s[i]==&apos;L&apos;) L++;</span><br><span class="line">            else if(s[i]==&apos;R&apos;) R++;</span><br><span class="line">            else if(s[i]==&apos;U&apos;) U++;</span><br><span class="line">            else D++;</span><br><span class="line">        &#125;</span><br><span class="line">        bool ok=false;</span><br><span class="line">        if(!L)&#123;</span><br><span class="line">            if(R+U==D||R+D==U) ok=true;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!R)&#123;</span><br><span class="line">            if(L+U==D||L+D==U) ok=true;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!U)&#123;</span><br><span class="line">            if(R+D==L||L+D==R) ok=true;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!D)&#123;</span><br><span class="line">            if(R+U==L||L+U==R) ok=true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(ok) puts(&quot;Yes&quot;);</span><br><span class="line">        else   puts(&quot;No&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1277-Tri-Triangle"><a href="#1277-Tri-Triangle" class="headerlink" title="1277 Tri-Triangle"></a>1277 Tri-Triangle</h5><p>找规律然后直接输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch)!=EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> n=ch-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> space=<span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=space;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=i;k++)     <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">64</span>+k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i<span class="number">-1</span>;k&gt;=<span class="number">1</span>;k--)   <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">64</span>+k);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            space--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        space=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=space;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=i;k++)     <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">64</span>+k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i<span class="number">-1</span>;k&gt;=<span class="number">1</span>;k--)   <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">64</span>+k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*space+<span class="number">1</span>;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=i;k++)       <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">64</span>+k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i<span class="number">-1</span>;k&gt;=<span class="number">1</span>;k--)     <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">64</span>+k);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            space--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1280-String-Hash"><a href="#1280-String-Hash" class="headerlink" title="1280 String Hash"></a>1280 String Hash</h5><p>就是26进制转10进制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>)) &#123;</span><br><span class="line">        s[<span class="number">0</span>]=<span class="string">'b'</span>;</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            ans=(ans*<span class="number">26</span>%P+(s[i]-<span class="string">'a'</span>))%P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1281-Cute-String"><a href="#1281-Cute-String" class="headerlink" title="1281 Cute String"></a>1281 Cute String</h5><p>输入用gets或者循环getchar()，跳过字符串首部空格后，统计中间空格个数便可知道单词个数，看空格个数是否&gt;9和字母种类个数&gt;10即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">205</span>],ch;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        s[cnt++]=ch;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar())&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">            s[cnt++]=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        s[cnt]=<span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">int</span> space=<span class="number">0</span>,lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">while</span>(s[p++]==<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">' '</span>) space++;</span><br><span class="line">            <span class="keyword">else</span>  mp[s[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp.size()&gt;<span class="number">10</span>||space&gt;<span class="number">9</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span>  <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1284-多项式"><a href="#1284-多项式" class="headerlink" title="1284 多项式"></a>1284 多项式</h5><p>直接求和，求和过程中取模</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans=(ans+a[i]*qpow(x,i,m)%m)%m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1286-比赛"><a href="#1286-比赛" class="headerlink" title="1286 比赛"></a>1286 比赛</h5><p>当时找的规律+猜结论？</p><p>好像是dp[i]表示冠军最多打i场需要的最多选手人数，那么容易退推出前几项dp[0]=1,dp[1]=2,dp[2]=4…</p><p>dp[i]=dp[i-1]+dp[i-2]+1，如果n&lt;=dp[i]，那么答案就是i</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line">ll f[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">85</span>;i++) f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>]+<span class="number">1</span>;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">85</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&lt;=f[i])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1291-Buying-Gifts"><a href="#1291-Buying-Gifts" class="headerlink" title="1291 Buying Gifts"></a>1291 Buying Gifts</h5><p>要想最大值和最小值相差最小，那么连续的m长连续段礼物价格序列是最有可能的</p><p>将价格升序排序后以长度m尺取找出最小价格差即可，由于排好序所以总和肯定取之前的更小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="keyword">int</span> d=inf,pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i+m<span class="number">-1</span>]-a[i]&lt;d)&#123;</span><br><span class="line">                d=a[i+m<span class="number">-1</span>]-a[i];</span><br><span class="line">                pos=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;=pos+m<span class="number">-1</span>;i++) sum+=a[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,d,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1292-Co-string"><a href="#1292-Co-string" class="headerlink" title="1292  Co-string"></a>1292  Co-string</h5><p>hash预处理+枚举最大长度或者暴力枚举左右端点+剪枝</p><p>看statu应该有更简单的解法（直接枚举最大可能长度，找到了就退出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> lens;</span><br><span class="line">ull base=<span class="number">233</span>;</span><br><span class="line">ull p[maxn],hs[maxn];</span><br><span class="line"><span class="function">ull <span class="title">geths</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ull)hs[r]-p[r-l+<span class="number">1</span>]*hs[l<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+<span class="number">2</span>*k<span class="number">-1</span>&lt;=lens;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(geths(i,i+k<span class="number">-1</span>)==geths(i+k,i+<span class="number">2</span>*k<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]*base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        lens=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lens;i++)&#123;</span><br><span class="line">            hs[i]=hs[i<span class="number">-1</span>]*base+s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lens/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pd(i))&#123;</span><br><span class="line">                ok=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i*<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1293-Diamond"><a href="#1293-Diamond" class="headerlink" title="1293 Diamond"></a>1293 Diamond</h5><p>找规律直接输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-i;j++)<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)  <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">65</span>+n-j);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">65</span>+n-i+j);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-i;j++)<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)  <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">65</span>+n-j);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">65</span>+n-i+j);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1294-Enquiry"><a href="#1294-Enquiry" class="headerlink" title="1294 Enquiry"></a>1294 Enquiry</h5><p>维护一个前缀和,sum[i]表示1…i有多少男女相邻的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),cnt=<span class="number">0</span>;</span><br><span class="line">        sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;lens; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]!=s[i<span class="number">-1</span>]) cnt++;</span><br><span class="line">            sum[i]=cnt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum[r<span class="number">-1</span>]-sum[l<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1296-GCD"><a href="#1296-GCD" class="headerlink" title="1296 GCD"></a>1296 GCD</h5><p>容斥，与6互素就不会有和6一样的因子2,3，所以[l,r]区间的数减去2和3的倍数再加上6的倍数(计算2和3的倍数时多减了一次)即为答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">int</span> cnt2=r/<span class="number">2</span>-(l<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt3=r/<span class="number">3</span>-(l<span class="number">-1</span>)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt6=r/<span class="number">6</span>-(l<span class="number">-1</span>)/<span class="number">6</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r-l+<span class="number">1</span>-cnt2-cnt3+cnt6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1299-String"><a href="#1299-String" class="headerlink" title="1299 String"></a>1299 String</h5><p>按题意模拟即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))&#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),step=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,op)&amp;&amp;<span class="built_in">strcmp</span>(op,<span class="string">"END"</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'S'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> l,r;<span class="keyword">char</span> ch[<span class="number">5</span>];</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>,&amp;l,&amp;r,ch);l--,r--;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) s[i]=ch[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">char</span> ss[<span class="number">5</span>],tt[<span class="number">5</span>];</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,ss,tt);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++) <span class="keyword">if</span>(s[i]==ss[<span class="number">0</span>]) s[i]=tt[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d:%s\n"</span>,++step,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1300-Dice"><a href="#1300-Dice" class="headerlink" title="1300 Dice"></a>1300 Dice</h5><p>按题意模拟即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> n,m,k,cnt[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++) cnt[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) cnt[s[i]-<span class="string">'0'</span>]++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">            <span class="keyword">int</span> num=cnt[k];</span><br><span class="line">            <span class="keyword">if</span>(k!=<span class="number">1</span>) num+=cnt[<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d:%s\n"</span>,i,num&gt;=n?<span class="string">"true"</span>:<span class="string">"false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1301-Zeroes"><a href="#1301-Zeroes" class="headerlink" title="1301 Zeroes"></a>1301 Zeroes</h5><p>按题意模拟循环1000次即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">bool</span> ok;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1000</span>;k++)&#123;</span><br><span class="line">            ok=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]) ok=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp=a[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                a[i]=<span class="built_in">abs</span>(a[i]-a[i+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            a[n<span class="number">-1</span>]=<span class="built_in">abs</span>(a[n<span class="number">-1</span>]-tmp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1305-斐波那契区间"><a href="#1305-斐波那契区间" class="headerlink" title="1305 斐波那契区间"></a>1305 斐波那契区间</h5><p>直接扫描一遍即可，注意防止越界，如果中途a[i]+a[i+1]!=a[i+2],那么左端点起点重新从i+1开始</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+<span class="number">2</span>&lt;n&amp;&amp;a[i]+a[i+<span class="number">1</span>]==a[i+<span class="number">2</span>])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;ans) ans=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1308-比赛"><a href="#1308-比赛" class="headerlink" title="1308 比赛"></a>1308 比赛</h5><p>按题意模拟计算即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> rounds=<span class="number">0</span>,fields=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span>(k&lt;=n) k*=<span class="number">2</span>;</span><br><span class="line">            k/=<span class="number">2</span>;</span><br><span class="line">            fields+=k/<span class="number">2</span>;</span><br><span class="line">            rounds++;</span><br><span class="line">            n-=k/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,rounds,fields);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1239-2048"><a href="#1239-2048" class="headerlink" title="1239 2048"></a>1239 2048</h5><p>巨恶心的大模拟，建议直接写相关函数每次调用，方便调试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>],tmp[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gatherL</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[k][j]) tmp[++cnt]=a[k][j];</span><br><span class="line">        a[k][j]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) a[k][i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gatherR</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">4</span>;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[k][j]) tmp[cnt--]=a[k][j];</span><br><span class="line">        a[k][j]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&gt;cnt;i--) a[k][i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gatherU</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i][k]) tmp[++cnt]=a[i][k];</span><br><span class="line">        a[i][k]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) a[i][k]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gatherD</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i][k]) tmp[cnt--]=a[i][k];</span><br><span class="line">        a[i][k]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&gt;cnt;i--) a[i][k]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LEFT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        gatherL(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i][j+<span class="number">1</span>])&#123;</span><br><span class="line">                a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                a[i][j+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">                gatherL(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RIGHT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        gatherR(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">4</span>;j&gt;=<span class="number">2</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i][j<span class="number">-1</span>])&#123;</span><br><span class="line">                a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                a[i][j<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">                gatherR(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line">        gatherU(j);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i+<span class="number">1</span>][j])&#123;</span><br><span class="line">                a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                a[i+<span class="number">1</span>][j]=<span class="number">0</span>;</span><br><span class="line">                gatherU(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DOWN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line">        gatherD(j);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">                a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                a[i<span class="number">-1</span>][j]=<span class="number">0</span>;</span><br><span class="line">                gatherD(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'L'</span>) LEFT();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'R'</span>) RIGHT();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'U'</span>) UP();</span><br><span class="line">        <span class="keyword">else</span> DOWN();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i][j],j==<span class="number">4</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1264-字符不重复子串"><a href="#1264-字符不重复子串" class="headerlink" title="1264 字符不重复子串"></a>1264 字符不重复子串</h5><p>如果是简单的求长度就直接用两个指针+标记数组做就好了，有点像滑动窗口</p><p>这里要用动态规划，pre[s[i]]为前一个s[i]的位置，f[i]表示以s[i]结尾的最长不重复子串长度</p><p>那么对于s[i]有两种情况，一是s[i]在前面未出现，那么f[i]=f[i-1]+1；二是前面已经出现了s[i]，如果控制的区间左端点l在pre[s[i]]前面，说明当前控制的区间中有部分要跳过，f[i]=i-pre[s[i]]，区间要缩小，否则依然是f[i]=f[i-1]+1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">26</span>],f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) pre[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>,lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">        pre[s[<span class="number">0</span>]-<span class="string">'a'</span>]=<span class="number">0</span>;</span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ch=s[i]-<span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(pre[ch]==<span class="number">-1</span>) f[i]=f[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(l&lt;=pre[ch])&#123;</span><br><span class="line">                    f[i]=i-pre[ch];</span><br><span class="line">                    l=pre[ch]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    f[i]=f[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre[s[i]-<span class="string">'a'</span>]=i;</span><br><span class="line">            ans=max(ans,f[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> ss=s;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;anss;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i]==ans)&#123;</span><br><span class="line">                anss.insert(ss.substr(i-ans+<span class="number">1</span>,ans));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator it=anss.begin();it!=anss.end();it++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1273-Set"><a href="#1273-Set" class="headerlink" title="1273 Set"></a>1273 Set</h5><p>用set或map或其他容器等统计数字种类数，种类数&lt;=3肯定可以，&gt;4肯定不行，==4特判一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;read(x);</span><br><span class="line">            v.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v.begin(),v.end());</span><br><span class="line">        v.erase(unique(v.begin(),v.end()),v.end());</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(v.size()&lt;=<span class="number">3</span>) ok=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v.size()&gt;<span class="number">4</span>) ok=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[<span class="number">0</span>]+v[<span class="number">1</span>]==v[<span class="number">2</span>]+v[<span class="number">3</span>]||v[<span class="number">0</span>]+v[<span class="number">2</span>]==v[<span class="number">1</span>]+v[<span class="number">3</span>]||v[<span class="number">0</span>]+v[<span class="number">3</span>]==v[<span class="number">1</span>]+v[<span class="number">2</span>]) ok=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span>   <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1274-Matrix"><a href="#1274-Matrix" class="headerlink" title="1274 Matrix"></a>1274 Matrix</h5><p>很容易看出规律$ans=1+2^2+2^2+1+4^2+4^2+1+…+(2n)^2+(2n)^2+1$</p><p>由于$1^2+2^2+3^2+…+n^2=n(n+1)(2n+1)/6$</p><p>可以推出$2^2+4^2+6^2+…+(2n)^2=2n(n+1)(2n+1)/3$</p><p>因为答案要取模,又因为公式中有除法需用到数论中逆元的知识解决，即(a/b)%p=a*(b^(p-2))%p，p为素数</p><p>当然也可以直接上Java大数，最终结果再取模</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qmul</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res+a%p;</span><br><span class="line">        a=a+a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        ll num1=(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        ll m=n/<span class="number">2</span>;</span><br><span class="line">        ll ans=(num1+(<span class="number">4</span>*(m*(m+<span class="number">1</span>)%P*(<span class="number">2</span>*m+<span class="number">1</span>)%P)%P)*qpow(<span class="number">3</span>,P<span class="number">-2</span>,P)%P)%P;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) ans-=qmul(n,n,P);</span><br><span class="line">        <span class="keyword">while</span>(ans&lt;<span class="number">0</span>) ans+=P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1275-Exam-Schedule"><a href="#1275-Exam-Schedule" class="headerlink" title="1275 Exam Schedule"></a>1275 Exam Schedule</h5><p>直接模拟</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> sche[<span class="number">10</span>][<span class="number">20</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ans</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d,s,t;</span><br><span class="line">&#125;ans[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> table[<span class="number">5</span>][<span class="number">10</span>]=&#123;<span class="string">"Mon"</span>,<span class="string">"Tue"</span>,<span class="string">"Wen"</span>,<span class="string">"Thur"</span>,<span class="string">"Fri"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> d,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sche[d][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sche,<span class="number">0</span>,<span class="keyword">sizeof</span>(sche));</span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> day[<span class="number">5</span>];<span class="keyword">int</span> s,t;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,day,&amp;s,&amp;t);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(day,<span class="string">"Mon"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++) sche[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(day,<span class="string">"Tue"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++) sche[<span class="number">2</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(day,<span class="string">"Wen"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++) sche[<span class="number">3</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(day,<span class="string">"Thur"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++) sche[<span class="number">4</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(day,<span class="string">"Fri"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++) sche[<span class="number">5</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=<span class="number">5</span>;d++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">4</span>-i+<span class="number">1</span>&gt;=k&amp;&amp;pd(d,i,i+k<span class="number">-1</span>))&#123;</span><br><span class="line">                    ans[cnt].d=d<span class="number">-1</span>;</span><br><span class="line">                    ans[cnt].s=i;</span><br><span class="line">                    ans[cnt].t=i+k<span class="number">-1</span>;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">8</span>-i+<span class="number">1</span>&gt;=k&amp;&amp;pd(d,i,i+k<span class="number">-1</span>))&#123;</span><br><span class="line">                    ans[cnt].d=d<span class="number">-1</span>;</span><br><span class="line">                    ans[cnt].s=i;</span><br><span class="line">                    ans[cnt].t=i+k<span class="number">-1</span>;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&lt;=<span class="number">11</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">11</span>-i+<span class="number">1</span>&gt;=k&amp;&amp;pd(d,i,i+k<span class="number">-1</span>))&#123;</span><br><span class="line">                    ans[cnt].d=d<span class="number">-1</span>;</span><br><span class="line">                    ans[cnt].s=i;</span><br><span class="line">                    ans[cnt].t=i+k<span class="number">-1</span>;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>,table[ans[i].d],ans[i].s,ans[i].t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1170-ICPC"><a href="#1170-ICPC" class="headerlink" title="1170 ICPC"></a>1170 ICPC</h5><p>统计每列的最高等级和所有列最高等级的出现次数即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">3</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">5</span>],Min[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) cnt[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            Min[j]=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                Min[j]=min(Min[j],s[i][j]-<span class="string">'A'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Min[j]==i) cnt[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) <span class="built_in">printf</span>(<span class="string">"%c"</span>,Min[j]+<span class="string">'A'</span>);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,cnt[i],i==<span class="number">4</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1241-Permutation"><a href="#1241-Permutation" class="headerlink" title="1241 Permutation"></a>1241 Permutation</h5><p>首先先学习一下置换的定义和置换乘法的性质，离散数学刘任任版P190</p><p>其实就是要通过不断映射使得序列回到初始序列</p><p>如果暴力模拟，可能会卡成O(n!)的复杂度，即全排列的情况</p><p>其实只需要计算对每一个数使a[i]变为i的次数，然后计算所有次数的最小公倍数即为答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">1</span>,p=a[i];</span><br><span class="line">            <span class="keyword">while</span>(p!=i)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                p=a[p];</span><br><span class="line">            &#125;</span><br><span class="line">            ans=ans/__gcd(ans,cnt)*cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1249-Alice’s-Prime"><a href="#1249-Alice’s-Prime" class="headerlink" title="1249 Alice’s Prime"></a>1249 Alice’s Prime</h5><p>首先一位的素数只有2,3,5,7，然后dfs将这四个数后面不断添加1,3,5,7,9再判断素数，最后排个序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;INT_MAX) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pd(x*<span class="number">10</span>+i))&#123;</span><br><span class="line">            ans.push_back(x*<span class="number">10</span>+i);</span><br><span class="line">            dfs(x*<span class="number">10</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans.push_back(<span class="number">2</span>);</span><br><span class="line">    ans.push_back(<span class="number">3</span>);</span><br><span class="line">    ans.push_back(<span class="number">5</span>);</span><br><span class="line">    ans.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        dfs(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans.begin(),ans.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i+<span class="number">1</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1266-RGB"><a href="#1266-RGB" class="headerlink" title="1266 RGB"></a>1266 RGB</h5><p>统计R,G,B的出现次数，在0…R-1统计G,B的出现次数，记为R1,R2，在R…R+G-1统计R,B的出现次数，记为G1,G2，在R+G…lens-1统计R,G的出现次数，记为B1,B2</p><p>那么首先肯定是两个两个区间互相交换，R1,G1交换，R2,B1交换和G2,B2交换，有可能交换不完，成为0…R-1还有’G’，R…R+G-1还有’B’，R+G…lens-1还有’R’的情况，那对于每个未交换字符的需要交换2次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))&#123;</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> R=<span class="number">0</span>,G=<span class="number">0</span>,B=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'R'</span>) R++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) G++;</span><br><span class="line">            <span class="keyword">else</span> B++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> R1=<span class="number">0</span>,R2=<span class="number">0</span>;  <span class="comment">//0...R-1 G,B</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;R;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) R1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'B'</span>)R2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> G1=<span class="number">0</span>,G2=<span class="number">0</span>;  <span class="comment">//R...R+G-1 R,B</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;R+G;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'R'</span>) G1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'B'</span>) G2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> B1=<span class="number">0</span>,B2=<span class="number">0</span>;  <span class="comment">//R+G...lens-1 R,G</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R+G;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'R'</span>) B1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) B2++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(R1&amp;&amp;G1)&#123;</span><br><span class="line">            tmp=min(R1,G1);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">            R1-=tmp;</span><br><span class="line">            G1-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(R2&amp;&amp;B1)&#123;</span><br><span class="line">            tmp=min(R2,B1);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">            R2-=tmp;</span><br><span class="line">            B1-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(G2&amp;&amp;B2)&#123;</span><br><span class="line">            tmp=min(G2,B2);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">            G2-=tmp;</span><br><span class="line">            B2-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=(R1+R2+G1+G2+B1+B2)/<span class="number">3</span>*<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1267-Matrix"><a href="#1267-Matrix" class="headerlink" title="1267 Matrix"></a>1267 Matrix</h5><p>直接模拟</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],b[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapx</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) tmp[i]=a[x][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[x][i]=a[y][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[y][i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) tmp[i]=a[i][x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i][x]=a[i][y];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i][y]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,op))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"IN"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                    a[i][j]=++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"SR"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            swapx(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"SC"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            swapy(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"TR"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                    b[j][i]=a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(n,m);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                    a[i][j]=b[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"FR"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=n;i&lt;=n/<span class="number">2</span>;i++,j--)&#123;</span><br><span class="line">                swapx(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"FC"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=m;i&lt;=m/<span class="number">2</span>;i++,j--)&#123;</span><br><span class="line">                swapy(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op,<span class="string">"PR"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i][j],j==m?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1279-Dual-Prime"><a href="#1279-Dual-Prime" class="headerlink" title="1279 Dual Prime"></a>1279 Dual Prime</h5><p>素数打表，1e6以内最多不到1e5个素数，然后枚举任意两个不同的素数，弄个前缀和维护1..i 内符合条件的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn],sum[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp,<span class="literal">true</span>,<span class="keyword">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">0</span>]=isp[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    isp[<span class="number">2</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i]) p[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;p[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">            isp[p[j]*i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getsum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(p[i]*p[j]&lt;maxn) sum[p[i]*p[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    getprime();</span><br><span class="line">    getsum();</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum[r]-sum[l<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1283-Good-Number"><a href="#1283-Good-Number" class="headerlink" title="1283 Good Number"></a>1283 Good Number</h5><p>首先n位数第一位必须是1，满足条件只需要n-1个数中的1的个数&gt;=0的个数，那么对n-1分奇偶谈论</p><p>n-1为奇，$ans=C_{n-1}^{n/2}+C_{n-1}^{n/2+1}+…+C_{n-1}^{n-1}$</p><p>n-1为偶，$ans=C_{n-1}^{n-1/2}+C_{n-1}^{n-1/2+1}+…+C_{n-1}^{n-1}$</p><p>n==1特判下，组合数用杨辉三角打表就好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ll C[<span class="number">70</span>][<span class="number">70</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">65</span>;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    getC();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n<span class="number">-1</span>%<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                ans+=C[n<span class="number">-1</span>][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=(n<span class="number">-1</span>)/<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                ans+=C[n<span class="number">-1</span>][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1287-银行"><a href="#1287-银行" class="headerlink" title="1287 银行"></a>1287 银行</h5><p>因为所有业务在当天，则可以把时间化为分钟数，然后枚举一天的所有分钟24*60=1440</p><p>对于每一分钟，如果有新的用户来了，则加入优先队列；如果过了上一个业务办理的时间，把队列中等待超时的出队列，然后队列中选一个优先级最高的业务开始处理</p><p>每个业务的等待时间：超时的就是最大等待时间，没超时的就是当前处理时间-业务开始时间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> i,s,t,d,ans;</span><br><span class="line">    <span class="keyword">bool</span> done;</span><br><span class="line">    user()&#123;&#125;</span><br><span class="line">    user(<span class="built_in">string</span> id,<span class="keyword">int</span> i,<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> d,<span class="keyword">bool</span> done):id(id),i(i),s(s),t(t),d(d),done(done)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> user &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(id[<span class="number">0</span>]!=hs.id[<span class="number">0</span>]) <span class="keyword">return</span> id[<span class="number">0</span>]!=<span class="string">'V'</span>;</span><br><span class="line">       <span class="keyword">return</span> s&gt;hs.s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> h,m,t,d,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%d:%d%d%d"</span>,id,&amp;h,&amp;m,&amp;t,&amp;d))&#123;</span><br><span class="line">        p[cnt]=user(id,cnt,h*<span class="number">60</span>+m,t,d,<span class="literal">false</span>);</span><br><span class="line">        p[cnt].ans=p[cnt].d;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nowtime=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;user&gt;pq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1440</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;cnt&amp;&amp;i&gt;=p[k].s)&#123;</span><br><span class="line">            pq.push(p[k++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=nowtime)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!pq.empty()&amp;&amp;pq.top().s+pq.top().d&lt;nowtime) pq.pop();</span><br><span class="line">            <span class="keyword">if</span>(!pq.empty())&#123;</span><br><span class="line">                user tmp=pq.top();</span><br><span class="line">                pq.pop();</span><br><span class="line">                p[tmp.i].done=<span class="literal">true</span>;</span><br><span class="line">                p[tmp.i].ans=i-tmp.s;</span><br><span class="line">                nowtime=i+tmp.t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p[i].id&lt;&lt;<span class="string">' '</span>&lt;&lt;p[i].ans&lt;&lt;<span class="string">' '</span>&lt;&lt;(p[i].done?<span class="string">"Yes"</span>:<span class="string">"No"</span>)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1295-Flawless-Prime"><a href="#1295-Flawless-Prime" class="headerlink" title="1295 Flawless Prime"></a>1295 Flawless Prime</h5><p>首先判断数位是否有0，存在0肯定不是，然后依次去掉最高位暴力判断是否为素数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has0</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res++;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isprime(x)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=len(x);</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++) tmp*=<span class="number">10</span>;</span><br><span class="line">        x%=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(has0(n) || !pd(n)) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1297-Homework"><a href="#1297-Homework" class="headerlink" title="1297 Homework"></a>1297 Homework</h5><p>发现与题目号无关，只需要通过学号和排名的关系来用map记录对应学号的积分，最后算出成绩排个序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sid,grade;</span><br><span class="line">    stu()&#123;&#125;</span><br><span class="line">    stu(<span class="keyword">int</span> a,<span class="keyword">int</span> b):sid(a),grade(b)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> stu &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grade==b.grade) <span class="keyword">return</span> sid&lt;b.sid;</span><br><span class="line">        <span class="keyword">return</span> grade&gt;b.grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid,sid,prank;</span><br><span class="line">    <span class="keyword">int</span> MaxS=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;pid,&amp;sid,&amp;prank))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>&lt;=prank&amp;&amp;prank&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[sid]+=<span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">13</span>&lt;=prank&amp;&amp;prank&lt;=<span class="number">24</span>)&#123;</span><br><span class="line">            mp[sid]+=<span class="number">16</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">25</span>&lt;=prank&amp;&amp;prank&lt;=<span class="number">48</span>)&#123;</span><br><span class="line">            mp[sid]+=<span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">49</span>&lt;=prank&amp;&amp;prank&lt;=<span class="number">96</span>)&#123;</span><br><span class="line">            mp[sid]+=<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">97</span>&lt;=prank&amp;&amp;prank&lt;=<span class="number">192</span>)&#123;</span><br><span class="line">            mp[sid]+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            mp[sid]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        MaxS=max(MaxS,mp[sid]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it=mp.begin();it!=mp.end();it++)&#123;</span><br><span class="line">        s[cnt++]=stu(it-&gt;first,round(<span class="number">100</span>+<span class="number">10</span>*<span class="built_in">log</span>(it-&gt;second*<span class="number">1.0</span>/MaxS)));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(s,s+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,s[i].sid,s[i].grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1304-ZUMA"><a href="#1304-ZUMA" class="headerlink" title="1304 ZUMA!"></a>1304 ZUMA!</h5><p>模拟把c放到第i个和第i+1个之间后的结果，然后答案取最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n,c;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> tmp[maxn],a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=b[i];</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i=x,j=x+<span class="number">1</span>,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;a[i]==c)&#123;</span><br><span class="line">        i--;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n&amp;&amp;a[j]==c)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=i;k++) tmp[p++]=a[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;n;k++) tmp[p++]=a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++) a[i]=tmp[i];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> pp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+<span class="number">1</span>&lt;p&amp;&amp;a[i]==a[i+<span class="number">1</span>])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i-cnt+<span class="number">1</span>;k&lt;=i;k++) tmp[pp++]=a[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pp==p) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pp;i++) a[i]=tmp[i];</span><br><span class="line">        p=pp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n-p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            ans=max(ans,func(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1307-Beautiful-Number"><a href="#1307-Beautiful-Number" class="headerlink" title="1307 Beautiful Number"></a>1307 Beautiful Number</h5><p>二进制枚举0的位置和二进制串的长度，对于64位整数第63位是符号位，唯一的0前面必须有1，不然就会成为前导0，如果0…61个位置中的第i个位置为0，那么len…i+1的位置为1，i-1…0的位置也为1， 计算出所有这样的数后排序，求答案每次遍历即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt;v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">62</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">62</span>;len&gt;=i+<span class="number">1</span>;len--)&#123;</span><br><span class="line">            ll res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=len;j&gt;=i+<span class="number">1</span>;j--)&#123;</span><br><span class="line">                res=res*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res*=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                res=res*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v.push_back(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.end());</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        ll l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;=v[i]&amp;&amp;v[i]&lt;=r) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(v[i]&gt;r) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1309-唯一的子串"><a href="#1309-唯一的子串" class="headerlink" title="1309 唯一的子串"></a>1309 唯一的子串</h5><p>枚举左端点取出子串丢到set或map中去重，自动排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m;<span class="keyword">char</span> str[<span class="number">105</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;m,str);</span><br><span class="line">        <span class="built_in">string</span> s=str;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+m<span class="number">-1</span>&lt;s.length();i++)&#123;</span><br><span class="line">            mp.insert(&#123;s.substr(i,m),<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it=mp.begin();it!=mp.end();it++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1270-Unique-Digit-Number"><a href="#1270-Unique-Digit-Number" class="headerlink" title="1270 Unique Digit Number"></a>1270 Unique Digit Number</h5><p>看top应该可以推公式，根据排列组合可以算出位数为1…10的符合条件数的个数…然后不会了</p><p>只会暴力dfs打表，根据位数打表就可以确保大小顺序，然后注意0不能作为前导</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">9e6</span>+<span class="number">5</span>;</span><br><span class="line">ll ans[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt,vis[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll x,<span class="keyword">int</span> k,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==len)&#123;</span><br><span class="line">        ans[++cnt]=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;k&gt;<span class="number">0</span>&amp;&amp;!vis[<span class="number">0</span>])&#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            dfs(x*<span class="number">10</span>+i,k+<span class="number">1</span>,len);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;&amp;!vis[i])&#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            dfs(x*<span class="number">10</span>+i,k+<span class="number">1</span>,len);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans[++cnt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;=<span class="number">10</span>;len++)&#123;</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1289-3的倍数"><a href="#1289-3的倍数" class="headerlink" title="1289 3的倍数"></a>1289 3的倍数</h5><p>一道神奇的动态规划，输入为s[]字符串数组，能被3整除说明新的数的数位和%3=0</p><p>f[i][j]表示以s[i]为前导的所有新正整数数中 %3==j 的种类数</p><p>对于s[i]分数码%3=0,1,2的3种情况讨论，且对于每个s[i]又分取和不取2种情况，这样f[i]可由f[i+1]递推而来，最后f[0][0]是包含所有s[i]为前导的数%3=0的种类数，此时答案包含前导0的情况</p><p>因为不能有前导0，所以去掉所有以s[i]==0为前导的的种类数，就是f[0][0]-(f[i+1][0]+1)，即当前位是0，后面符合条件共有f[i+1][0]种，然后后面全部不选，只选0也满足，所以减掉f[i+1]+1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))&#123;</span><br><span class="line">        <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">        f[lens][<span class="number">0</span>]=f[lens][<span class="number">1</span>]=f[lens][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lens<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=(s[i]-<span class="string">'0'</span>)%<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">                f[i][<span class="number">0</span>]=(f[i+<span class="number">1</span>][<span class="number">0</span>]+f[i+<span class="number">1</span>][<span class="number">0</span>]+<span class="number">1</span>)%P;</span><br><span class="line">                f[i][<span class="number">1</span>]=(f[i+<span class="number">1</span>][<span class="number">1</span>]+f[i+<span class="number">1</span>][<span class="number">1</span>])%P;</span><br><span class="line">                f[i][<span class="number">2</span>]=(f[i+<span class="number">1</span>][<span class="number">2</span>]+f[i+<span class="number">1</span>][<span class="number">2</span>])%P;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">                f[i][<span class="number">0</span>]=(f[i+<span class="number">1</span>][<span class="number">0</span>]+f[i+<span class="number">1</span>][<span class="number">2</span>])%P;</span><br><span class="line">                f[i][<span class="number">1</span>]=(f[i+<span class="number">1</span>][<span class="number">1</span>]+f[i+<span class="number">1</span>][<span class="number">0</span>]+<span class="number">1</span>)%P;</span><br><span class="line">                f[i][<span class="number">2</span>]=(f[i+<span class="number">1</span>][<span class="number">2</span>]+f[i+<span class="number">1</span>][<span class="number">1</span>])%P;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i][<span class="number">0</span>]=(f[i+<span class="number">1</span>][<span class="number">0</span>]+f[i+<span class="number">1</span>][<span class="number">1</span>])%P;</span><br><span class="line">                f[i][<span class="number">1</span>]=(f[i+<span class="number">1</span>][<span class="number">1</span>]+f[i+<span class="number">1</span>][<span class="number">2</span>])%P;</span><br><span class="line">                f[i][<span class="number">2</span>]=(f[i+<span class="number">1</span>][<span class="number">2</span>]+f[i+<span class="number">1</span>][<span class="number">0</span>]+<span class="number">1</span>)%P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=f[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>) ans=(ans-(f[i+<span class="number">1</span>][<span class="number">0</span>]+<span class="number">1</span>))%P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ans&lt;<span class="number">0</span>) ans+=P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1303-Sequence"><a href="#1303-Sequence" class="headerlink" title="1303 Sequence"></a>1303 Sequence</h5><p>乍一看以为是贪心，每次取较大的一端，其实这样有问题</p><p>记忆化搜索（备忘录），直接深搜的话对于当前长度都有两个选择，要么取左端点要么取右端点，时间复杂度O($2^n$)</p><p>ans[l][r]表示区间l,r的最优解，回溯的时候如果已经求出了子区间的，直接返回对应值即可，不必重复计算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">65</span>;</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line">ll ans[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ans[l][r]) <span class="keyword">return</span> ans[l][r];</span><br><span class="line">    <span class="keyword">return</span> ans[l][r]=min(a[l]*b[k<span class="number">-1</span>]+dfs(l+<span class="number">1</span>,r,k+<span class="number">1</span>),a[r]*b[k<span class="number">-1</span>]+dfs(l,r<span class="number">-1</span>,k+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    b[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">60</span>;i++) b[i]=b[i<span class="number">-1</span>]*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,dfs(<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1244-Estrella’s-Chocolate"><a href="#1244-Estrella’s-Chocolate" class="headerlink" title="1244 Estrella’s Chocolate"></a>1244 Estrella’s Chocolate</h5><p>求最小的最大值，二分最大热量</p><p>以当前最大热量值吃完所有巧克力所需天数&gt;m，说明最大热量需要再大一些，左指针右移；反过来同理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> day=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum+a[i]&lt;=x) sum+=a[i];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            day++;</span><br><span class="line">            sum=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> day&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=*max_element(a,a+n),r=<span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pd(mid)) r=mid;</span><br><span class="line">            <span class="keyword">else</span>        l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1269-Craftman"><a href="#1269-Craftman" class="headerlink" title="1269 Craftman"></a>1269 Craftman</h5><p>求制作手套最大值，二分手套件数</p><p>如果制作当前x件所需多余原料数&gt;k，说明原材料不够，右指针左移；反过来同理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll need=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        need+=(x*a[i]-b[i]&gt;<span class="number">0</span>?x*a[i]-b[i]:<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> need&lt;=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;b[i]);</span><br><span class="line">        ll l=<span class="number">0</span>,r=*max_element(b,b+n)+k;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            ll mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pd(mid)) l=mid;</span><br><span class="line">            <span class="keyword">else</span>        r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1167-逆序数（大数据）"><a href="#1167-逆序数（大数据）" class="headerlink" title="1167 逆序数（大数据）"></a>1167 逆序数（大数据）</h5><p>既然是大数据，暴力O($n^2$)肯定T</p><p>树状数组或者归并排序O(nlogn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">        c[x]+=v;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res+=c[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b,b+n);</span><br><span class="line">        <span class="keyword">int</span> m=unique(b,b+n)-b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            a[i]=lower_bound(b,b+m,a[i])-b+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            ans+=sum(a[i]<span class="number">-1</span>);</span><br><span class="line">            add(a[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1160-猜数字"><a href="#1160-猜数字" class="headerlink" title="1160 猜数字"></a>1160 猜数字</h5><p>需要满足所有的k个条件，则需要把询问存起来离线操作，然后枚举$C_n^4$个的所有组合，回溯法或者直接枚举，对于每个组合看是否满足这k个询问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line"><span class="keyword">int</span> x[maxk],y[maxk];</span><br><span class="line"><span class="keyword">int</span> a[maxk][<span class="number">5</span>],b[<span class="number">5</span>],vis[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;K;k++)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx=<span class="number">0</span>,yy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j&amp;&amp;a[k][i]==b[j]) xx++;</span><br><span class="line">                <span class="keyword">if</span>(i!=j&amp;&amp;a[k][i]==b[j]) yy++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x[k]!=xx||y[k]!=yy)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pd())&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,b[<span class="number">0</span>],b[<span class="number">1</span>],b[<span class="number">2</span>],b[<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            b[k]=i;</span><br><span class="line">            dfs(k+<span class="number">1</span>);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n=read())&#123;</span><br><span class="line">        K=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) a[i][j]=read();</span><br><span class="line">            x[i]=read(),y[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line"><span class="keyword">int</span> x[maxk],y[maxk];</span><br><span class="line"><span class="keyword">int</span> a[maxk][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans[maxn][<span class="number">5</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;K;k++)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx=<span class="number">0</span>,yy=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j&amp;&amp;a[k][i]==b[j]) xx++;</span><br><span class="line">                <span class="keyword">if</span>(i!=j&amp;&amp;a[k][i]==b[j]) yy++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x[k]!=xx||y[k]!=yy)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n=read())&#123;</span><br><span class="line">        K=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) a[i][j]=read();</span><br><span class="line">            x[i]=read(),y[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;l++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(i==j||i==k||i==l||j==k||j==l||k==l) <span class="keyword">continue</span>;</span><br><span class="line">                        b[<span class="number">0</span>]=i,b[<span class="number">1</span>]=j,b[<span class="number">2</span>]=k,b[<span class="number">3</span>]=l;</span><br><span class="line">                        <span class="keyword">if</span>(pd(b))&#123;</span><br><span class="line">                            ans[cnt][<span class="number">0</span>]=i,ans[cnt][<span class="number">1</span>]=j,ans[cnt][<span class="number">2</span>]=k,ans[cnt][<span class="number">3</span>]=l;</span><br><span class="line">                            cnt++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,ans[i][<span class="number">0</span>],ans[i][<span class="number">1</span>],ans[i][<span class="number">2</span>],ans[i][<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1179-Shortest-Path"><a href="#1179-Shortest-Path" class="headerlink" title="1179 Shortest Path"></a>1179 Shortest Path</h5><p>Dijkstra求k+1次最短路然后求和，注意指定的城市只能走一次，所以跑Dij的时候需要稍稍标记即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> city[<span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,id;</span><br><span class="line">    node(<span class="keyword">int</span> id,<span class="keyword">int</span> val):id(id),val(val) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val&gt;hs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to,w;</span><br><span class="line">&#125;e[maxm*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++cnt]=edge&#123;head[u],v,w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn],vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k+<span class="number">1</span>;i++) vis[city[i]]=<span class="literal">true</span>;</span><br><span class="line">    vis[from]=vis[to]=<span class="literal">false</span>;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(from,<span class="number">0</span>));</span><br><span class="line">    dis[from]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur=q.top().id;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[cur])<span class="keyword">continue</span>;</span><br><span class="line">        vis[cur]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[cur]; i ; i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[cur]+e[i].w &lt; dis[v])&#123;</span><br><span class="line">                dis[v]=dis[cur]+e[i].w;</span><br><span class="line">                q.push(node(v,dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k)&amp;&amp;(n||m||k))&#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">            addedge(u,v,w);</span><br><span class="line">            addedge(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        city[<span class="number">0</span>]=<span class="number">1</span>;city[k+<span class="number">1</span>]=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            city[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            dijkstra(city[i],city[i+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(dis[city[i+<span class="number">1</span>]]==INF)&#123;</span><br><span class="line">                ok=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=dis[city[i+<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1186-Tourist-2"><a href="#1186-Tourist-2" class="headerlink" title="1186 Tourist 2"></a>1186 Tourist 2</h5><p>经典的TSP问题，回溯法O(n!)求出最优值并记录路径</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n,c[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans,ways;</span><br><span class="line"><span class="keyword">int</span> vis[maxn],path[maxn][maxn],tmp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> cur,<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cost&gt;ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==n)&#123;</span><br><span class="line">        cost+=c[cur][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(cost&lt;ans)&#123;</span><br><span class="line">            ans=cost;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) path[<span class="number">0</span>][i]=tmp[i];</span><br><span class="line">            ways=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cost==ans&amp;&amp;ways&lt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) path[ways][i]=tmp[i];</span><br><span class="line">            ways++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            tmp[k]=i;</span><br><span class="line">            dfs(k+<span class="number">1</span>,i,cost+c[cur][i]);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        n=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                c[i][j]=read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=INF,ways=<span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ways;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,path[i][j],j==n<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1195-Large-Population"><a href="#1195-Large-Population" class="headerlink" title="1195 Large Population"></a>1195 Large Population</h5><p>要求边最少，互相连通且边权最大，就是求最大生成树，把边按边权降序排然后Kruskal跑一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w&gt;hs.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        n=read();</span><br><span class="line">        m=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            e[i]=edge&#123;read(),read(),read()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(e,e+m);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=e[i].u,v=e[i].v,w=e[i].w;</span><br><span class="line">            <span class="keyword">int</span> fu=Find(u),fv=Find(v);</span><br><span class="line">            <span class="keyword">if</span>(fu!=fv)&#123;</span><br><span class="line">                f[fu]=fv;</span><br><span class="line">                cnt++;</span><br><span class="line">                ans+=w;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1245-Lisa’s-Puzzle"><a href="#1245-Lisa’s-Puzzle" class="headerlink" title="1245 Lisa’s Puzzle"></a>1245 Lisa’s Puzzle</h5><p>把二进制反过来看做求前缀，构造一个只有01结点的trie树，就是哈夫曼树，把每个数化为二进制01串插入到trie树，并记录每个结点经过的次数，每个数的答案就是该数最后一个结点的下面两个结点的经过次数和，下面没有结点说明该数不是其他数的前缀了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;cnt;</span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">2</span>],vis[maxn],End[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res++;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt[x];i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> next=((<span class="number">1</span>&lt;&lt;i)&amp;x)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[now][next]) trie[now][next]=++tot;</span><br><span class="line">        now=trie[now][next];</span><br><span class="line">        vis[now]++;</span><br><span class="line">    &#125;</span><br><span class="line">    End[k]=now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> vis[trie[End[k]][<span class="number">0</span>]]+vis[trie[End[k]][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        cnt[a[i]]=len(a[i]);</span><br><span class="line">        Insert(i,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(i,a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1250-Bonus"><a href="#1250-Bonus" class="headerlink" title="1250 Bonus"></a>1250 Bonus</h5><p>把输入看做有向图，从出度为0的开始拓扑排序，也就是和常规的反过来，求出每个人的等级即可算工资</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;V[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> out[maxn],Rank[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(out[i]==<span class="number">0</span>) q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V[x].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> next=V[x][i];</span><br><span class="line">            <span class="keyword">if</span>(--out[next]==<span class="number">0</span>) q.push(next);</span><br><span class="line">            Rank[next]=Rank[x]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt==n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        n=read(),m=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            V[i].clear();</span><br><span class="line">            Rank[i]=out[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            V[v].push_back(u);</span><br><span class="line">            out[u]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(topu())&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                sum+=Rank[i]*<span class="number">1000</span>+<span class="number">888</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,Rank[i]*<span class="number">1000</span>+<span class="number">888</span>,i==n?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n*<span class="number">888</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"888%c"</span>,i==n<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1288-Binary-Search-Tree"><a href="#1288-Binary-Search-Tree" class="headerlink" title="1288 Binary Search Tree"></a>1288 Binary Search Tree</h5><p>用new和free动态开结点再释放不是MLE就是TLE</p><p>因为最多100个数，可以把静态数组空间分配给新节点，但也不能用数组下标直接将左儿子下标为父节点的2倍，右儿子下标为父节点的2倍+1，100个数可以卡成$2^{100}$，明显数组不够大</p><p>其实只要空间为100的结构体数组给新节点使用就行了，每次建树初始化一个递增值记录下标用到第几个即可，其他就和数据结构课上实现的差不多，最后左右递归比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    node *l,*r;</span><br><span class="line">&#125;tree[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">Newnode</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    tree[k][tot].v=x;</span><br><span class="line">    tree[k][tot].l=<span class="literal">NULL</span>;</span><br><span class="line">    tree[k][tot].r=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;tree[k][tot++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> k,node *root,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; root-&gt;v)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;l==<span class="literal">NULL</span>) root-&gt;l=Newnode(k,x);</span><br><span class="line">        <span class="keyword">else</span> Insert(k,root-&gt;l,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;r==<span class="literal">NULL</span>) root-&gt;r=Newnode(k,x);</span><br><span class="line">        <span class="keyword">else</span> Insert(k,root-&gt;r,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(node *root0,node *root1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root0==<span class="literal">NULL</span>&amp;&amp;root1==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(root0!=<span class="literal">NULL</span>&amp;&amp;root1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> same(root0-&gt;l,root1-&gt;l)&amp;&amp;same(root0-&gt;r,root1-&gt;r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=read(),m=read();</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        node *root0 = Newnode(<span class="number">0</span>,read());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            Insert(<span class="number">0</span>,root0,read());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ca=<span class="number">1</span>;ca&lt;=m;ca++)&#123;</span><br><span class="line">            tot=<span class="number">0</span>;</span><br><span class="line">            node *root1 = Newnode(<span class="number">1</span>,read());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">                Insert(<span class="number">1</span>,root1,read());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d: "</span>,ca);</span><br><span class="line">            <span class="keyword">if</span>(same(root0,root1)) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1302-Balance-Tree"><a href="#1302-Balance-Tree" class="headerlink" title="1302 Balance Tree"></a>1302 Balance Tree</h5><p>和上一题差不多，静态开结点建树，然后dfs求每个结点的左子树高度和右子树高度判断是否平衡</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    node *l,*r;</span><br><span class="line">&#125;tree[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">Newnode</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    tree[tot].v=x;</span><br><span class="line">    tree[tot].l=<span class="literal">NULL</span>;</span><br><span class="line">    tree[tot].r=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;tree[tot++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(node *root,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; root-&gt;v)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;l==<span class="literal">NULL</span>) root-&gt;l=Newnode(x);</span><br><span class="line">        <span class="keyword">else</span> Insert(root-&gt;l,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;r==<span class="literal">NULL</span>) root-&gt;r=Newnode(x);</span><br><span class="line">        <span class="keyword">else</span> Insert(root-&gt;r,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ok;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lh=dfs(root-&gt;l);</span><br><span class="line">    <span class="keyword">int</span> rh=dfs(root-&gt;r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(lh-rh)&gt;<span class="number">1</span>) ok=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> max(lh,rh)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=read();</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        node *root = Newnode(read());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            Insert(root,read());</span><br><span class="line">        &#125;</span><br><span class="line">        ok=<span class="literal">true</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span>   <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模拟测试1-E-合并堆"><a href="#模拟测试1-E-合并堆" class="headerlink" title="模拟测试1 E-合并堆"></a>模拟测试1 E-合并堆</h5><p>典型的区间dp，和矩阵连乘、石子合并等问题相似，可是考试的时候读错了题以为是贪心，气气+1</p><p>维护一个前缀和为了方便计算两两区间合并代价值，首先算出短区间最小代价，再自底向上算出长区间最小代价，转移方程看代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">305</span>;</span><br><span class="line">ll dp[maxn][maxn],h[maxn];</span><br><span class="line">ll inf = (<span class="number">1L</span>L&lt;&lt;<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line">ll sum[maxn];</span><br><span class="line"><span class="function">ll <span class="title">cost</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> ii,<span class="keyword">int</span> jj)</span></span>&#123;</span><br><span class="line">    ll H1=sum[j]-sum[i<span class="number">-1</span>];</span><br><span class="line">    ll H2=sum[jj]-sum[ii<span class="number">-1</span>];</span><br><span class="line">    ll a=min(H1,H2);</span><br><span class="line">    ll b=max(H1,H2);</span><br><span class="line">    <span class="keyword">return</span> a*(log2(b)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;h[i]);</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+h[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                dp[i][j]=inf;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//dp[i][j]表示区间[i,j]合并的最小代价，那么自己和自己合并dp[i][i]为0</span></span><br><span class="line"><span class="comment">//把区间[i,j]分为两部分[i,k]和[k+1,j]，由最优子结构性质可知dp[i][j]=dp[i][k]+dp[k+1][j]</span></span><br><span class="line"><span class="comment">//这样只要在每个长度区间下每次枚举k的位置就行了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>;len&lt;=n;len++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j=i+len<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j<span class="number">-1</span>;k++)&#123;</span><br><span class="line">                    dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+<span class="number">1</span>][j]+cost(i,k,k+<span class="number">1</span>,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>][n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模拟测试2-F-Split"><a href="#模拟测试2-F-Split" class="headerlink" title="模拟测试2 F-Split"></a>模拟测试2 F-Split</h5><p>去年期末+补考原题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line">ll a[<span class="number">55</span>],sum[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//dp[i][j]表示前i个数分为j段的最大价值</span></span><br><span class="line">        <span class="comment">//起始全部状态初始为负无穷大,dp[i][1]和dp[i][i]容易求得</span></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                dp[i][j]=-inf;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][<span class="number">1</span>]=<span class="built_in">abs</span>(a[i]-a[<span class="number">1</span>])*i;</span><br><span class="line">            dp[i][i]=sum[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于每个a[i]就两种情况,要么单独作为一段,要么和前面的最后一段合并</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;    <span class="comment">//i个数最多分为i段</span></span><br><span class="line">                <span class="comment">//将a[i]单独作一段</span></span><br><span class="line">                dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i]);</span><br><span class="line">                <span class="comment">//将a[i]与前面第j段合并</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=i<span class="number">-1</span>;k++)&#123;    <span class="comment">//枚举前i-1个数第j段的所有可能起始位置,这样就是[1,k-1]分为j-1段,[k-1,i]作为第j段</span></span><br><span class="line">                    dp[i][j]=max(dp[i][j],dp[k<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="built_in">abs</span>(a[i]-a[k])*(i-k+<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="期末考试-E"><a href="#期末考试-E" class="headerlink" title="期末考试 E"></a>期末考试 E</h5><p>给一个无向带权图，其中图中有k个点是救助站，问图中所有点到最近救助站路程的总和</p><p>其实是很简单的一道最短路模板题，稍微改改就行了，考试想复杂了，气气+2</p><p>首先我们把k个点看作一个超级源点，那么图中其他点到源点的最短路就也是这个源点到其他所有点的最短路</p><p>把这个超级源点和这k个救助站分别加上一条边权为0的边，从这个源点开始跑dij就相当于把这k个点同时丢到优先队列中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> __int64 ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,id;</span><br><span class="line">    node(<span class="keyword">int</span> id,<span class="keyword">int</span> val):id(id),val(val) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val&gt;hs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to,w;</span><br><span class="line">&#125;e[maxm*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++cnt]=edge&#123;head[u],v,w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn],vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> from)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        dis[i]=INF;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(from,<span class="number">0</span>));</span><br><span class="line">    dis[from]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur=q.top().id;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[cur])<span class="keyword">continue</span>;</span><br><span class="line">        vis[cur]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[cur]; i ; i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[cur]+e[i].w &lt; dis[v])&#123;</span><br><span class="line">                dis[v]=dis[cur]+e[i].w;</span><br><span class="line">                q.push(node(v,dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        n=read(),m=read(),k=read();</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            head[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read(),w=read();</span><br><span class="line">            addedge(u,v,w);</span><br><span class="line">            addedge(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> X=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=read();</span><br><span class="line">            addedge(X,x,<span class="number">0</span>);</span><br><span class="line">            addedge(x,X,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(X);</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i]==INF)&#123;</span><br><span class="line">                ok=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum+=dis[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2019程序设计实践总结就到这，总的来说不是特别满意(还被ericxie点名批评了)，图论和动态规划不是特别掌握，毕竟我主数据结构的呀qwq</p><p>一门课程的结束不代表以后永远不会再接触，我觉得程设就是对之前所学的C语言、离散数学、数据结构、Java等课程结合的实践性特别强的一门课程，在职场也一样，面试要求的算法都是平时积累起来的，包括编程语言的掌握程度，所以如果你对算法和编程感兴趣，欢迎通过自己的努力加入<strong>湘潭大学ACM集训队</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;黑体&quot; color=&quot;red&quot; size=&quot;4px&quot;&gt;抄袭一时爽，查重火葬场&lt;/font&gt;&lt;/center&gt;&lt;br&gt;因考前会查重，&lt;del&gt;故仅提供思路参考，代码后续补上，&lt;/del&gt;有问题欢迎下方评论留言&lt;/p&gt;
&lt;p&gt;ericxie官方解析点&lt;a href=&quot;https://www.bilibili.com/video/av55260932&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;食用此篇博文代码前建议上网自学一些C++STL容器(set、vector、map等)的用法
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="STL" scheme="http://quincy.ink/tags/STL/"/>
    
      <category term="模拟" scheme="http://quincy.ink/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="数学" scheme="http://quincy.ink/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="暴力" scheme="http://quincy.ink/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="程序设计实践" scheme="http://quincy.ink/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="动态规划" scheme="http://quincy.ink/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="图论" scheme="http://quincy.ink/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>湖南大学第15届校赛 H-Longest Common Palindrome Substring</title>
    <link href="http://quincy.ink/%E6%B9%96%E5%8D%97%E5%A4%A7%E5%AD%A6%E7%AC%AC15%E5%B1%8A%E6%A0%A1%E8%B5%9B-H-Longest-Common-Palindrome-Substring.html"/>
    <id>http://quincy.ink/湖南大学第15届校赛-H-Longest-Common-Palindrome-Substring.html</id>
    <published>2019-06-02T23:29:56.000Z</published>
    <updated>2019-06-02T23:45:34.256Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/908/H" target="_blank" rel="noopener">原题链接</a></p><p><strong>题意：</strong>给两个1e5长的字符串，求两者最长公共回文子串长度</p><p><strong>思路：</strong></p><ul><li>manacher 分别求出s,t串的mp[]数组，同时也可以求出对应最长奇回文子串长度(a,c)和最长偶回文子串长度(c,d)</li><li>由于manacher求出的是以i为中心的最长回文半径，且长度为len的子串为回文子串,len-2的的子串也为回文子串</li><li>那么s,t的最长公共回文子串长度可能是[0,1,3,5,…min(a,c)]和[0,2,4,6,…,min(b,d)]这两个区间内的一个长度</li><li>hash预处理字符串，然后分别二分这两个区间，check的时候就要用到mp[]数组来判断二分的长度子串是否为回文子串，注意分奇偶讨论</li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ma[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">2</span>][maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> len,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    ma[l++]=<span class="string">'$'</span>;</span><br><span class="line">    ma[l++]=<span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        ma[l++]=s[i];</span><br><span class="line">        ma[l++]=<span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ma[l]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">        mp[k][i]=mx&gt;i?min(mp[k][<span class="number">2</span>*id-i],mx-i):<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(ma[i+mp[k][i]]==ma[i-mp[k][i]]) mp[k][i]++;</span><br><span class="line">        <span class="keyword">if</span>(i+mp[k][i]&gt;mx)&#123;</span><br><span class="line">            mx=i+mp[k][i];</span><br><span class="line">            id=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> lens,lent;</span><br><span class="line">ull base=<span class="number">233</span>;</span><br><span class="line">ull p[maxn],hs[maxn],ht[maxn];</span><br><span class="line"><span class="function">ull <span class="title">geths</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ull)hs[r]-p[r-l+<span class="number">1</span>]*hs[l<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">getht</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ull)ht[r]-p[r-l+<span class="number">1</span>]*ht[l<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;ull&gt;tmp;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    tmp.clear();</span><br><span class="line">    ull ss,tt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*lens+<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="number">0</span>][i]<span class="number">-1</span>&gt;=k)&#123;</span><br><span class="line">            <span class="keyword">if</span>((mp[<span class="number">0</span>][i]<span class="number">-1</span>)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                ss=geths(i/<span class="number">2</span>-k/<span class="number">2</span>,i/<span class="number">2</span>+k/<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ss=geths(i/<span class="number">2</span>-k/<span class="number">2</span>+<span class="number">1</span>,i/<span class="number">2</span>+k/<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.push_back(ss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(tmp.begin(),tmp.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*lent+<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="number">1</span>][i]<span class="number">-1</span>&gt;=k)&#123;</span><br><span class="line">            <span class="keyword">if</span>((mp[<span class="number">1</span>][i]<span class="number">-1</span>)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                tt=getht(i/<span class="number">2</span>-k/<span class="number">2</span>,i/<span class="number">2</span>+k/<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tt=getht(i/<span class="number">2</span>-k/<span class="number">2</span>+<span class="number">1</span>,i/<span class="number">2</span>+k/<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(binary_search(tmp.begin(),tmp.end(),tt)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]*base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;len;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s+<span class="number">1</span>,t+<span class="number">1</span>))&#123;</span><br><span class="line">        lens=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        lent=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lens;i++)&#123;</span><br><span class="line">            hs[i]=hs[i<span class="number">-1</span>]*base+s[i]-<span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)&#123;</span><br><span class="line">            ht[i]=ht[i<span class="number">-1</span>]*base+t[i]-<span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line">        manacher(s,lens,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*lens+<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=mp[<span class="number">0</span>][i]<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>) a=max(a,k);</span><br><span class="line">            <span class="keyword">else</span>    b=max(b,k);</span><br><span class="line">        &#125;</span><br><span class="line">        manacher(t,lent,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*lent+<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=mp[<span class="number">1</span>][i]<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>) c=max(c,k);</span><br><span class="line">            <span class="keyword">else</span>    d=max(d,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Maxodd=min(a,c),Maxeven=min(b,d);</span><br><span class="line">        len.clear();</span><br><span class="line">        len.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Maxodd;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            len.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=len.size()<span class="number">-1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(len[mid])) l=mid;</span><br><span class="line">            <span class="keyword">else</span>                r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,len[l]);</span><br><span class="line"></span><br><span class="line">        len.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=Maxeven;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            len.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">0</span>,r=len.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(len[mid])) l=mid;</span><br><span class="line">            <span class="keyword">else</span>                r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,len[l]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/908/H&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题意：&lt;/strong&gt;给两个1e5长的字符串，求两者最长公共回文子串长度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;manacher 分别求出s,t串的mp[]数组，同时也可以求出对应最长奇回文子串长度(a,c)和最长偶回文子串长度(c,d)&lt;/li&gt;
&lt;li&gt;由于manacher求出的是以i为中心的最长回文半径，且长度为len的子串为回文子串,len-2的的子串也为回文子串&lt;/li&gt;
&lt;li&gt;那么s,t的最长公共回文子串长度可能是[0,1,3,5,…min(a,c)]和[0,2,4,6,…,min(b,d)]这两个区间内的一个长度&lt;/li&gt;
&lt;li&gt;hash预处理字符串，然后分别二分这两个区间，check的时候就要用到mp[]数组来判断二分的长度子串是否为回文子串，注意分奇偶讨论&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="二分" scheme="http://quincy.ink/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="hash" scheme="http://quincy.ink/tags/hash/"/>
    
      <category term="manacher" scheme="http://quincy.ink/tags/manacher/"/>
    
  </entry>
  
  <entry>
    <title>Template of ACM</title>
    <link href="http://quincy.ink/Template-of-ACM.html"/>
    <id>http://quincy.ink/Template-of-ACM.html</id>
    <published>2019-05-26T11:40:21.000Z</published>
    <updated>2019-11-21T01:58:36.825Z</updated>
    
    <content type="html"><![CDATA[<h5 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++关闭同步流 切记不要和C风格混用</span></span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//正负整数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[SIZE], obuf[SIZE], str[<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">int</span> bi = SIZE, bn = SIZE, opt;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (bn) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &lt;= <span class="string">' '</span>; bi++);</span><br><span class="line">            <span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">            bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">            bi = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bn) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &gt; <span class="string">' '</span>; bi++) s[sn++] = buf[bi];</span><br><span class="line">            <span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">            bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">            bi = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s[sn] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> sn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = read(str), bf;</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) bf = <span class="number">-1</span>, i++; <span class="keyword">else</span> bf = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>; i &lt; n; i++) x = x * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (bf &lt; <span class="number">0</span>) x = -x;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FastIO;</span><br><span class="line"><span class="comment">//O2优化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="comment">//java</span></span><br><span class="line">InputReader in = <span class="keyword">new</span> InputReader();</span><br><span class="line">PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">       </span><br><span class="line">out.close();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> &#123;</span></span><br><span class="line">BufferedReader buf;</span><br><span class="line">StringTokenizer tok;</span><br><span class="line">InputReader() &#123;</span><br><span class="line">buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">boolean <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (tok == null || !tok.hasMoreElements()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hasNext())</span><br><span class="line"><span class="keyword">return</span> tok.nextToken();</span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;//用tree</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;//用hash</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/trie_policy.hpp&gt;//用trie</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;//用priority_queue</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//hash表 用法类似map,时间复杂度O(n)</span></span><br><span class="line">cc_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; h; <span class="comment">//拉链法</span></span><br><span class="line">gp_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; h; <span class="comment">//探测法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 平衡树 以下操作时间复杂度均为O(logn)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">team</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t,p,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> team&amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t!=hs.t?t&gt;hs.t:p!=hs.p?p&lt;hs.p:id&lt;hs.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> tree&lt;team,null_type,less&lt;team&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; rebtree;</span><br><span class="line">null_type <span class="comment">//无映射(低版本g++为null_mapped_type)</span></span><br><span class="line">less&lt;T&gt; <span class="comment">//从小到大排序</span></span><br><span class="line">rb_tree_tag <span class="comment">//红黑树</span></span><br><span class="line">tree_order_statistics_node_update <span class="comment">//更新方式</span></span><br><span class="line">tr.insert(x); <span class="comment">//插入;</span></span><br><span class="line">tr.erase(x); <span class="comment">//删除;</span></span><br><span class="line">tr.order_of_key(x); <span class="comment">//求比x小的个数 rank=res+1</span></span><br><span class="line">tr.find_by_order(k<span class="number">-1</span>); <span class="comment">//找k小值,返回迭代器 k值非法，则会返回end()</span></span><br><span class="line">tr.join(b); <span class="comment">//将b并入tr,前提是两棵树类型一样且没有重复元素</span></span><br><span class="line">tr.split(v,b); <span class="comment">//分裂,key小于等于v的元素属于tr,其余的属于b</span></span><br><span class="line">tr.lower_bound(x); <span class="comment">//返回第一个&gt;=x的元素的迭代器 x的前驱 *--tr.lower_bound(x)</span></span><br><span class="line">tr.upper_bound(x); <span class="comment">//返回第一个&gt;x的元素的迭代器  x的后继 *tr.lower_bound(x)</span></span><br><span class="line"><span class="comment">//迭代器支持++,--操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//堆</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt;,TAG&gt; Q; <span class="comment">//注意命名空间别和std中的那个重了</span></span><br><span class="line"><span class="comment">/*其中的TAG为类型，有以下几种：</span></span><br><span class="line"><span class="comment">pairing_heap_tag //最快</span></span><br><span class="line"><span class="comment">thin_heap_tag</span></span><br><span class="line"><span class="comment">binomial_heap_tag</span></span><br><span class="line"><span class="comment">rc_binomial_heap_tag</span></span><br><span class="line"><span class="comment">binary_heap_tag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="keyword">int</span>&gt;::point_iterator it;  <span class="comment">//支持迭代器</span></span><br><span class="line">Q.push(x); <span class="comment">//push()会返回迭代器,用一个迭代器数组保存所有进队列的元素的迭代器，就可以持久化操作</span></span><br><span class="line">Q.pop();</span><br><span class="line">Q.top();</span><br><span class="line">Q.join(b);</span><br><span class="line">Q.empty();</span><br><span class="line">Q.size();</span><br><span class="line">Q.modify(it,<span class="number">6</span>);</span><br><span class="line">Q.erase(it);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//rope 时间复杂度O(logN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line">rope&lt;<span class="keyword">int</span>&gt; r;</span><br><span class="line">push_back(x)    在末尾添加x</span><br><span class="line">insert(pos,x)   在pos插入x</span><br><span class="line">erase(pos,x)    从pos开始删除x个</span><br><span class="line">copy(pos,len,x) 从pos开始到pos+len为止用x代替</span><br><span class="line">replace(pos,x)  从pos开始换成x</span><br><span class="line">substr(pos,x)   提取pos开始x个</span><br><span class="line">at(x)/[x]   访问第x个元素</span><br><span class="line"><span class="comment">//可持久化 O(1)复制根节点</span></span><br><span class="line">rope&lt;<span class="keyword">char</span>&gt; *his[maxn];</span><br><span class="line">his[<span class="number">0</span>] = <span class="keyword">new</span> rope&lt;<span class="keyword">char</span>&gt;();</span><br><span class="line">his[i] = <span class="keyword">new</span> rope&lt;<span class="keyword">char</span>&gt;(*his[i<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//list 合并操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">list</span> &lt;T&gt; &amp; x)</span>  <span class="comment">//将链表x合并进来并清空x,要求链表自身和x都是有序的</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splice</span> <span class="params">( iterator position, <span class="built_in">list</span>&lt;T,Allocator&gt;&amp; x )</span></span>; <span class="comment">//在position后把list&amp;x所有的元素到剪接到要操作的list对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splice</span> <span class="params">( iterator position, <span class="built_in">list</span>&lt;T,Allocator&gt;&amp; x, iterator it )</span></span>; <span class="comment">//只会把it的值剪接到要操作的list对象中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splice</span> <span class="params">( iterator position, <span class="built_in">list</span>&lt;T,Allocator&gt;&amp; x, iterator first, iterator last )</span></span>; <span class="comment">//把first到last剪接到要操作的list对象中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O(n)查询第k大</span></span><br><span class="line">nth_element(a+<span class="number">1</span>,a+k,a+<span class="number">1</span>+n);</span><br></pre></td></tr></table></figure><h5 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[i][j]表示区间[i,i+2^j-1]的最值</span></span><br><span class="line"><span class="comment">//一维</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    <span class="keyword">int</span> t=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            f[i][j]=max(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymax</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> max(f[l][k],f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lo[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;++i) lo[i]=(i&amp;(i<span class="number">-1</span>))?lo[i<span class="number">-1</span>]:lo[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            Min[i][j][<span class="number">0</span>][<span class="number">0</span>] = a[i][j];</span><br><span class="line">            Max[i][j][<span class="number">0</span>][<span class="number">0</span>] = a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lo[n]; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= lo[m]; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; row++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= m; col++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i) &#123;</span><br><span class="line">                        Min[row][col][i][j] = min(Min[row][col][i<span class="number">-1</span>][j],Min[row+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][col][i<span class="number">-1</span>][j]);</span><br><span class="line">                        Max[row][col][i][j] = max(Max[row][col][i<span class="number">-1</span>][j],Max[row+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][col][i<span class="number">-1</span>][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Min[row][col][i][j] = min(Min[row][col][i][j<span class="number">-1</span>], Min[row][col+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][i][j<span class="number">-1</span>]);</span><br><span class="line">                        Max[row][col][i][j] = max(Max[row][col][i][j<span class="number">-1</span>], Max[row][col+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][i][j<span class="number">-1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">askmin</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kx = lo[x2-x1+<span class="number">1</span>], ky = lo[y2-y1+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> m1 = Min[x1][y1][kx][ky];</span><br><span class="line">    <span class="keyword">int</span> m2 = Min[x2-(<span class="number">1</span>&lt;&lt;kx)+<span class="number">1</span>][y1][kx][ky];</span><br><span class="line">    <span class="keyword">int</span> m3 = Min[x1][y2-(<span class="number">1</span>&lt;&lt;ky)+<span class="number">1</span>][kx][ky];</span><br><span class="line">    <span class="keyword">int</span> m4 = Min[x2-(<span class="number">1</span>&lt;&lt;kx)+<span class="number">1</span>][y2-(<span class="number">1</span>&lt;&lt;ky)+<span class="number">1</span>][kx][ky];</span><br><span class="line">    <span class="keyword">return</span> min(min(m1,m2),min(m3,m4));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">askmax</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kx = lo[x2-x1+<span class="number">1</span>], ky = lo[y2-y1+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> m1 = Max[x1][y1][kx][ky];</span><br><span class="line">    <span class="keyword">int</span> m2 = Max[x2-(<span class="number">1</span>&lt;&lt;kx)+<span class="number">1</span>][y1][kx][ky];</span><br><span class="line">    <span class="keyword">int</span> m3 = Max[x1][y2-(<span class="number">1</span>&lt;&lt;ky)+<span class="number">1</span>][kx][ky];</span><br><span class="line">    <span class="keyword">int</span> m4 = Max[x2-(<span class="number">1</span>&lt;&lt;kx)+<span class="number">1</span>][y2-(<span class="number">1</span>&lt;&lt;ky)+<span class="number">1</span>][kx][ky];</span><br><span class="line">    <span class="keyword">return</span> max(max(m1,m2),max(m3,m4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//next[i] 表示t[i-next[i]...i-1]=t[0...next[i]-1]</span></span><br><span class="line"><span class="comment">//循环节len=m%(m-next[m])==0?m-next[m]:1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> t[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    j=Next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;m)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;t[i]!=t[j]) j=Next[j];</span><br><span class="line">        Next[++i]=++j;</span><br><span class="line">        <span class="comment">//if(t[++i]==t[++j]) Next[i]=Next[j]; //优化</span></span><br><span class="line">        <span class="comment">//else Next[i]=j;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> n,<span class="keyword">char</span> t[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    getNext(t,m);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;s[i]!=t[j]) j=Next[j];</span><br><span class="line">        i++,j++;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=m)&#123;<span class="comment">//匹配成功</span></span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ExtendKMP"><a href="#ExtendKMP" class="headerlink" title="ExtendKMP"></a>ExtendKMP</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//next[i]表示t[i...m-1]与t[0...m-1]的最长公共前缀</span></span><br><span class="line"><span class="comment">//extend[i]表示s[i...n-1]与t[0...m-1]的最长公共前缀</span></span><br><span class="line"><span class="keyword">int</span> Next[maxn],extend[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> t[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>]=m;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j+<span class="number">1</span>&lt;m&amp;&amp;t[j]==t[j+<span class="number">1</span>]) j++;</span><br><span class="line">    Next[<span class="number">1</span>]=j;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=Next[k]+k<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> L=Next[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L&lt;p+<span class="number">1</span>) Next[i]=L;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j=max(<span class="number">0</span>,p-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;m&amp;&amp;t[i+j]==t[j]) j++;</span><br><span class="line">            Next[i]=j;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extendkmp</span><span class="params">(<span class="keyword">char</span> t[],<span class="keyword">int</span> m,<span class="keyword">char</span> s[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    getNext(t,m);</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n&amp;&amp;j&lt;m&amp;&amp;t[j]==s[j]) j++;</span><br><span class="line">    extend[<span class="number">0</span>]=j;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=extend[k]+k<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> L=Next[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L&lt;p+<span class="number">1</span>) extend[i]=L;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j=max(<span class="number">0</span>,p-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;n&amp;&amp;j&lt;m&amp;&amp;s[i+j]==t[j]) j++;</span><br><span class="line">            extend[i]=j;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得最小表示法下标的开始位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>,k=<span class="number">0</span>,t;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;n &amp;&amp; k&lt;n) &#123;</span><br><span class="line">        t=s[(i+k)%n]-s[(j+k)%n];</span><br><span class="line">        <span class="keyword">if</span> (!t) k++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (t&gt;<span class="number">0</span>) i+=k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> j+=k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i==j) j++;</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i&lt;j?i:j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="手写Hash"><a href="#手写Hash" class="headerlink" title="手写Hash"></a>手写Hash</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1999997</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>;</span><br><span class="line">    <span class="keyword">int</span> head[MOD + <span class="number">10</span>], nx[N], top;</span><br><span class="line">    <span class="keyword">int</span> hs[N], id[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = x % MOD;</span><br><span class="line">        hs[top] = x; id[top] = y; nx[top] = head[k]; head[k] = top++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = x % MOD;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[k]; i != <span class="number">-1</span>; i = nx[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hs[i] == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> id[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;hs;</span><br></pre></td></tr></table></figure><h5 id="字符串Hash"><a href="#字符串Hash" class="headerlink" title="字符串Hash"></a>字符串Hash</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里为ull自然溢出取模,手动取模模数可取998244353,1004535809,1e9+7,1e9+9...</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> lens,lent;</span><br><span class="line">ull base=<span class="number">233</span>; <span class="comment">//冲突可换其它素数</span></span><br><span class="line">ull p[maxn],hs[maxn];</span><br><span class="line"><span class="function">ull <span class="title">geths</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ull)hs[r]-p[r-l+<span class="number">1</span>]*hs[l<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">    p[i]=p[i<span class="number">-1</span>]*base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s+<span class="number">1</span>,t+<span class="number">1</span>);</span><br><span class="line">lens=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">lent=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lens;i++)&#123;</span><br><span class="line">    hs[i]=hs[i<span class="number">-1</span>]*base+s[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mp[i]-1表示以i为中心的最长回文的长度</span></span><br><span class="line"><span class="comment">//mp[0...2*n+1]/2 求和即为所有子串中回文子串个数</span></span><br><span class="line"><span class="keyword">char</span> ma[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> mp[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    ma[l++]=<span class="string">'$'</span>;</span><br><span class="line">    ma[l++]=<span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        ma[l++]=s[i];</span><br><span class="line">        ma[l++]=<span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ma[l]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">        mp[i]=mx&gt;i?min(mp[<span class="number">2</span>*id-i],mx-i):<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(ma[i+mp[i]]==ma[i-mp[i]]) mp[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i+mp[i]&gt;mx)&#123;</span><br><span class="line">            mx=i+mp[i];</span><br><span class="line">            id=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> nex[maxn][<span class="number">26</span>],cnt;</span><br><span class="line">    <span class="keyword">bool</span> exist[maxn];  <span class="comment">// 该结点结尾的字符串是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!nex[p][c]) nex[p][c] = ++cnt;</span><br><span class="line">            p = nex[p][c];</span><br><span class="line">        &#125;</span><br><span class="line">        exist[p] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!nex[p][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            p = nex[p][c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exist[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询多个模式串在文本串中出现了多少次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC&#123;</span><br><span class="line">    <span class="keyword">int</span> tr[N][<span class="number">26</span>],tot;</span><br><span class="line">    <span class="keyword">int</span> e[N],fail[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="keyword">sizeof</span>(tr));</span><br><span class="line">        <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line">        <span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="keyword">sizeof</span>(fail));</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;s[i];i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tr[u][s[i]-<span class="string">'a'</span>])tr[u][s[i]-<span class="string">'a'</span>]=++tot;</span><br><span class="line">            u=tr[u][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        e[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)<span class="keyword">if</span>(tr[<span class="number">0</span>][i])q.push(tr[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tr[u][i])fail[tr[u][i]]=tr[fail[u]][i],q.push(tr[u][i]);</span><br><span class="line">                <span class="keyword">else</span> tr[u][i]=tr[fail[u]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;t[i];i++)&#123;</span><br><span class="line">            u=tr[u][t[i]-<span class="string">'a'</span>];<span class="comment">// 转移</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=u;j&amp;&amp;e[j]!=<span class="number">-1</span>;j=fail[j])&#123;</span><br><span class="line">                res+=e[j],e[j]=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>),AC::Insert(s);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        AC::build();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,AC::query(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有N个由小写字母组成的模式串以及一个文本串T</span></span><br><span class="line"><span class="comment">每个模式串可能会在文本串中出现多次。你需要找出哪些模式串在文本串T中出现的次数最多</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">155</span>,L=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> AC&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SZ=N*<span class="number">80</span>;</span><br><span class="line">    <span class="keyword">int</span> tot,tr[SZ][<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail[SZ],idx[SZ],val[SZ];</span><br><span class="line">    <span class="keyword">int</span> cnt[N];<span class="comment">// 记录第 i 个字符串的出现次数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="keyword">sizeof</span>(fail));</span><br><span class="line">        <span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="keyword">sizeof</span>(tr));</span><br><span class="line">        <span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="built_in">memset</span>(idx,<span class="number">0</span>,<span class="keyword">sizeof</span>(idx));</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> id)</span></span>&#123;<span class="comment">//id 表示原始字符串的编号</span></span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;s[i];i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tr[u][s[i]-<span class="string">'a'</span>])tr[u][s[i]-<span class="string">'a'</span>]=++tot;</span><br><span class="line">            u=tr[u][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        idx[u]=id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)<span class="keyword">if</span>(tr[<span class="number">0</span>][i])q.push(tr[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tr[u][i])fail[tr[u][i]]=tr[fail[u]][i],q.push(tr[u][i]);</span><br><span class="line">                <span class="keyword">else</span> tr[u][i]=tr[fail[u]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *t)</span></span>&#123;<span class="comment">// 返回最大的出现次数</span></span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;t[i];i++)&#123;</span><br><span class="line">            u=tr[u][t[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=u;j;j=fail[j])val[j]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)<span class="keyword">if</span>(idx[i])res=max(res,val[i]),cnt[idx[i]]=val[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N][<span class="number">100</span>],t[L];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;<span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>),AC::Insert(s[i],i);</span><br><span class="line">        AC::build();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x=AC::query(t);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(AC::cnt[i]==x)<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后缀数组SA"><a href="#后缀数组SA" class="headerlink" title="后缀数组SA"></a>后缀数组SA</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuffixArray</span>&#123;</span></span><br><span class="line">    <span class="comment">// S下标从1开始,S[n+1]为0，S[1...n]非零</span></span><br><span class="line">    <span class="comment">//sa:字典序中排第i位的起始位置在str中第sa[i]</span></span><br><span class="line">    <span class="comment">//rank:就是str第i个位置的后缀是在字典序排第几</span></span><br><span class="line">    <span class="comment">//height：字典序排i和i-1的后缀的最长公共前缀</span></span><br><span class="line">    <span class="keyword">int</span> s[N&lt;&lt;<span class="number">1</span>],t[N&lt;&lt;<span class="number">1</span>],ht[N],sa[N],rk[N],p[N],c[N],w[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span>* S)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=*max_element(S+<span class="number">1</span>,S+<span class="number">1</span>+n);</span><br><span class="line">        <span class="built_in">memset</span>(rk,<span class="number">0</span>,(m+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>); <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) rk[S[i]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) rk[i]+=rk[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) s[i]=rk[S[i]];</span><br><span class="line">        <span class="keyword">return</span> rk[m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ps(x) sa[w[s[x]]--]=x</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> pl(x) sa[w[s[x]]++]=x</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">radix</span><span class="params">(<span class="keyword">int</span>* v,<span class="keyword">int</span>* s,<span class="keyword">int</span>* t,<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> n1)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sa,<span class="number">0</span>,(n+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>); <span class="built_in">memset</span>(c,<span class="number">0</span>,(m+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++c[s[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) w[i]=c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n1;i;--i) ps(v[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) w[i]=c[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;<span class="number">1</span> &amp;&amp; t[sa[i]<span class="number">-1</span>]) pl(sa[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) w[i]=c[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;--i) <span class="keyword">if</span>(sa[i]&gt;<span class="number">1</span> &amp;&amp; !t[sa[i]<span class="number">-1</span>]) ps(sa[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SAIS</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span>* s,<span class="keyword">int</span>* t,<span class="keyword">int</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1=<span class="number">0</span>,ch=rk[<span class="number">1</span>]=<span class="number">0</span>,*s1=s+n; t[n]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;--i) t[i]=s[i]==s[i+<span class="number">1</span>]?t[i+<span class="number">1</span>]:s[i]&gt;s[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) rk[i]=t[i<span class="number">-1</span>]&amp;&amp;!t[i]?(p[++n1]=i,n1):<span class="number">0</span>;</span><br><span class="line">        radix(p,s,t,n,m,n1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=n;++i) <span class="keyword">if</span>(x=rk[sa[i]])&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch&lt;=<span class="number">1</span> || p[x+<span class="number">1</span>]-p[x]!=p[y+<span class="number">1</span>]-p[y]) ++ch;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> j=p[x],k=p[y];j&lt;=p[x+<span class="number">1</span>];++j,++k)</span><br><span class="line">                <span class="keyword">if</span>((s[j]&lt;&lt;<span class="number">1</span>|t[j])^(s[k]&lt;&lt;<span class="number">1</span>|t[k]))&#123; ++ch; <span class="keyword">break</span>; &#125;</span><br><span class="line">            s1[y=x]=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch&lt;n1) SAIS(n1,ch,s1,t+n,p+n1);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;++i) sa[s1[i]]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;++i) s1[i]=p[sa[i]];</span><br><span class="line">        radix(s1,s,t,n,m,n1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span>* S)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=trans(++n,S);SAIS(n,m,s,t,p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) rk[sa[i]=sa[i+<span class="number">1</span>]]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;n;++i) <span class="keyword">if</span>(rk[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=sa[rk[i]<span class="number">-1</span>];S[i+k]==S[j+k];++k);</span><br><span class="line">            <span class="keyword">if</span>(ht[rk[i]]=k) --k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;SA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mn[<span class="number">25</span>][N],lg[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST_init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mn[<span class="number">0</span>][i]=ht[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lg[n];j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">            mn[j][i]=min(mn[j<span class="number">-1</span>][i],mn[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//通过rk[l]到rk[r]之间的 min(lcp[i]) 即为两后缀的最长lcp</span></span><br><span class="line">    <span class="comment">//l=rk[l],r=rk[r]; // l r为下标</span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) swap(l,r);l++;</span><br><span class="line">    <span class="keyword">int</span> k=lg[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(mn[k][l],mn[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> S[N];<span class="comment">//注意如果S为char只能放0-127，否则改int</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意输入和传参</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,S+<span class="number">1</span>)&amp;&amp;<span class="built_in">strcmp</span>(S+<span class="number">1</span>,<span class="string">"."</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(S+<span class="number">1</span>);</span><br><span class="line">        SA.init(n,S);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SA应用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_lcs</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> mid)</span></span>&#123; <span class="comment">//mid为两串分隔位置，n为拼接后总长</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i]&gt;ans)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sa[i]&gt;=<span class="number">1</span>&amp;&amp;sa[i]&lt;=mid&amp;&amp;sa[i<span class="number">-1</span>]&gt;=mid+<span class="number">1</span>) ans=max(ans,ht[i]);</span><br><span class="line">            <span class="keyword">if</span>(sa[i<span class="number">-1</span>]&gt;=<span class="number">1</span>&amp;&amp;sa[i<span class="number">-1</span>]&lt;=mid&amp;&amp;sa[i]&gt;=mid+<span class="number">1</span>) ans=max(ans,ht[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">get_subcnt</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">//不同子串个数</span></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans += n-sa[i]+<span class="number">1</span>-ht[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_looplen</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">//循环节长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i) <span class="keyword">continue</span>; <span class="comment">//不能整除的话，一定不能构成循环节</span></span><br><span class="line">        <span class="keyword">if</span>(rk[<span class="number">1</span>] != rk[i+<span class="number">1</span>]+<span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">//rank数组必须要相邻才能构成循环节</span></span><br><span class="line">        <span class="keyword">if</span>(ht[rk[<span class="number">1</span>]] != n-i) <span class="keyword">continue</span>; <span class="comment">//若第一个和第二个的最长公共前缀不符合条件</span></span><br><span class="line">        <span class="keyword">return</span> n/i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd1</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=SA.sa[<span class="number">1</span>],mm=SA.sa[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(SA.ht[i]&gt;=k)&#123;</span><br><span class="line">            mm=min(mm,min(SA.sa[i],SA.sa[i<span class="number">-1</span>]));</span><br><span class="line">            mx=max(mx,max(SA.sa[i],SA.sa[i<span class="number">-1</span>]));</span><br><span class="line">            <span class="keyword">if</span>(mx-mm&gt;=k) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mx=SA.sa[i],mm=SA.sa[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get1</span><span class="params">()</span></span>&#123; <span class="comment">//不可重叠最长子串长度</span></span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pd1(mid)) l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(SA.ht[i]&gt;=x)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt==k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cnt=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get2</span><span class="params">()</span></span>&#123; <span class="comment">//可重叠 出现k次最长子串长度</span></span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pd(mid)) l=mid;</span><br><span class="line">        <span class="keyword">else</span>        r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可重叠最长子串长度 = max(ht[i])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最长连续循环重复子串出现次数</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;<span class="comment">//对于长度为j的循环节,sum记录循环次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+j&lt;=n;i+=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i]==S[i+j])&#123;</span><br><span class="line">            <span class="keyword">int</span> len=query(i,i+j);<span class="comment">//向后匹配</span></span><br><span class="line">            <span class="keyword">int</span> num=len/j+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k=i-(j-len%j);</span><br><span class="line">            <span class="keyword">if</span>(k&gt;=<span class="number">1</span> &amp;&amp; len%j &amp;&amp; query(k,k+j)&gt;=len)++num;<span class="comment">//向前匹配</span></span><br><span class="line">            <span class="keyword">if</span>(num==sum) L.push_back(j);<span class="comment">//L记录得到最多循环次数的可能的子串长度</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;sum) sum=num,L.clear(),L.push_back(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接上 输出字典序最小的子串</span></span><br><span class="line"><span class="keyword">int</span> x=SA.sa[<span class="number">1</span>],y=SA.sa[<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">sum--;<span class="comment">//printf("%d\n",sum);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n &amp;&amp; sum;++i)&#123;<span class="comment">//求哪个子串可以循环sum次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;L.size();++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(SA.sa[i]+L[j]&gt;=n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> len=query(SA.sa[i],SA.sa[i]+L[j]);</span><br><span class="line">        <span class="keyword">if</span>(len/L[j] == sum)&#123;x=SA.sa[i],y=SA.sa[i]+(sum+<span class="number">1</span>)*L[j],sum=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: "</span>,++Case);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;y;++i)<span class="built_in">printf</span>(<span class="string">"%c"</span>,S[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//n个串中出现在至少k个不同的串中的最长公共子串</span></span><br><span class="line"><span class="comment">//二分出长度，pd()和下面求起点类似；连接多个串时用不一样的隔开符</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pd(mid)) l=mid;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"?\n"</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=all;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(SA.ht[i]&gt;=l)&#123;</span><br><span class="line">        <span class="keyword">int</span> id1 = fin(SA.sa[i<span class="number">-1</span>]),id2 = fin(SA.sa[i]);</span><br><span class="line">        <span class="keyword">if</span>(!vis[id1]) cnt++;</span><br><span class="line">        vis[id1]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!vis[id2]) cnt++;</span><br><span class="line">        vis[id2]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=k) st.push_back(SA.sa[i<span class="number">-1</span>]); <span class="comment">//至少出现k个不同的串中</span></span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=k) st.push_back(SA.sa[all]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;st.size();i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=st[i];j&lt;st[i]+l;j++) <span class="built_in">printf</span>(<span class="string">"%c"</span>,S[j]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两串长度不小于k的公共子串个数 mid表示分隔符位置 n表示拼接总长</span></span><br><span class="line"><span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">ll tot=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ht[i]&lt;k) top=tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(sa[i<span class="number">-1</span>]&lt;mid) cnt++,tot+=ht[i]-k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">0</span>&amp;&amp;ht[i]&lt;=st[top<span class="number">-1</span>][<span class="number">0</span>])&#123;</span><br><span class="line">            top--;</span><br><span class="line">            tot-=st[top][<span class="number">1</span>]*(st[top][<span class="number">0</span>]-ht[i]);</span><br><span class="line">            cnt+=st[top][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        st[top][<span class="number">0</span>]=ht[i];st[top++][<span class="number">1</span>]=cnt;</span><br><span class="line">        <span class="keyword">if</span>(sa[i]&gt;mid) sum+=tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tot=top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ht[i]&lt;k) top=tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(sa[i<span class="number">-1</span>]&gt;mid) cnt++,tot+=ht[i]-k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">0</span>&amp;&amp;ht[i]&lt;=st[top<span class="number">-1</span>][<span class="number">0</span>])&#123;</span><br><span class="line">            top--;</span><br><span class="line">            tot-=st[top][<span class="number">1</span>]*(st[top][<span class="number">0</span>]-ht[i]);</span><br><span class="line">            cnt+=st[top][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        st[top][<span class="number">0</span>]=ht[i];st[top++][<span class="number">1</span>]=cnt;</span><br><span class="line">        <span class="keyword">if</span>(sa[i]&lt;mid) sum+=tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重复出现子串计数问题 求一个字符串中有多少个至少出现两次的子串</span></span><br><span class="line">Ans=∑max(Height[i]−Height[i−<span class="number">1</span>],<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//包含指定字符的所有不同子串个数</span></span><br><span class="line"><span class="keyword">void</span> solve(<span class="keyword">char</span> *S,<span class="keyword">char</span> ch)&#123;</span><br><span class="line">    nxt[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        nxt[i]=nxt[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(S[i]==ch) nxt[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nxt[sa[i]]) ans += n-max(sa[i]+ht[i],nxt[sa[i]])+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后缀自动机SAM"><a href="#后缀自动机SAM" class="headerlink" title="后缀自动机SAM"></a>后缀自动机SAM</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tot, last, ch[maxn &lt;&lt; <span class="number">1</span>][N], fa[maxn &lt;&lt; <span class="number">1</span>], len[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>], tp[maxn &lt;&lt; <span class="number">1</span>], cnt[maxn &lt;&lt; <span class="number">1</span>]; <span class="comment">//sum,tp用于拓扑排序，tp为排序后的数组</span></span><br><span class="line">    <span class="keyword">int</span> right[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Tr</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;<span class="keyword">return</span> c - <span class="string">'a'</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="keyword">return</span> len[c] - len[fa[c]];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        last = tot = <span class="number">1</span>;</span><br><span class="line">        len[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>( ch[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = last, np = last = ++tot;</span><br><span class="line">        len[np] = len[p] + <span class="number">1</span>, cnt[last] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>( ch[np], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[np]);</span><br><span class="line">        <span class="keyword">while</span>( p &amp;&amp; !ch[p][x]) ch[p][x] = np, p = fa[p];</span><br><span class="line">        <span class="keyword">if</span>( p == <span class="number">0</span>) fa[np] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[p][x];</span><br><span class="line">            <span class="keyword">if</span>( len[q] == len[p] + <span class="number">1</span>)</span><br><span class="line">                fa[np] = q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nq = ++tot;</span><br><span class="line">                <span class="built_in">memcpy</span>( ch[nq], ch[q], <span class="keyword">sizeof</span> ch[q]);</span><br><span class="line">                len[nq] = len[p] + <span class="number">1</span>, fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line">                <span class="keyword">while</span>( p &amp;&amp; ch[p][x] == q)  ch[p][x] = nq, p = fa[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; i++) add(Tr(s[i]));</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (tot + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">memset</span>(right, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (tot + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)   sum[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; i++)  sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)   tp[sum[len[i]]--] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i; i--)        cnt[fa[tp[i]]] += cnt[tp[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, p = <span class="number">1</span>; i &lt;= lens; i++)  p = ch[p][Tr(s[i])], right[p]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i; i--) right[fa[tp[i]]] += right[tp[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">calc</span><span class="params">()</span><span class="comment">//洛谷P3804</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[tp[i]] &gt; <span class="number">1</span>) ans = max(ans, <span class="number">1L</span>L * cnt[tp[i]] * len[tp[i]]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">getsubnum</span><span class="params">()</span> <span class="comment">//不同本质子串数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += val(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">get_ab</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="comment">//出现次数介于[a,b]的子串数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a &lt;= right[tp[i]] &amp;&amp; right[tp[i]] &lt;= b) ans += val(tp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getlcs</span><span class="params">(<span class="keyword">char</span> t[])</span> <span class="comment">//最长公共子串长度</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>, num = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; t[i]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c = Tr(t[i]);</span><br><span class="line">            <span class="keyword">if</span> (ch[p][c]) p = ch[p][c], num++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(; p &amp;&amp; !ch[p][c]; p = fa[p]);</span><br><span class="line">                <span class="keyword">if</span> (!p) p = <span class="number">1</span>, num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> num = len[p] + <span class="number">1</span>, p = ch[p][c];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; sam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        sam.init();</span><br><span class="line">        sam.build(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="回文自动机PAM"><a href="#回文自动机PAM" class="headerlink" title="回文自动机PAM"></a>回文自动机PAM</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.求串S前缀0~i内本质不同回文串的个数（两个串长度不同或者长度相同且至少有一个字符不同便是本质不同）</span></span><br><span class="line"><span class="comment">2.求串S内每一个本质不同回文串出现的次数</span></span><br><span class="line"><span class="comment">3.求串S内回文串的个数（其实就是1和2结合起来） p-2</span></span><br><span class="line"><span class="comment">4.求以下标i结尾的回文串的个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300005</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAM</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[maxn][N] ;<span class="comment">//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span></span><br><span class="line">    <span class="keyword">int</span> fail[maxn] ;<span class="comment">//fail指针，失配后跳转到fail指针指向的节点</span></span><br><span class="line">    <span class="keyword">int</span> cnt[maxn] ; <span class="comment">//在最后统计后它可以表示形如以i为结尾的回文串中最长的那个串个数</span></span><br><span class="line">    <span class="keyword">int</span> num[maxn] ; <span class="comment">//表示以i结尾的回文串的种类数</span></span><br><span class="line">    <span class="keyword">int</span> len[maxn] ;<span class="comment">//len[i]表示节点i表示的回文串的长度</span></span><br><span class="line">    <span class="keyword">int</span> S[maxn] ;<span class="comment">//存放添加的字符</span></span><br><span class="line">    <span class="keyword">int</span> last ;<span class="comment">//指向上一个字符所在的节点，方便下一次add</span></span><br><span class="line">    <span class="keyword">int</span> n ;<span class="comment">//字符数组指针</span></span><br><span class="line">    <span class="keyword">int</span> p ;<span class="comment">//节点指针</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">        cnt[p] = <span class="number">0</span> ;</span><br><span class="line">        num[p] = <span class="number">0</span> ;</span><br><span class="line">        len[p] = l ;</span><br><span class="line">        <span class="keyword">return</span> p ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">        p = <span class="number">0</span> ;</span><br><span class="line">        newnode (  <span class="number">0</span> ) ;</span><br><span class="line">        newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">        last = <span class="number">0</span> ;</span><br><span class="line">        n = <span class="number">0</span> ;</span><br><span class="line">        S[n] = <span class="number">-1</span> ;<span class="comment">//开头放一个字符集中没有的字符，减少特判</span></span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;<span class="comment">//和KMP一样，失配后找一个尽量最长的</span></span><br><span class="line">        <span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line">        <span class="keyword">return</span> x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c )</span> </span>&#123;</span><br><span class="line">        c -= <span class="string">'a'</span> ;</span><br><span class="line">        S[++ n] = c ;</span><br><span class="line">        <span class="keyword">int</span> cur = get_fail ( last ) ;<span class="comment">//通过上一个回文串找这个回文串的匹配位置</span></span><br><span class="line">        <span class="keyword">if</span> ( !next[cur][c] ) &#123;<span class="comment">//如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span></span><br><span class="line">            <span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;<span class="comment">//新建节点</span></span><br><span class="line">            fail[now] = next[get_fail ( fail[cur] )][c] ;<span class="comment">//和AC自动机一样建立fail指针，以便失配后跳转</span></span><br><span class="line">            next[cur][c] = now ;</span><br><span class="line">            num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        last = next[cur][c] ;</span><br><span class="line">        cnt[last] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Count</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = p - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; -- i ) cnt[fail[i]] += cnt[i] ;</span><br><span class="line">        <span class="comment">//父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; pam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    pam.init();</span><br><span class="line">    <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">        pam.add(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    pam.Count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单点修改+区间查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">求(x1,y1)~(x2,y2)的sum</span></span><br><span class="line"><span class="comment">sum=sum(x2,y2)-sum(x1-1,y2)-sum(x2,y1-1)+sum(x1-1,y1-1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ty=y;</span><br><span class="line">        <span class="keyword">while</span>(ty&lt;=n)</span><br><span class="line">            c[x][ty]+=v,ty+=lowbit(ty);</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        <span class="keyword">int</span> ty=y;</span><br><span class="line">        <span class="keyword">while</span>(ty)</span><br><span class="line">            res+=c[x][ty],ty-=lowbit(ty);</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间修改+单点查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ty=y;</span><br><span class="line">        <span class="keyword">while</span>(ty&lt;=n)</span><br><span class="line">            c[x][ty]+=v,ty+=lowbit(ty);</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">real_add</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    add(x1,y1,v);</span><br><span class="line">    add(x1,y2+<span class="number">1</span>,-v);</span><br><span class="line">    add(x2+<span class="number">1</span>,y1,-v);</span><br><span class="line">    add(x2+<span class="number">1</span>,y2+<span class="number">1</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        <span class="keyword">int</span> ty=y;</span><br><span class="line">        <span class="keyword">while</span>(ty)</span><br><span class="line">            res+=c[x][ty],ty-=lowbit(ty);</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间修改+区间查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=n; i+=lowbit(i))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;=m; j+=lowbit(j)) &#123;</span><br><span class="line">            t1[i][j]+=v;</span><br><span class="line">            t2[i][j]+=v*x;</span><br><span class="line">            t3[i][j]+=v*y;</span><br><span class="line">            t4[i][j]+=v*x*y;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">real_add</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    add(x1,y1,v);</span><br><span class="line">    add(x1,y2+<span class="number">1</span>,-v);</span><br><span class="line">    add(x2+<span class="number">1</span>,y1,-v);</span><br><span class="line">    add(x2+<span class="number">1</span>,y2+<span class="number">1</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i; i-=lowbit(i))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y; j; j-=lowbit(j))</span><br><span class="line">            res+=(x+<span class="number">1</span>)*(y+<span class="number">1</span>)*t1[i][j]-(y+<span class="number">1</span>)*t2[i][j]-(x+<span class="number">1</span>)*t3[i][j]+t4[i][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">real_sum</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(x2,y2)-sum(x2,y1<span class="number">-1</span>)-sum(x1<span class="number">-1</span>,y2)+sum(x1<span class="number">-1</span>,y1<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点权版</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to;</span><br><span class="line">&#125;e[maxm*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++cnt]=edge&#123;head[u],v&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,root,P;</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],deep[maxn],siz[maxn],son[maxn],rk[maxn],top[maxn],id[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    fa[u]=pre;deep[u]=dep;siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u,dep+<span class="number">1</span>);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    top[u]=t;id[u]=++cnt;rk[cnt]=u;</span><br><span class="line">    <span class="keyword">if</span>(!son[u])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u],t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=son[u]&amp;&amp;v!=fa[u])dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************/</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    sum[o]=sum[o&lt;&lt;<span class="number">1</span>]+sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> ls,<span class="keyword">int</span> rs,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[o])&#123;</span><br><span class="line">        sum[o&lt;&lt;<span class="number">1</span>]=(sum[o&lt;&lt;<span class="number">1</span>]+lazy[o]*ls)%P;</span><br><span class="line">        sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+lazy[o]*rs)%P;</span><br><span class="line">        lazy[o&lt;&lt;<span class="number">1</span>]=(lazy[o&lt;&lt;<span class="number">1</span>]+lazy[o])%P;</span><br><span class="line">        lazy[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(lazy[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+lazy[o])%P;</span><br><span class="line">        lazy[o]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        sum[o]=w[rk[l]]; <span class="comment">//重新编号后的</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        sum[o]=(sum[o]+v*(r-l+<span class="number">1</span>))%P;</span><br><span class="line">        lazy[o]=(lazy[o]+v)%P;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push_down(mid-l+<span class="number">1</span>,r-mid,o);</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) update(L,R,v,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  update(L,R,v,rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    push_down(mid-l+<span class="number">1</span>,r-mid,o);</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret=(ret+querysum(L,R,lson))%P;</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  ret=(ret+querysum(L,R,rson))%P;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PathUpdate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</span><br><span class="line">        update(id[top[x]],id[x],v,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id[x]&gt;id[y]) swap(x,y);</span><br><span class="line">    update(id[x],id[y],v,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PathQuery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</span><br><span class="line">        ret=(ret+querysum(id[top[x]],id[x],<span class="number">1</span>,n,<span class="number">1</span>))%P;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id[x]&gt;id[y])swap(x,y);</span><br><span class="line">    ret=(ret+querysum(id[x],id[y],<span class="number">1</span>,n,<span class="number">1</span>))%P;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(),m=read(),root=read(),P=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        w[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) head[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        addedge(u,v);</span><br><span class="line">        addedge(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    dfs1(root,<span class="number">0</span>,<span class="number">1</span>);  <span class="comment">//注意根节点不一定是1</span></span><br><span class="line">    dfs2(root,root); </span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=read(),x,y,z;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123; <span class="comment">//更新x-y最短路径上所有点</span></span><br><span class="line">            x=read(),y=read(),z=read();</span><br><span class="line">            PathUpdate(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123; <span class="comment">//查询x-y最短路径上所有点</span></span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,PathQuery(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123; <span class="comment">//更新以x为根节点的子树</span></span><br><span class="line">            x=read(),z=read();</span><br><span class="line">            update(id[x],id[x]+siz[x]<span class="number">-1</span>,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//查询以x为根节点的子树</span></span><br><span class="line">            x=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,querysum(id[x],id[x]+siz[x]<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//边权版</span></span><br><span class="line"><span class="keyword">int</span> fa[maxn],deep[maxn],siz[maxn],son[maxn],rk[maxn],top[maxn],id[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn],w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    fa[u]=pre;deep[u]=dep;siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==pre)<span class="keyword">continue</span>;</span><br><span class="line">        dis[v]=dis[u]+e[i].v;</span><br><span class="line">        dfs1(v,u,dep+<span class="number">1</span>);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    top[u]=t;id[u]=++cnt;rk[cnt]=u;</span><br><span class="line">    <span class="keyword">if</span>(!son[u])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u],t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=son[u]&amp;&amp;v!=fa[u])dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PathQuery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</span><br><span class="line">        ans=max(ans,query(id[top[x]],id[x],<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y]) swap(x,y);</span><br><span class="line">    ans=max(ans,query(id[son[x]],id[y],<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PathUpdate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</span><br><span class="line">        update(id[top[x]],id[x],v,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y]) swap(x,y);</span><br><span class="line">    update(id[son[x]],id[y],v,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(deep[E[i].u]&lt;deep[E[i].v]) swap(E[i].u,E[i].v);</span><br><span class="line">    w[E[i].u]=E[i].w;   <span class="comment">//边权放在下面结点上变为点权</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最近公共祖先LCA"><a href="#最近公共祖先LCA" class="headerlink" title="最近公共祖先LCA"></a>最近公共祖先LCA</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倍增法</span></span><br><span class="line"><span class="keyword">int</span> deep[maxn],f[maxn],dis[maxn],p[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    deep[x]=d;</span><br><span class="line">    f[x]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(to!=pre)&#123;</span><br><span class="line">            dis[to]=dis[x]+e[i].w;</span><br><span class="line">            dfs(to,x,d+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//p[i][j]表示i结点的第2^j祖先</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            p[i][j]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)p[i][<span class="number">0</span>]=f[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(p[i][j<span class="number">-1</span>]!=<span class="number">-1</span>)</span><br><span class="line">            p[i][j]=p[p[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];<span class="comment">//i的第2^j祖先就是i的第2^(j-1)祖先的第2^(j-1)祖先</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">if</span>(deep[a]&lt;deep[b])swap(a,b);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=deep[a];i++);</span><br><span class="line">    i--;</span><br><span class="line">    <span class="comment">//使a,b两点的深度相同</span></span><br><span class="line">    <span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        <span class="keyword">if</span>(deep[a]-(<span class="number">1</span>&lt;&lt;j)&gt;=deep[b])</span><br><span class="line">        a=p[a][j];</span><br><span class="line">    <span class="keyword">if</span>(a==b)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="comment">//倍增法，每次向上进深度2^j，找到最近公共祖先的子结点</span></span><br><span class="line">    <span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[a][j]!=<span class="number">-1</span>&amp;&amp;p[a][j]!=p[b][j])&#123;</span><br><span class="line">            a=p[a][j];</span><br><span class="line">            b=p[b][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树链剖分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])swap(x,y);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;<span class="keyword">return</span> deep[x]&lt;deep[y]?x:y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线段树区间合并</span></span><br><span class="line"><span class="comment">//根据题意修改条件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;  </span><br><span class="line">    tree[o].ls=tree[lc].ls;   <span class="comment">//左端点最长连续</span></span><br><span class="line">    tree[o].rs=tree[rc].rs; <span class="comment">//右端点最长连续</span></span><br><span class="line">    tree[o].ms=max( tree[lc].rs+tree[rc].ls,max( tree[lc].ms,tree[rc].ms) ); <span class="comment">//区间最长连续</span></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[lc].ls==mid-l+<span class="number">1</span>) tree[o].ls+=tree[rc].ls;</span><br><span class="line">    <span class="keyword">if</span>(tree[rc].rs==r-mid)   tree[o].rs+=tree[lc].rs;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//对于query()也要考虑mid两侧的情况,一般分三种情况 全左,全右,左右相交,左右端点完全一致才return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间最长连续LCIS</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    lmax[o]=lmax[lc];</span><br><span class="line">    rmax[o]=rmax[rc];</span><br><span class="line">    mmax[o]=max(mmax[lc],mmax[rc]);</span><br><span class="line">    <span class="keyword">if</span>(a[mid]&lt;a[mid+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(lmax[o]==mid-l+<span class="number">1</span>) lmax[o]+=lmax[rc];</span><br><span class="line">        <span class="keyword">if</span>(rmax[o]==r-mid)   rmax[o]+=rmax[lc];</span><br><span class="line">        mmax[o]=max(mmax[o],rmax[lc]+lmax[rc]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==l&amp;&amp;r==R)&#123;</span><br><span class="line">        <span class="keyword">return</span> mmax[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> query(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(L&gt;mid)  <span class="keyword">return</span> query(L,R,rson);</span><br><span class="line">    <span class="keyword">int</span> x = query(L,mid,lson);</span><br><span class="line">    <span class="keyword">int</span> y = query(mid+<span class="number">1</span>,R,rson);</span><br><span class="line">    <span class="keyword">if</span>(a[mid]&lt;a[mid+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">int</span> z = min(mid-L+<span class="number">1</span>,rmax[lc]) + min(R-mid,lmax[rc]);</span><br><span class="line">        <span class="keyword">return</span> max(max(x,y),z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间最大子段和</span></span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>],lsum[maxn&lt;&lt;<span class="number">2</span>],rsum[maxn&lt;&lt;<span class="number">2</span>],msum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    sum[o] = sum[ls] + sum[rs];</span><br><span class="line">    msum[o] = max(max(msum[ls],msum[rs]),rsum[ls]+lsum[rs]);</span><br><span class="line">    lsum[o] = max(lsum[ls],sum[ls]+lsum[rs]);</span><br><span class="line">    rsum[o] = max(rsum[rs],sum[rs]+rsum[ls]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">sum[o]=lsum[o]=rsum[o]=msum[o]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(lson);</span><br><span class="line">build(rson);</span><br><span class="line">push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">sum[o]+=v;</span><br><span class="line">lsum[o]=rsum[o]=msum[o]=sum[o];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=mid) update(p,v,lson);</span><br><span class="line"><span class="keyword">else</span>    update(p,v,rson);</span><br><span class="line">push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//query() 区间查询与push_up同理，如果包含两个区间需要比较</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间离散化,每个结点维护[ v[l],v[l+1] )</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    r[i]++;</span><br><span class="line">    v.push_back(l[i]);v.push_back(r[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(v.begin(),v.end());</span><br><span class="line">v.erase(unique(v.begin(),v.end()),v.end());</span><br><span class="line">m=v.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    l[i] = lower_bound(v.begin(),v.end(),l[i])-v.begin()+<span class="number">1</span>;</span><br><span class="line">    r[i] = lower_bound(v.begin(),v.end(),r[i])-v.begin()+<span class="number">1</span>;</span><br><span class="line">    r[i]--;</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,m<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">update(l[i],r[i],<span class="number">1</span>,m<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//矩形面积并/交</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 205</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[N&lt;&lt;<span class="number">2</span>];    <span class="comment">//记录cnt[i]表示区间是否被覆盖 为-1时表示其左右区间状态不一致,需要下推</span></span><br><span class="line"><span class="keyword">double</span> len[N&lt;&lt;<span class="number">2</span>]; <span class="comment">//储存区间被覆盖长度 注意数据类型,每个结点维护的是 [ X[l],X[r+1] ]的区间数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> X[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> l,r,h;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(<span class="keyword">double</span> l,<span class="keyword">double</span> r,<span class="keyword">double</span> h,<span class="keyword">int</span> f):l(l),r(r),h(h),f(f)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> h&lt;b.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//void push_up(int o)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    //左右节点区间有状态不一致或者两者状态不一致则该节点区间cnt也为-1</span></span><br><span class="line"><span class="comment">//    if(cnt[o&lt;&lt;1]==-1 || cnt[o&lt;&lt;1|1]==-1) cnt[o]=-1;</span></span><br><span class="line"><span class="comment">//    else if(cnt[o&lt;&lt;1]!=cnt[o&lt;&lt;1|1])      cnt[o]=-1;</span></span><br><span class="line"><span class="comment">//    else                                 cnt[o]=cnt[o&lt;&lt;1];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    len[o]=len[o&lt;&lt;1]+len[o&lt;&lt;1|1];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt[o]) len[o] = X[r + <span class="number">1</span>] - X[l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l == r) len[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> len[o] = len[o&lt;&lt;<span class="number">1</span>] + len[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void push_down(int l,int r,int o)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    if(cnt[o]!=-1)  //当状态一致时才下推</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        int mid=l+r&gt;&gt;1;</span></span><br><span class="line"><span class="comment">//        cnt[o&lt;&lt;1]=cnt[o&lt;&lt;1|1]=cnt[o];</span></span><br><span class="line"><span class="comment">//        len[o&lt;&lt;1]=(cnt[o] ? X[mid+1]-X[l] :0);</span></span><br><span class="line"><span class="comment">//        len[o&lt;&lt;1|1]=(cnt[o] ? X[r+1]-X[mid+1] :0);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        cnt[o]=<span class="number">0</span>;</span><br><span class="line">        len[o]=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(l,r,o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line"><span class="comment">//        if(cnt[o]!=-1)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            cnt[o]+=v;</span></span><br><span class="line"><span class="comment">//            len[o]=(cnt[o] ? X[r+1]-X[l]:0); //改动覆盖次数条件求面积交</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        cnt[o] += v;</span><br><span class="line">        push_up(l,r,o);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//push_down(l,r,o);</span></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) update(L,R,v,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  update(L,R,v,rson);</span><br><span class="line">    push_up(l,r,o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ca=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)&#123;</span><br><span class="line">        <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            X[i]=x1,X[i+n]=x2;</span><br><span class="line">            e[i]=edge(x1,x2,y1,<span class="number">1</span>);</span><br><span class="line">            e[i+n]=edge(x1,x2,y2,<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(e+<span class="number">1</span>,e+<span class="number">1</span>+<span class="number">2</span>*n);</span><br><span class="line">        sort(X+<span class="number">1</span>,X+<span class="number">1</span>+<span class="number">2</span>*n);</span><br><span class="line">        <span class="keyword">int</span> m=unique(X+<span class="number">1</span>,X+<span class="number">1</span>+<span class="number">2</span>*n)-X<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//build(1,m-1,1);         //m个不同的点分成m-1个区间</span></span><br><span class="line">        <span class="built_in">memset</span>(len,<span class="number">0</span>,<span class="keyword">sizeof</span>(len));</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l=lower_bound(X+<span class="number">1</span>,X+<span class="number">1</span>+m,e[i].l)-X;</span><br><span class="line">            <span class="keyword">int</span> r=lower_bound(X+<span class="number">1</span>,X+<span class="number">1</span>+m,e[i].r)-X<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//printf("%d %d\n",l,r);</span></span><br><span class="line">            update(l,r,e[i].f,<span class="number">1</span>,m<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//printf("%f  %f  %f\n",len[1],e[i+1].h-e[i].h,ans);</span></span><br><span class="line">            ans+=len[<span class="number">1</span>]*(e[i+<span class="number">1</span>].h-e[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>,ca++);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2f\n"</span>,ans);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//单点修改字符,区间查询是否为回文串</span></span><br><span class="line"><span class="comment">//多项式hash,维护正反串的hash值</span></span><br><span class="line"><span class="comment">//h[l,r] = s[l]*p[l]+s[l+1]*p[l+1]+...+s[r]*p[r],区间查询后要移位修正同等幂</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        sum[<span class="number">0</span>][o]=(ull)s[l]*p[l];</span><br><span class="line">        sum[<span class="number">1</span>][o]=(ull)s[n-l+<span class="number">1</span>]*p[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">    <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'c'</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;x,ch);</span><br><span class="line">        update(<span class="number">0</span>,x,ch[<span class="number">0</span>],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        update(<span class="number">1</span>,n-x+<span class="number">1</span>,ch[<span class="number">0</span>],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) swap(l,r);</span><br><span class="line">        ull ss = query(<span class="number">0</span>,l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        ull tt = query(<span class="number">1</span>,n-r+<span class="number">1</span>,n-l+<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> llen = l<span class="number">-1</span>,rlen=n-r;</span><br><span class="line">        <span class="keyword">if</span>(llen&gt;rlen)  tt*=p[llen-rlen];</span><br><span class="line">        <span class="keyword">else</span>           ss*=p[rlen-llen];</span><br><span class="line">        <span class="keyword">if</span>(ss==tt) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span>       <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态区间第k小</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=maxn*<span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> T[maxn],L[maxm],R[maxm],sum[maxm];</span><br><span class="line"><span class="keyword">int</span> sz[maxn],h[maxn]; <span class="comment">//sz为原序列,h为离散化之后的序列</span></span><br><span class="line"><span class="keyword">int</span> n,q,ql,qr,k,tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(L[rt],l,mid);</span><br><span class="line">    build(R[rt],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pre,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    L[rt]=L[pre];</span><br><span class="line">    R[rt]=R[pre];</span><br><span class="line">    sum[rt]=sum[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) update(L[rt],l,mid,L[pre],x);</span><br><span class="line">    <span class="keyword">else</span> update(R[rt],mid+<span class="number">1</span>,r,R[pre],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> e,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res=sum[L[e]]-sum[L[s]];</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= res) <span class="keyword">return</span> query(L[s],L[e],l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(R[s],R[e],mid+<span class="number">1</span>,r,k-res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;q);</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]);</span><br><span class="line">        h[i]=sz[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(h+<span class="number">1</span>,h+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> num=unique(h+<span class="number">1</span>,h+<span class="number">1</span>+n)-(h+<span class="number">1</span>);</span><br><span class="line">    build(T[<span class="number">0</span>],<span class="number">1</span>,num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) update(T[i],<span class="number">1</span>,num,T[i<span class="number">-1</span>],lower_bound(h+<span class="number">1</span>,h+<span class="number">1</span>+num,sz[i])-(h));</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;ql,&amp;qr,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,h[query(T[ql<span class="number">-1</span>],T[qr],<span class="number">1</span>,num,k)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态区间第k小</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T[maxn],S[maxn],L[maxn*<span class="number">32</span>],R[maxn*<span class="number">32</span>],sum[maxn*<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> sz[maxn],h[maxn];</span><br><span class="line"><span class="keyword">int</span> ul[maxn],ur[maxn];</span><br><span class="line"><span class="keyword">int</span> tot,num,n,q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,k;</span><br><span class="line">    <span class="keyword">bool</span> flag; <span class="comment">//ture代表Q，false代表C</span></span><br><span class="line">&#125;Q[maxm];  <span class="comment">//存储询问</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    rt = ++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(L[rt],l,mid);</span><br><span class="line">    build(R[rt],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    rt = ++tot;</span><br><span class="line">    L[rt] = L[pre];</span><br><span class="line">    R[rt] = R[pre];</span><br><span class="line">    sum[rt] = sum[pre]+val;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) update(L[rt],L[pre],l,mid,x,val);</span><br><span class="line">    <span class="keyword">else</span> update(R[rt],R[pre],mid+<span class="number">1</span>,r,x,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = lower_bound(h+<span class="number">1</span>,h+<span class="number">1</span>+num,sz[x])-h;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">        update(S[x],S[x],<span class="number">1</span>,num,res,val);</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag) res += sum[L[ur[x]]];</span><br><span class="line">        <span class="keyword">else</span> res += sum[L[ul[x]]];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> e,<span class="keyword">int</span> ts,<span class="keyword">int</span> te,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = Sum(e,<span class="literal">true</span>)-Sum(s,<span class="literal">false</span>)+sum[L[te]]-sum[L[ts]];</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=res)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=e;i;i-=lowbit(i)) ur[i] = L[ur[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i;i-=lowbit(i)) ul[i] = L[ul[i]];</span><br><span class="line">        <span class="keyword">return</span> query(s,e,L[ts],L[te],l,mid,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=e;i;i-=lowbit(i)) ur[i] = R[ur[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i;i-=lowbit(i)) ul[i] = R[ul[i]];</span><br><span class="line">        <span class="keyword">return</span> query(s,e,R[ts],R[te],mid+<span class="number">1</span>,r,k-res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,sz+i),h[++num]=sz[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;Q[i].l,&amp;Q[i].r,&amp;Q[i].k);</span><br><span class="line">                Q[i].flag=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;Q[i].l,&amp;Q[i].r);</span><br><span class="line">                Q[i].flag=<span class="literal">false</span>;</span><br><span class="line">                h[++num]=Q[i].r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(h+<span class="number">1</span>,h+<span class="number">1</span>+num);</span><br><span class="line">        <span class="keyword">int</span> tmp = unique(h+<span class="number">1</span>,h+<span class="number">1</span>+num)-h<span class="number">-1</span>;</span><br><span class="line">        num = tmp;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        build(T[<span class="number">0</span>],<span class="number">1</span>,num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) update(T[i],T[i<span class="number">-1</span>],<span class="number">1</span>,num,lower_bound(h+<span class="number">1</span>,h+<span class="number">1</span>+num,sz[i])-h,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S[i] = T[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Q[i].flag)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=Q[i].r;j;j-=lowbit(j)) ur[j] = S[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=Q[i].l<span class="number">-1</span>;j;j-=lowbit(j)) ul[j] = S[j];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,h[query(Q[i].l<span class="number">-1</span>,Q[i].r,T[Q[i].l<span class="number">-1</span>],T[Q[i].r],<span class="number">1</span>,num,Q[i].k)]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                add(Q[i].l,<span class="number">-1</span>);</span><br><span class="line">                sz[Q[i].l] = Q[i].r;</span><br><span class="line">                add(Q[i].l,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可持久化单点修改单点查询</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> l, r, val; &#125;;</span><br><span class="line">node tr[maxn * <span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> cnt, root[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clone</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[++cnt] = tr[p];</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].val = a[l];</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = build(tr[p].l, l, mid);</span><br><span class="line">    tr[p].r = build(tr[p].r, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = clone(p);</span><br><span class="line">    <span class="keyword">if</span>(l == r) tr[p].val = val;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= mid) tr[p].l = update(tr[p].l, l, mid, pos, val);</span><br><span class="line">        <span class="keyword">else</span> tr[p].r = update(tr[p].r, mid + <span class="number">1</span>, r, pos, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[p].val;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="keyword">return</span> query(tr[p].l, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(tr[p].r, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    root[<span class="number">0</span>] = build(<span class="number">0</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v,op,x,y;<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v,&amp;op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line">            root[i] = update(root[v], <span class="number">1</span>, n, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(root[v], <span class="number">1</span>, n, x));</span><br><span class="line">            root[i] = root[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可持久化区间修改区间查询</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dlson l,mid,lson[nrt]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drson mid+1,r,rson[nrt]</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> T[maxn],tot,lson[maxn*<span class="number">20</span>],rson[maxn*<span class="number">20</span>];</span><br><span class="line">ll c[maxn*<span class="number">20</span>],cur[maxn*<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    c[rt]=c[lson[rt]]+c[rson[rt]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;nrt)</span></span>&#123;</span><br><span class="line">    nrt=tot++;cur[nrt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,c+nrt);<span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(dlson);build(drson);push_up(nrt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,ll val,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;nrt,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    nrt=tot++;</span><br><span class="line">    lson[nrt]=lson[rt];</span><br><span class="line">    rson[nrt]=rson[rt];</span><br><span class="line">    c[nrt]=c[rt]+(R-L+<span class="number">1</span>)*val;</span><br><span class="line">    cur[nrt]=cur[rt];</span><br><span class="line">    <span class="keyword">if</span>(L==l&amp;&amp;R==r)&#123;</span><br><span class="line">        cur[nrt]+=val;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)update(L,R,val,dlson,lson[rt]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)update(L,R,val,drson,rson[rt]);</span><br><span class="line">    <span class="keyword">else</span> update(L,mid,val,dlson,lson[rt]),update(mid+<span class="number">1</span>,R,val,drson,rson[rt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> nrt,ll add)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==l&amp;&amp;R==r)<span class="keyword">return</span> c[nrt]+(R-L+<span class="number">1</span>)*add;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)<span class="keyword">return</span> query(L,R,dlson,add+cur[nrt]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)<span class="keyword">return</span> query(L,R,drson,add+cur[nrt]);</span><br><span class="line">    <span class="keyword">return</span> query(L,mid,dlson,add+cur[nrt])+query(mid+<span class="number">1</span>,R,drson,add+cur[nrt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    build(<span class="number">1</span>,n,T[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> l,r,d,t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'C'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;d);</span><br><span class="line">            update(l,r,d,<span class="number">1</span>,n,T[time+<span class="number">1</span>],T[time]);time++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(l,r,<span class="number">1</span>,n,T[time],<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'H'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;t);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(l,r,<span class="number">1</span>,n,T[t],<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">            tot=T[t+<span class="number">1</span>];</span><br><span class="line">            time=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.插入 x 数</span></span><br><span class="line"><span class="comment">2.删除 x 数(若有多个相同的数，因只删除一个)</span></span><br><span class="line"><span class="comment">3.查询 x 数的排名(排名定义为比当前数小的数的个数 +1+1 。若有多个相同的数，因输出最小的排名)</span></span><br><span class="line"><span class="comment">4.查询排名为 x 的数</span></span><br><span class="line"><span class="comment">5.求 x 的前驱(前驱定义为小于 x ，且最大的数)</span></span><br><span class="line"><span class="comment">6.求 x 的后继(后继定义为大于 x ，且最小的数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mes(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> son[N][<span class="number">2</span>],f[N],cou[N],siz[N],key[N];</span><br><span class="line"><span class="keyword">int</span> root,sz;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">son[x][<span class="number">0</span>]=son[x][<span class="number">1</span>]=cou[x]=f[x]=siz[x]=key[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> son[f[x]][<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x) &#123;</span><br><span class="line">siz[x]=cou[x];</span><br><span class="line"><span class="keyword">if</span>(son[x][<span class="number">0</span>])siz[x]+=siz[son[x][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(son[x][<span class="number">1</span>])siz[x]+=siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> old=f[x],oldf=f[old],whichson=get(x);</span><br><span class="line">son[old][whichson]=son[x][whichson^<span class="number">1</span>],f[son[old][whichson]]=old;</span><br><span class="line">son[x][whichson^<span class="number">1</span>]=old,f[old]=x;</span><br><span class="line">f[x]=oldf;</span><br><span class="line"><span class="keyword">if</span>(oldf) &#123;</span><br><span class="line">son[oldf][son[oldf][<span class="number">1</span>]==old]=x;</span><br><span class="line">&#125;</span><br><span class="line">update(old);</span><br><span class="line">update(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> fa; (fa=f[x]); rotate(x)) &#123;</span><br><span class="line"><span class="keyword">if</span>(f[fa]) &#123;</span><br><span class="line">rotate((get(x)==get(fa))?fa:x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="number">0</span>) &#123;</span><br><span class="line">sz++;</span><br><span class="line">son[sz][<span class="number">0</span>]=son[sz][<span class="number">1</span>]=f[sz]=<span class="number">0</span>;</span><br><span class="line">key[sz]=x;</span><br><span class="line">cou[sz]=siz[sz]=<span class="number">1</span>;</span><br><span class="line">root=sz;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now=root,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x==key[now]) &#123;</span><br><span class="line">cou[now]++;</span><br><span class="line">update(now);</span><br><span class="line">update(fa);</span><br><span class="line">splay(now);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fa=now;</span><br><span class="line">now=son[now][key[now]&lt;x];</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">0</span>) &#123;</span><br><span class="line">sz++;</span><br><span class="line">f[sz]=fa;</span><br><span class="line">son[sz][<span class="number">0</span>]=son[sz][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">cou[sz]=siz[sz]=<span class="number">1</span>;</span><br><span class="line">son[fa][key[fa]&lt;x]=sz;</span><br><span class="line">key[sz]=x;</span><br><span class="line">update(fa);</span><br><span class="line">splay(sz);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=root,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;key[now]) &#123;</span><br><span class="line">now=son[now][<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans+=(son[now][<span class="number">0</span>]?siz[son[now][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(x==key[now]) &#123;</span><br><span class="line">splay(now);</span><br><span class="line"><span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=cou[now];</span><br><span class="line">now=son[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findx</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(son[now][<span class="number">0</span>] &amp;&amp; x&lt;=siz[son[now][<span class="number">0</span>]]) &#123;</span><br><span class="line">now=son[now][<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> temp=(son[now][<span class="number">0</span>]?siz[son[now][<span class="number">0</span>]]:<span class="number">0</span>)+cou[now];</span><br><span class="line"><span class="keyword">if</span>(x&lt;=temp)<span class="keyword">return</span> key[now];</span><br><span class="line">x-=temp;</span><br><span class="line">now=son[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=son[root][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(son[now][<span class="number">1</span>])now=son[now][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=son[root][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(son[now][<span class="number">0</span>])now=son[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> whatever=find(x);</span><br><span class="line"><span class="keyword">if</span>(cou[root]&gt;<span class="number">1</span>) &#123;</span><br><span class="line">cou[root]--;</span><br><span class="line">update(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!son[root][<span class="number">0</span>] &amp;&amp; !son[root][<span class="number">1</span>]) &#123;</span><br><span class="line">clear(root);</span><br><span class="line">root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!son[root][<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> oldroot=root;</span><br><span class="line">root=son[root][<span class="number">1</span>];</span><br><span class="line">f[root]=<span class="number">0</span>;</span><br><span class="line">clear(oldroot);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!son[root][<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> oldroot=root;</span><br><span class="line">root=son[root][<span class="number">0</span>];</span><br><span class="line">f[root]=<span class="number">0</span>;</span><br><span class="line">clear(oldroot);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> leftbig=pre(),oldroot=root;</span><br><span class="line">splay(leftbig);</span><br><span class="line">son[root][<span class="number">1</span>]=son[oldroot][<span class="number">1</span>];</span><br><span class="line">f[son[root][<span class="number">1</span>]]=root;</span><br><span class="line">clear(oldroot);</span><br><span class="line">update(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;op,&amp;x);</span><br><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:insert(x);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:del(x);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,find(x));<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,findx(x));<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:insert(x);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,key[pre()]);del(x);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:insert(x);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,key[next()]);del(x);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给出一个数字序列，有6种操作：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　　　（1） ADD x y d： 第x个数到第y个数加d 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　　　（2） REVERSE x y ： 将区间[x,y]中的数翻转 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　　　（3） REVOLVE x y t ：将区间[x,y]旋转t次，如1 2 3 4 5 旋转2次后就变成4 5 1 2 3 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　　　（4） INSERT x p ：在第x个数后面插入p 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　　　（5） DELETE x ：删除第x个数 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　　　（6） MIN x y ： 查询区间[x,y]中的最小值 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SplayTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, root;</span><br><span class="line">    ll Val[maxn],Sum[maxn];</span><br><span class="line">    <span class="keyword">int</span> Add[maxn], Min[maxn], Rev[maxn];</span><br><span class="line">    <span class="keyword">int</span> fa[maxn], c[maxn][<span class="number">2</span>], size[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = root = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push_up</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        Min[u] = Val[u];</span><br><span class="line">        size[u] = size[c[u][<span class="number">0</span>]] + size[c[u][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">        Sum[u] = Sum[c[u][<span class="number">0</span>]] + Sum[c[u][<span class="number">1</span>]] + Val[u];</span><br><span class="line">        <span class="keyword">if</span>(c[u][<span class="number">0</span>])</span><br><span class="line">            Min[u] = min(Min[u], Min[c[u][<span class="number">0</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(c[u][<span class="number">1</span>])</span><br><span class="line">            Min[u] = min(Min[u], Min[c[u][<span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[u]) Push(fa[u]);</span><br><span class="line">        Push_down(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push_down</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Add[u]) &#123;</span><br><span class="line">            ll w = Add[u];</span><br><span class="line">            <span class="keyword">if</span>(c[u][<span class="number">0</span>])</span><br><span class="line">                Add[c[u][<span class="number">0</span>]]+=w,Val[c[u][<span class="number">0</span>]]+=w,Min[c[u][<span class="number">0</span>]]+=w,Sum[c[u][<span class="number">0</span>]]+=w*size[c[u][<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">if</span>(c[u][<span class="number">1</span>])</span><br><span class="line">                Add[c[u][<span class="number">1</span>]]+=w,Val[c[u][<span class="number">1</span>]]+=w,Min[c[u][<span class="number">1</span>]]+=w,Sum[c[u][<span class="number">1</span>]]+=w*size[c[u][<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Rev[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[u][<span class="number">0</span>])</span><br><span class="line">                Rev[c[u][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(c[u][<span class="number">1</span>])</span><br><span class="line">                Rev[c[u][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">            swap(c[u][<span class="number">0</span>], c[u][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Add[u]=Rev[u]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        size[++n] = <span class="number">1</span>;</span><br><span class="line">        Add[n] = Rev[n] = <span class="number">0</span>;</span><br><span class="line">        Val[n] = Min[n] = Sum[n] = key;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = fa[u], w = fa[v], t = c[v][<span class="number">1</span>] == u;</span><br><span class="line">        fa[c[u][t^<span class="number">1</span>]] = v, c[v][t] = c[u][t^<span class="number">1</span>];</span><br><span class="line">        c[u][t^<span class="number">1</span>] = v, fa[u] = w, fa[v] = u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==v) root = u;</span><br><span class="line">        <span class="keyword">else</span> c[w][c[w][<span class="number">1</span>]==v] = u;</span><br><span class="line">        Push_up(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        Push(u);</span><br><span class="line">        <span class="keyword">while</span>(fa[u] != p) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = fa[u], w = fa[v];</span><br><span class="line">            <span class="keyword">if</span>(fa[v] == p)</span><br><span class="line">                rotate(u);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((c[v][<span class="number">0</span>] == u) == (c[w][<span class="number">0</span>] == v))</span><br><span class="line">                rotate(v), rotate(u);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rotate(u), rotate(u);</span><br><span class="line">        &#125;</span><br><span class="line">        Push_up(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        Newnode(key);</span><br><span class="line">        c[root][<span class="number">1</span>] = n;</span><br><span class="line">        fa[n] = root;</span><br><span class="line">        Splay(n, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Push_down(u);</span><br><span class="line">        <span class="keyword">int</span> t = size[c[u][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == k)</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt; k)</span><br><span class="line">                <span class="keyword">return</span> find(c[u][<span class="number">0</span>], k);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> find(c[u][<span class="number">1</span>], k-t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(root, u), y = find(root, v+<span class="number">2</span>);</span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        Add[c[y][<span class="number">0</span>]] += w;</span><br><span class="line">        Val[c[y][<span class="number">0</span>]] += w;</span><br><span class="line">        Min[c[y][<span class="number">0</span>]] += w;</span><br><span class="line">        Sum[c[y][<span class="number">0</span>]] += w*size[c[y][<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(root, u), y = find(root, v+<span class="number">2</span>);</span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        Rev[c[y][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Revolve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = v - u + <span class="number">1</span>;</span><br><span class="line">        w %= m;</span><br><span class="line">        w = (w + m) % m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = find(root, u), y = find(root, u+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> _x = find(root, v-w+<span class="number">1</span>), _y = find(root, v+<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Splay(_x, <span class="number">0</span>), Splay(_y, root);</span><br><span class="line">        <span class="keyword">int</span> p = c[_y][<span class="number">0</span>];</span><br><span class="line">        c[_y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        c[y][<span class="number">0</span>] = p;</span><br><span class="line">        fa[p] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Join</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(root, u+<span class="number">1</span>), y = find(root, u+<span class="number">2</span>);</span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        c[y][<span class="number">0</span>] = Newnode(v);</span><br><span class="line">        fa[n] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(root, u), y = find(root, u+<span class="number">2</span>);</span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        c[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">querymin</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(root, u), y = find(root, v+<span class="number">2</span>);</span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        <span class="keyword">return</span> Min[c[y][<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(root, u), y = find(root, v+<span class="number">2</span>);</span><br><span class="line">        Splay(x, <span class="number">0</span>), Splay(y, root);</span><br><span class="line">        <span class="keyword">return</span> Sum[c[y][<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//中序遍历最后结果</span></span><br><span class="line">        <span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">        Push_down(u);</span><br><span class="line">        inorder(c[u][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(Val[u]!=INF) <span class="built_in">printf</span>(<span class="string">"%d "</span>,Val[u]);</span><br><span class="line">        inorder(c[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Spt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n,q,l,r,v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        Spt.init();</span><br><span class="line">        Spt.root = Spt.Newnode(INF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">            Spt.insert(v);</span><br><span class="line">        &#125;</span><br><span class="line">        Spt.insert(INF);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'A'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;v);</span><br><span class="line">                Spt.update(l, r, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'E'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                Spt.Reverse(l, r);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;v);</span><br><span class="line">                Spt.Revolve(l, r, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'I'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                Spt.Join(l, r);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'D'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l);</span><br><span class="line">                Spt.del(l);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'M'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Spt.querymin(l, r));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Spt.inorder(Spt.root);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="无旋Treap"><a href="#无旋Treap" class="headerlink" title="无旋Treap"></a>无旋Treap</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) arr[x].ch[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) arr[x].ch[1]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>],siz,val,key;</span><br><span class="line">&#125;arr[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    arr[o].siz=arr[ls(o)].siz+arr[rs(o)].siz+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        x=y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[root].val&lt;=value) x=root,Split(rs(root),rs(x),y,value);</span><br><span class="line">    <span class="keyword">else</span> y=root,Split(ls(root),x,ls(y),value);</span><br><span class="line">    push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||!y)&#123;</span><br><span class="line">        root=x+y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[x].key&lt;arr[y].key) root=x,Merge(rs(root),rs(x),y);</span><br><span class="line">    <span class="keyword">else</span> root=y,Merge(ls(root),x,ls(y));</span><br><span class="line">    push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=++tot;</span><br><span class="line">    arr[z].val=value,arr[z].siz=<span class="number">1</span>,arr[z].key=rand();</span><br><span class="line">    Split(root,x,y,value);</span><br><span class="line">    Merge(x,x,z);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Erase</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value);</span><br><span class="line">    Split(x,x,z,value<span class="number">-1</span>);</span><br><span class="line">    Merge(z,ls(z),rs(z));</span><br><span class="line">    Merge(x,x,z);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(arr[ls(root)].siz+<span class="number">1</span>!=k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[ls(root)].siz&gt;=k) root=ls(root);</span><br><span class="line">        <span class="keyword">else</span> k-=arr[ls(root)].siz+<span class="number">1</span>,root=rs(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[root].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> res=arr[x].siz+<span class="number">1</span>;</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> res=Kth(x,arr[x].siz);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Suf</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value);</span><br><span class="line">    <span class="keyword">int</span> res=Kth(y,<span class="number">1</span>);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,op,x,root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(<span class="number">19260817</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) Insert(root,x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>) Erase(root,x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rank(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Kth(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Pre(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Suf(root,x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.查询k在区间内的排名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.查询区间内排名为k的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.修改某一位值上的数值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.查询k在区间内的前驱(前驱定义为严格小于x，且最大的数，若不存在输出-2147483647)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.查询k在区间内的后继(后继定义为严格大于x，且最小的数，若不存在输出2147483647)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) arr[x].ch[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) arr[x].ch[1]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>],siz,val,key;</span><br><span class="line">&#125;arr[maxn*<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    arr[o].siz=arr[ls(o)].siz+arr[rs(o)].siz+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        x=y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[root].val&lt;=value) x=root,Split(rs(root),rs(x),y,value);</span><br><span class="line">    <span class="keyword">else</span> y=root,Split(ls(root),x,ls(y),value);</span><br><span class="line">    push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||!y)&#123;</span><br><span class="line">        root=x+y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[x].key&lt;arr[y].key) root=x,Merge(rs(root),rs(x),y);</span><br><span class="line">    <span class="keyword">else</span> root=y,Merge(ls(root),x,ls(y));</span><br><span class="line">    push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=++tot;</span><br><span class="line">    arr[z].val=value,arr[z].siz=<span class="number">1</span>,arr[z].key=rand();</span><br><span class="line">    Split(root,x,y,value);</span><br><span class="line">    Merge(x,x,z);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Erase</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value);</span><br><span class="line">    Split(x,x,z,value<span class="number">-1</span>);</span><br><span class="line">    Merge(z,ls(z),rs(z));</span><br><span class="line">    Merge(x,x,z);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(arr[ls(root)].siz+<span class="number">1</span>!=k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[ls(root)].siz&gt;=k) root=ls(root);</span><br><span class="line">        <span class="keyword">else</span> k-=arr[ls(root)].siz+<span class="number">1</span>,root=rs(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[root].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> res=arr[x].siz;</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> res= -INF; <span class="comment">//可能无前驱</span></span><br><span class="line">    <span class="keyword">if</span>(arr[x].siz) res=Kth(x,arr[x].siz);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Suf</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    Split(root,x,y,value);</span><br><span class="line">    <span class="keyword">int</span> res=INF; <span class="comment">//可能无后继</span></span><br><span class="line">    <span class="keyword">if</span>(arr[y].siz) res=Kth(y,<span class="number">1</span>);</span><br><span class="line">    Merge(root,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T[maxn&lt;&lt;<span class="number">2</span>],a[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> value,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Insert(T[o],value);</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) Add(pos,value,lson);</span><br><span class="line">    <span class="keyword">else</span>         Add(pos,value,rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> value,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    Erase(T[o],value);</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) Delete(pos,value,lson);</span><br><span class="line">    <span class="keyword">else</span>         Delete(pos,value,rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query_Rank</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> value,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> Rank(T[o],value);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) res+=Query_Rank(L,R,value,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  res+=Query_Rank(L,R,value,rson);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query_Pre</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> value,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> Pre(T[o],value);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=-INF;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) res=max(res,Query_Pre(L,R,value,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  res=max(res,Query_Pre(L,R,value,rson));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query_Suf</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> value,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> Suf(T[o],value);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=INF;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) res=min(res,Query_Suf(L,R,value,lson));</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)  res=min(res,Query_Suf(L,R,value,rson));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span> || <span class="string">'9'</span>&lt;ch) f|=ch==<span class="string">'-'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch &amp;&amp; ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>, ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,op,l,r,pos,k,root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(<span class="number">19260817</span>);</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Add(i,a[i],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            l=read(),r=read(),k=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query_Rank(l,r,k,<span class="number">1</span>,n,<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            l=read(),r=read(),k=read();</span><br><span class="line">            <span class="keyword">int</span> L=<span class="number">1</span>,R=<span class="number">1e8</span>;</span><br><span class="line">            <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid=(L+R+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(Query_Rank(l,r,mid,<span class="number">1</span>,n,<span class="number">1</span>)&lt;k) L=mid;</span><br><span class="line">                <span class="keyword">else</span> R=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">            pos=read(),k=read();</span><br><span class="line">            Delete(pos,a[pos],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            a[pos]=k;</span><br><span class="line">            Add(pos,a[pos],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">            l=read(),r=read(),k=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query_Pre(l,r,k,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">5</span>)&#123;</span><br><span class="line">            l=read(),r=read(),k=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query_Suf(l,r,k,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp,<span class="literal">true</span>,<span class="keyword">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">0</span>]=isp[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    isp[<span class="number">2</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i]) p[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;p[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">            isp[p[j]*i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="大数质因数分解Pollard-rho"><a href="#大数质因数分解Pollard-rho" class="headerlink" title="大数质因数分解Pollard_rho"></a>大数质因数分解Pollard_rho</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-x,y);</span><br><span class="line">    <span class="keyword">return</span> y?gcd(y,x%y):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Pollard_rho</span><span class="params">(ll n,ll t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,k=<span class="number">2</span>;</span><br><span class="line">    ll x0=rand()%n,y=x0;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x0=(qmul(x0,x0,n)+t)%n;</span><br><span class="line">        ll d=gcd(y-x0,n);</span><br><span class="line">        <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=n) <span class="keyword">return</span> d;  </span><br><span class="line">        <span class="keyword">if</span>(y==x0) <span class="keyword">return</span> n;  </span><br><span class="line">        <span class="keyword">if</span>(i==k) y=x0,k&lt;&lt;=<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line">ll fac[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findfac</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (Miller_Rabin(n)) &#123;</span><br><span class="line">        fac[tot++]=n;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll p=n;</span><br><span class="line">    <span class="keyword">while</span> (p&gt;=n) p=Pollard_rho(p,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">    findfac(p);findfac(n/p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="快速幂-快速乘"><a href="#快速幂-快速乘" class="headerlink" title="快速幂/快速乘"></a>快速幂/快速乘</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a^b%p</span></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res*a)%p;</span><br><span class="line">        a=(a*a)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a*b%p</span></span><br><span class="line"><span class="function">ll <span class="title">qmul</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%p;</span><br><span class="line">        a=(a+a)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=((__int128)x*y)%p</span><br><span class="line"></span><br><span class="line">ll qmul(ll x,ll y,ll p)&#123;</span><br><span class="line">    ll z=(ld)x/p*y;</span><br><span class="line">    ll res=(ull)x*y-(ull)z*p;</span><br><span class="line">    <span class="keyword">return</span> (res+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//十进制快速幂 a^ss % mod</span></span><br><span class="line"><span class="function">ll <span class="title">pow2</span><span class="params">(ll a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll sum=a%mod;n;n&gt;&gt;=<span class="number">1</span>,sum=sum*sum%mod) <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=ans*sum%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pow10</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll sum=a,ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">int</span> x = b%<span class="number">10</span>;</span><br><span class="line">b/=<span class="number">10</span>;</span><br><span class="line">ans=ans*pow2(sum,x)%mod;</span><br><span class="line">        sum=pow2(sum,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Lucas组合数取模"><a href="#Lucas组合数取模" class="headerlink" title="Lucas组合数取模"></a>Lucas组合数取模</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求解C(n,m)%P</span></span><br><span class="line"><span class="comment">//杨辉三角</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            C[i][j] = C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//C[i][j] = (C[i-1][j]+C[i-1][j-1])%MOD;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//P为素数且较小可以阶乘打表</span></span><br><span class="line">ll fac[maxn];</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>  fac[n]*qpow(fac[m]*fac[n-m],p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>  (C(n%p,m%p,p)*Lucas(n/p,m/p,p))%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//P为素数且较大</span></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll x, ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qpow(x,p<span class="number">-2</span>,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll up=<span class="number">1</span>,down=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-m+<span class="number">1</span>;i&lt;=n;i++) up=up*i%p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)down=down*i%p;</span><br><span class="line">    <span class="keyword">return</span> up*inv(down,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> C(n%p,m%p,p)*Lucas(n/p,m/p,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//P不为素数</span></span><br><span class="line"><span class="function">ll <span class="title">extgcd</span><span class="params">(ll a,ll b,ll&amp; x,ll&amp; y)</span></span>&#123;</span><br><span class="line">    ll d = a;</span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        d=extgcd(b,a%b,y,x);</span><br><span class="line">        y-=(a/b)*x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mod_inverse</span><span class="params">(ll a,ll m)</span></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    ll d=extgcd(a,m,x,y);</span><br><span class="line">    <span class="keyword">return</span> d==<span class="number">1</span>?(m+x%m)%m:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Mul</span><span class="params">(ll n,ll pi,ll pk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n/pk)&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=pk;i++)</span><br><span class="line">            <span class="keyword">if</span>(i%pi)ans=ans*i%pk;</span><br><span class="line">        ans=qpow(ans,n/pk,pk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=n%pk;i++)</span><br><span class="line">        <span class="keyword">if</span>(i%pi) ans=ans*i%pk;</span><br><span class="line">    <span class="keyword">return</span> ans*Mul(n/pi,pi,pk)%pk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p,ll pi,ll pk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll a=Mul(n,pi,pk),b=Mul(m,pi,pk),c=Mul(n-m,pi,pk);</span><br><span class="line">    ll k=<span class="number">0</span>,ans;</span><br><span class="line">    <span class="keyword">for</span>(ll i=n;i;i/=pi) k+=i/pi;</span><br><span class="line">    <span class="keyword">for</span>(ll i=m;i;i/=pi) k-=i/pi;</span><br><span class="line">    <span class="keyword">for</span>(ll i=n-m;i;i/=pi) k-=i/pi;</span><br><span class="line">    ans=a*mod_inverse(b,pk)%pk*mod_inverse(c,pk)%pk*qpow(pi,k,pk)%pk;</span><br><span class="line">    ans=ans*(p/pk)%p*mod_inverse(p/pk,pk)%p;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    ll x=p;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=p;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ll pk=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>) pk*=i,x/=i;</span><br><span class="line">            ans=(ans+C(n,m,p,i,pk))%p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Miller-Pabin-素数判定"><a href="#Miller-Pabin-素数判定" class="headerlink" title="Miller_Pabin 素数判定"></a>Miller_Pabin 素数判定</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 18位素数：154590409516822759</span></span><br><span class="line"><span class="comment">// 19位素数：2305843009213693951 (梅森素数)</span></span><br><span class="line"><span class="comment">// 19位素数：4384957924686954497</span></span><br><span class="line">LL prime[<span class="number">6</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">233</span>, <span class="number">331</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">qmul</span><span class="params">(LL x, LL y, LL mod)</span> </span>&#123; <span class="comment">// 乘法防止溢出， 如果p * p不爆LL的话可以直接乘； O(1)乘法或者转化成二进制加法</span></span><br><span class="line">    <span class="comment">//return (x * y - (long long)(x / (long double)mod * y + 1e-3) *mod + mod) % mod;</span></span><br><span class="line">LL ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(y) &#123;</span><br><span class="line"><span class="keyword">if</span>(y &amp; <span class="number">1</span>)</span><br><span class="line">ret = (ret + x) % mod;</span><br><span class="line">x = x * <span class="number">2</span> % mod;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL n, LL mod)</span> </span>&#123;</span><br><span class="line">    LL ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = qmul(ret, a, mod);</span><br><span class="line">        a = qmul(a, a, mod);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(LL p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="number">2</span> &amp;&amp; p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL s = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(! (s &amp; <span class="number">1</span>)) s &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p == prime[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        LL t = s, m = qpow(prime[i], s, p);</span><br><span class="line">        <span class="keyword">while</span>(t != p - <span class="number">1</span> &amp;&amp; m != <span class="number">1</span> &amp;&amp; m != p - <span class="number">1</span>) &#123;</span><br><span class="line">            m = qmul(m, m, p);</span><br><span class="line">            t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m != p - <span class="number">1</span> &amp;&amp; !(t &amp; <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BM递推"><a href="#BM递推" class="headerlink" title="BM递推"></a>BM递推</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (long long i=a;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (long long i=n-1;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((long long)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll a,ll b)</span> </span>&#123;ll res=<span class="number">1</span>;a%=mod; assert(b&gt;=<span class="number">0</span>); <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="comment">// head</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> _,n;</span><br><span class="line"><span class="keyword">namespace</span> linear_seq</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> N=<span class="number">10010</span>;</span><br><span class="line">    ll res[N],base[N],_c[N],_md[N];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; Md;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,k+k) _c[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,k) <span class="keyword">if</span> (a[i]) rep(j,<span class="number">0</span>,k)</span><br><span class="line">            _c[i+j]=(_c[i+j]+a[i]*b[j])%mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i=k+k<span class="number">-1</span>;i&gt;=k;i--) <span class="keyword">if</span> (_c[i])</span><br><span class="line">            rep(j,<span class="number">0</span>,SZ(Md)) _c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod;</span><br><span class="line">        rep(i,<span class="number">0</span>,k) a[i]=_c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(ll n,VI a,VI b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// a 系数 b 初值 b[n+1]=a[0]*b[n]+...</span></span><br><span class="line"><span class="comment">//        printf("%d\n",SZ(b));</span></span><br><span class="line">        ll ans=<span class="number">0</span>,pnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> k=SZ(a);</span><br><span class="line">        assert(SZ(a)==SZ(b));</span><br><span class="line">        rep(i,<span class="number">0</span>,k) _md[k<span class="number">-1</span>-i]=-a[i];_md[k]=<span class="number">1</span>;</span><br><span class="line">        Md.clear();</span><br><span class="line">        rep(i,<span class="number">0</span>,k) <span class="keyword">if</span> (_md[i]!=<span class="number">0</span>) Md.push_back(i);</span><br><span class="line">        rep(i,<span class="number">0</span>,k) res[i]=base[i]=<span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1l</span>l&lt;&lt;pnt)&lt;=n) pnt++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> p=pnt;p&gt;=<span class="number">0</span>;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            mul(res,res,k);</span><br><span class="line">            <span class="keyword">if</span> ((n&gt;&gt;p)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) res[i+<span class="number">1</span>]=res[i];res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                rep(j,<span class="number">0</span>,SZ(Md)) res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,k) ans=(ans+res[i]*b[i])%mod;</span><br><span class="line">        <span class="keyword">if</span> (ans&lt;<span class="number">0</span>) ans+=mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VI C(1,1),B(1,1);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> L=<span class="number">0</span>,m=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">        rep(n,<span class="number">0</span>,SZ(s))</span><br><span class="line">        &#123;</span><br><span class="line">            ll d=<span class="number">0</span>;</span><br><span class="line">            rep(i,<span class="number">0</span>,L+<span class="number">1</span>) d=(d+(ll)C[i]*s[n-i])%mod;</span><br><span class="line">            <span class="keyword">if</span> (d==<span class="number">0</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span>*L&lt;=n)</span><br><span class="line">            &#123;</span><br><span class="line">                VI T=C;</span><br><span class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i,<span class="number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;</span><br><span class="line">                L=n+<span class="number">1</span>-L; B=T; b=d; m=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i,<span class="number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;</span><br><span class="line">                ++m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gao</span><span class="params">(VI a,ll n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VI c=BM(a);</span><br><span class="line">        c.erase(c.begin());</span><br><span class="line">        rep(i,<span class="number">0</span>,SZ(c)) c[i]=(mod-c[i])%mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n,c,VI(a.begin(),a.begin()+SZ(c)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;n))</span><br><span class="line">    &#123;   <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,linear_seq::gao(VI&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">36</span>,<span class="number">95</span>,<span class="number">281</span>,<span class="number">781</span>,<span class="number">2245</span>,<span class="number">6336</span>,<span class="number">18061</span>, <span class="number">51205</span>&#125;,n<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI vector<span class="meta-string">&lt;ll&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//BM:求线性递推数列第n项，请保证模数的平方不会爆long long</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear_Seq</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;<span class="comment">//多项式系数项数最大值</span></span><br><span class="line">    ll res[N],c[N],vis[N],Mod,COEF[N];<span class="comment">//COEF是多项式系数</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; md;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> ll <span class="title">exgcd</span><span class="params">(ll a,ll b, ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b)</span><br><span class="line">        &#123;</span><br><span class="line">            x = <span class="number">1</span>,y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ret = exgcd(b,a%b,y,x);</span><br><span class="line">        y -= a/b*x;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> ll <span class="title">getInv</span><span class="params">(ll a,ll mod)</span><span class="comment">//求a在mod下的逆元，不存在时输出-1</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll x,y;</span><br><span class="line">        ll d = exgcd(a,mod,x,y);</span><br><span class="line">        <span class="keyword">return</span> d == <span class="number">1</span>?(x%mod+mod)%mod:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fill(c,c+<span class="number">2</span>*k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; k;++j)</span><br><span class="line">                    c[i+j] = (c[i+j]+a[i]*b[j])%Mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>*k<span class="number">-1</span>;i &gt;= k;--i)</span><br><span class="line">            <span class="keyword">if</span>(c[i])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>;j &lt; md.size();++j)</span><br><span class="line">                    c[i-k+md[j]] = (c[i-k+md[j]]-c[i]*vis[md[j]])%Mod;</span><br><span class="line">        copy(c,c+k,a);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n,VI a,VI b)</span><span class="comment">//a系数,b初值b[n+1] = a[0]*b[n]+...</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = a.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;++i)</span><br><span class="line">            vis[k-i<span class="number">-1</span>] = -a[i];</span><br><span class="line">        vis[k] = <span class="number">1</span>;md.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            res[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[i])</span><br><span class="line">                md.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((<span class="number">1L</span>L&lt;&lt;cnt) &lt;= n) ++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = cnt;~p;--p)</span><br><span class="line">        &#123;</span><br><span class="line">            mul(res,res,k);</span><br><span class="line">            <span class="keyword">if</span>((n&gt;&gt;p)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                copy(res,res+k,res+<span class="number">1</span>) ; res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>;j &lt; md.size();++j)</span><br><span class="line">                    res[md[j]] = (res[md[j]]-res[k]*vis[md[j]])%Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;++i)</span><br><span class="line">            ans = (ans + res[i]*b[i]) % Mod;</span><br><span class="line">        <span class="keyword">return</span> ans + (ans&lt;<span class="number">0</span>?Mod:<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">///1-st***********模数是质数用这里*******************/</span></span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI val)</span> <span class="comment">//BM算法求模数是质数的递推式子的通项公式,可以单独用</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VI ans(1,1),lst(1,1);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>,m = <span class="number">1</span>,fail = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> n = <span class="number">0</span>;n &lt; val.size();++n)</span><br><span class="line">        &#123;</span><br><span class="line">            ll delta = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;++i)</span><br><span class="line">                delta = (delta+(ll)ans[i]*val[n-i])%Mod;</span><br><span class="line">            <span class="keyword">if</span>(!delta)</span><br><span class="line">                ++m;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                VI tmp = ans;</span><br><span class="line">                ll div = Mod-delta*getInv(fail,Mod)%Mod;</span><br><span class="line">                <span class="keyword">while</span>(ans.size() &lt; lst.size()+m)</span><br><span class="line">                    ans.push_back(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i  &lt; lst.size();++i)</span><br><span class="line">                    ans[i+m] = (ans[i+m]+div*lst[i])%Mod;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>*len&lt;=(<span class="keyword">int</span>)n)</span><br><span class="line">                &#123;</span><br><span class="line">                    len=n+<span class="number">1</span>-len;</span><br><span class="line">                    lst=tmp;</span><br><span class="line">                    fail=delta;</span><br><span class="line">                    m=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ++m ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//下边这样写能够输出递推式的系数.</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"F[n] = "</span>) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i(<span class="number">0</span>);i&lt;ans.size();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            COEF[i+<span class="number">1</span>] = min(ans[i],Mod-ans[i]) ;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" + "</span>) ;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld*F[n-%d]"</span>,COEF[i+<span class="number">1</span>],i) ;</span><br><span class="line">                <span class="built_in">putchar</span>(i+<span class="number">1</span>==ans.size()?<span class="string">'\n'</span>:<span class="string">' '</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///1-ed*************模数是质数用这里*******************/</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">///2-st*************模数非质数用这里*******************/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">extand</span><span class="params">(VI &amp;a,<span class="keyword">size_t</span> d,ll value = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d &lt;= a.size())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        a.resize(d,value);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> ll <span class="title">CRT</span><span class="params">(<span class="keyword">const</span> VI &amp;a,<span class="keyword">const</span> VI &amp;m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.size();</span><br><span class="line">        ll ans = <span class="number">0</span>,lcm = <span class="number">1</span>,x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">            lcm *= m[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ll tp = lcm/m[i];</span><br><span class="line">            exgcd(tp,m[i],x,y);</span><br><span class="line">            x = (x%m[i]+m[i])%m[i];</span><br><span class="line">            ans = (ans+tp*x*a[i])%lcm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ans+lcm)%lcm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> VI <span class="title">ReedsSloane</span><span class="params">(<span class="keyword">const</span> VI &amp;s,ll Mod)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> L = [](<span class="keyword">const</span> VI &amp;a,<span class="keyword">const</span> VI &amp;b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> da = (a.size() &gt; <span class="number">1</span> || (a.size() == <span class="number">1</span> &amp;&amp; a[<span class="number">0</span>]))?a.size()<span class="number">-1</span>:<span class="number">-1000</span>;</span><br><span class="line">            <span class="keyword">int</span> db = (b.size() &gt; <span class="number">1</span> || (b.size() == <span class="number">1</span> &amp;&amp; b[<span class="number">0</span>]))?b.size()<span class="number">-1</span>:<span class="number">-1000</span>;</span><br><span class="line">            <span class="keyword">return</span> max(da,db+<span class="number">1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> prime_power = [&amp;](<span class="keyword">const</span> VI &amp; s,ll Mod,ll p,ll e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;VI&gt; a(e),b(e),an(e),bn(e),ao(e),bo(e);</span><br><span class="line">            VI t(e),u(e),r(e),to(e,1),uo(e),pw(e+1);</span><br><span class="line">            pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= e;++i)</span><br><span class="line">                pw[i] = pw[i<span class="number">-1</span>] * p;</span><br><span class="line">            <span class="keyword">for</span>(ll i = <span class="number">0</span>;i &lt; e;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i] = &#123;pw[i]&#125;;an[i] = &#123;pw[i]&#125;;</span><br><span class="line">                b[i] = &#123;<span class="number">0</span>&#125;,bn[i] = &#123;s[<span class="number">0</span>]*pw[i]%Mod&#125;;</span><br><span class="line">                t[i] = s[<span class="number">0</span>] * pw[i] %Mod;</span><br><span class="line">                <span class="keyword">if</span>(!t[i])</span><br><span class="line">                    t[i] = <span class="number">1</span>,u[i] = e;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">for</span>(u[i] = <span class="number">0</span>;t[i] % p == <span class="number">0</span>;t[i] /= p,++u[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> k = <span class="number">1</span>;k &lt; s.size();++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> g = <span class="number">0</span>;g &lt; e;++g)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(L(an[g],bn[g]) &gt; L(a[g],b[g]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        ao[g] = a[e<span class="number">-1</span>-u[g]],bo[g] = b[e<span class="number">-1</span>-u[g]];</span><br><span class="line">                        to[g] = t[e<span class="number">-1</span>-u[g]],uo[g] = u[e<span class="number">-1</span>-u[g]];</span><br><span class="line">                        r[g] = k - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                a = an,b = bn;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> o = <span class="number">0</span>;o &lt; e;++o)</span><br><span class="line">                &#123;</span><br><span class="line">                    ll d = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i &lt; a[o].size() &amp;&amp; i &lt;= k;++i)</span><br><span class="line">                        d = (d+a[o][i] * s[k-i])%Mod;</span><br><span class="line">                    <span class="keyword">if</span>(d == <span class="number">0</span>)</span><br><span class="line">                        t[o] = <span class="number">1</span>,u[o] = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span>(u[o] = <span class="number">0</span>,t[o] = d;!(t[o]%p);t[o] /= p,++u[o]);</span><br><span class="line">                        <span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(e<span class="number">-1</span>-u[o])</span></span>;</span><br><span class="line">                        <span class="keyword">if</span>(!L(a[g],b[g]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            extand(bn[o],k+<span class="number">1</span>);</span><br><span class="line">                            bn[o][k] = (bn[o][k]+d)%Mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            ll coef = t[o]*getInv(to[g],Mod)%Mod*pw[u[o]-uo[g]]%Mod;</span><br><span class="line">                            <span class="keyword">int</span> m = k-r[g];</span><br><span class="line">                            extand(an[o],ao[g].size()+m);</span><br><span class="line">                            extand(bn[o],bo[g].size()+m);</span><br><span class="line">                            <span class="keyword">auto</span> fun = [&amp;](<span class="built_in">vector</span>&lt;VI&gt; &amp;vn,<span class="built_in">vector</span>&lt;VI&gt; &amp;vo,<span class="keyword">bool</span> f)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">size_t</span> i(<span class="number">0</span>);i &lt; vo[g].size();++i)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    vn[o][i+m] -= coef*vo[g][i]%Mod;</span><br><span class="line">                                    <span class="keyword">if</span> (vn[o][i + m]&lt;<span class="number">0</span>)</span><br><span class="line">                                        vn[o][i+m] += Mod*(f?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">while</span> (vn[o].size() &amp;&amp; !vn[o].back())</span><br><span class="line">                                    vn[o].pop_back();</span><br><span class="line">                            &#125;;</span><br><span class="line">                            fun(an,ao,<span class="number">1</span>),fun(bn,bo,<span class="number">-1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> make_pair(an[<span class="number">0</span>],bn[<span class="number">0</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;tuple&lt;ll,ll,<span class="keyword">int</span>&gt; &gt; fac;<span class="comment">//tuple相当于结构体</span></span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">2</span>;i * i &lt;= Mod;++i)</span><br><span class="line">            <span class="keyword">if</span>(!(Mod% i))</span><br><span class="line">            &#123;</span><br><span class="line">                ll cnt = <span class="number">0</span>,pw = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(!(Mod%i))</span><br><span class="line">                &#123;</span><br><span class="line">                    Mod /= i;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                    pw *= i;</span><br><span class="line">                &#125;</span><br><span class="line">                fac.emplace_back(pw,i,cnt);<span class="comment">//emplace_back作用同push_back,但直接调用构造函数,相对较快</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(Mod &gt; <span class="number">1</span>)</span><br><span class="line">            fac.emplace_back(Mod,Mod,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;VI&gt; as;</span><br><span class="line">        <span class="keyword">size_t</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp;x: fac)</span><br><span class="line">        &#123;</span><br><span class="line">            ll Mod,p,e;</span><br><span class="line">            VI a,b;</span><br><span class="line">            <span class="built_in">std</span>::tie(Mod,p,e) = x;</span><br><span class="line">            <span class="keyword">auto</span> ss = s;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp;x: ss)</span><br><span class="line">                x %= Mod;</span><br><span class="line">            <span class="built_in">std</span>::tie(a,b) = prime_power(ss,Mod,p,e);</span><br><span class="line">            as.emplace_back(a);</span><br><span class="line">            n = max(n,a.size());</span><br><span class="line">        &#125;</span><br><span class="line">        VI a(n),c(as.size()),m(as.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>;j &lt; as.size();++j)</span><br><span class="line">            &#123;</span><br><span class="line">                m[j] = <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(fac[j]);</span><br><span class="line">                c[j] = i &lt; as[j].size()?as[j][i]:<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i] = CRT(c,m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///2-ed***********模数非质数用这里*******************/</span></span><br><span class="line">     </span><br><span class="line">    <span class="function">ll <span class="title">solve</span><span class="params">(VI a,ll n,ll Mod,<span class="keyword">bool</span> prime = <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VI c;</span><br><span class="line">        <span class="keyword">this</span> -&gt; Mod = Mod;</span><br><span class="line">        <span class="keyword">if</span>(prime) c = BM(a);<span class="comment">//如果已经知道系数了，直接输入到c就行了</span></span><br><span class="line">        <span class="keyword">else</span> c = ReedsSloane(a,Mod);</span><br><span class="line">        c.erase(c.begin());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i &lt; c.size(); ++i) c[i] = (Mod-c[i]) % Mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n,c,VI(a.begin(),a.begin() + c.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;BMEX;</span><br><span class="line"><span class="comment">//BMEX.solve(初始值vector[从0开始],要得到的项数,模数,模数是不是质数)</span></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = a * ans %mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll n;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))&#123;</span><br><span class="line">        ve.clear();</span><br><span class="line">        ll MOD = <span class="number">1000000007</span>;</span><br><span class="line">        ve.push_back(<span class="number">0</span>),ve.push_back(<span class="number">1</span>),ve.push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; <span class="number">50</span>;++i)</span><br><span class="line">            ve.push_back((ve[i<span class="number">-1</span>]+ve[i<span class="number">-2</span>])%MOD);</span><br><span class="line">        ll ans = BMEX.solve(ve,n,MOD,<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> L,R,id,block;</span><br><span class="line">    Query()&#123;&#125;</span><br><span class="line">    Query(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id):L(l), R(r), id(id)&#123;</span><br><span class="line">        block = L/len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query &amp;hs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(block == hs.block) <span class="keyword">return</span> R &lt; hs.R;</span><br><span class="line">        <span class="keyword">return</span> block &lt; hs.block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L=<span class="number">0</span>,R=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(R &lt; q[i].R) Insert(A[++R]);</span><br><span class="line">    <span class="keyword">while</span>(L &gt; q[i].L) Insert(A[--L]);</span><br><span class="line">    <span class="keyword">while</span>(R &gt; q[i].R) Erase(A[R--]);</span><br><span class="line">    <span class="keyword">while</span>(L &lt; q[i].L) Erase(A[L++]);</span><br><span class="line">    ans[q[i].id]= ?;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分-三分"><a href="#二分-三分" class="headerlink" title="二分/三分"></a>二分/三分</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找a[]中&gt;=x最小的那个</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid]&gt;=x) r=mid;</span><br><span class="line">    <span class="keyword">else</span>          l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[l];</span><br><span class="line"></span><br><span class="line"><span class="comment">//找a[]中&lt;=x最大的那个</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid]&lt;=x) l=mid;</span><br><span class="line">    <span class="keyword">else</span>          r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[l];</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通写法</span></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n,ans;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pd(b[mid])) l=mid+<span class="number">1</span>,ans=b[mid];</span><br><span class="line"><span class="keyword">else</span>        r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实数域二分 eps=10^-(k+2)</span></span><br><span class="line"><span class="keyword">while</span>(l+eps&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(calc(mid)) r=mid;<span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(calc(mid)) r=mid;<span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三分</span></span><br><span class="line"><span class="comment">//double</span></span><br><span class="line"><span class="keyword">while</span>(l+eps&lt;r)&#123;</span><br><span class="line"><span class="keyword">double</span> lmid = (<span class="number">2</span>*l+r)/<span class="number">3</span>; <span class="comment">//l+(r-l)/3 , (l+r)/2</span></span><br><span class="line"><span class="keyword">double</span> rmid = (l+<span class="number">2</span>*r)/<span class="number">3</span>; <span class="comment">//r-(r-l)/3 , (lmid+r)/2</span></span><br><span class="line"><span class="keyword">if</span>(f(lmid)&gt;=f(rmid)) r=rmid;</span><br><span class="line"><span class="keyword">else</span>      l=lmid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int</span></span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line"><span class="keyword">int</span> lmid = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> rmid = (lmid+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(calc(lmid)&lt;calc(rmid)) r=rmid; </span><br><span class="line"><span class="keyword">else</span>           l=lmid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最长上升子序列LIS"><a href="#最长上升子序列LIS" class="headerlink" title="最长上升子序列LIS"></a>最长上升子序列LIS</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nlogn 求LIS长度以及输出其中一种</span></span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">0</span>||a[i]&gt;dp[len])&#123;</span><br><span class="line">dp[++len]=a[i];</span><br><span class="line">pos[i]=len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*(lower_bound(dp+<span class="number">1</span>,dp+<span class="number">1</span>+len,a[i])) = a[i];</span><br><span class="line">pos[i] = lower_bound(dp+<span class="number">1</span>,dp+<span class="number">1</span>+len,a[i]) - dp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t=len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[i]==t)&#123;</span><br><span class="line">seq[t--]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!t) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MN=<span class="number">62</span>;</span><br><span class="line">ll p[<span class="number">65</span>],tmp[<span class="number">65</span>];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MN;~i;i--)</span><br><span class="line">        <span class="keyword">if</span>(x&amp;(<span class="number">1L</span>L&lt;&lt;i))</span><br><span class="line">            <span class="keyword">if</span>(!p[i])&#123;p[i]=x;<span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> x^=p[i];</span><br><span class="line">    flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否可以异或出结果x</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MN;~i;i--)</span><br><span class="line">        <span class="keyword">if</span>(x&amp;(<span class="number">1L</span>L&lt;&lt;i))</span><br><span class="line">            <span class="keyword">if</span>(!p[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> x^=p[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询异或最大</span></span><br><span class="line"><span class="function">ll <span class="title">qmax</span><span class="params">(ll res=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MN;~i;i--)</span><br><span class="line">        res=max(res,res^p[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询异或最小</span></span><br><span class="line"><span class="function">ll <span class="title">qmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MN;i++)</span><br><span class="line">        <span class="keyword">if</span>(p[i])<span class="keyword">return</span> p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询异或第k大</span></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    k-=flag;<span class="keyword">if</span>(!k)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MN;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;~j;j--)</span><br><span class="line">            <span class="keyword">if</span>(p[i]&amp;(<span class="number">1l</span>l&lt;&lt;j))p[i]^=p[j];</span><br><span class="line">        <span class="keyword">if</span>(p[i])tmp[cnt++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=(<span class="number">1l</span>l&lt;&lt;cnt))<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(k&amp;(<span class="number">1l</span>l&lt;&lt;i))res^=tmp[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间异或值最大</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b[N][<span class="number">32</span>],p[N][<span class="number">32</span>];</span><br><span class="line"><span class="comment">//p[r][i] 表示满足下列条件的最大的 l,线性基第 i 位有值且 l≤r</span></span><br><span class="line"><span class="comment">//b[r][i] 表示此时第 i 位的线性基</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">        b[r][i]=b[r<span class="number">-1</span>][i];</span><br><span class="line">        p[r][i]=p[r<span class="number">-1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[r][i]) &#123;</span><br><span class="line">                b[r][i] = x;</span><br><span class="line">                p[r][i] = k;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p[r][i] &lt; k) &#123;</span><br><span class="line">                swap(p[r][i], k);</span><br><span class="line">                swap(x, b[r][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            x ^= b[r][i];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (p[r][i] &gt;= l) ans = max(ans, ans ^ b[r][i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">1</span>;r&lt;=n;r++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            add(x,r,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lastans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,x,l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                x^=lastans;</span><br><span class="line">                ++n;</span><br><span class="line">                add(x,n,n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">                l=(l^lastans)%n+<span class="number">1</span>;</span><br><span class="line">                r=(r^lastans)%n+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(l&gt;r) swap(l,r);</span><br><span class="line">                <span class="keyword">int</span> res=ask(l,r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">                lastans=res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SG打表"><a href="#SG打表" class="headerlink" title="SG打表"></a>SG打表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[]：可以取走的石子个数</span></span><br><span class="line"><span class="comment">//sg[]:0~n的SG函数值</span></span><br><span class="line"><span class="comment">//hash[]:mex&#123;&#125;</span></span><br><span class="line"><span class="keyword">int</span> f[N],sg[N],hash[N];     </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">memset</span>(sg,<span class="number">0</span>,<span class="keyword">sizeof</span>(sg));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(hash,<span class="number">0</span>,<span class="keyword">sizeof</span>(hash));</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;f[j]&lt;=i;j++)</span><br><span class="line">            hash[sg[i-f[j]]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=n;j++)    <span class="comment">//求mes&#123;&#125;中未出现的最小的非负整数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sg[i]=j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Crt-Excrt"><a href="#Crt-Excrt" class="headerlink" title="Crt/Excrt"></a>Crt/Excrt</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n个方程：x=a[i](mod m[i]) (0&lt;=i&lt;n)</span></span><br><span class="line"><span class="function">LL <span class="title">china</span><span class="params">(<span class="keyword">int</span> n, LL *a, LL *m)</span></span>&#123;</span><br><span class="line">    LL M = <span class="number">1</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) M *= m[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        LL w = M / m[i];</span><br><span class="line">        ret = (ret + w * inv(w, m[i]) * a[i]) % M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ret + M) % M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex_gcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y, LL &amp;d)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!b) &#123;d = a, x = <span class="number">1</span>, y = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          ex_gcd(b, a % b, y, x, d);</span><br><span class="line">          y -= x * (a / b);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function">LL <span class="title">inv</span><span class="params">(LL t, LL p)</span></span>&#123;<span class="comment">//如果不存在，返回-1</span></span><br><span class="line">     LL d, x, y;</span><br><span class="line">     ex_gcd(t, p, x, y, d);</span><br><span class="line">     <span class="keyword">return</span> d == <span class="number">1</span> ? (x % p + p) % p : <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PLL;</span><br><span class="line"><span class="function">PLL <span class="title">linear</span><span class="params">(LL A[], LL B[], LL M[], <span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//求解A[i]x = B[i] (mod M[i]),总共n个线性方程组</span></span><br><span class="line">    LL x = <span class="number">0</span>, m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        LL a = A[i] * m, b = B[i] - A[i]*x, d = __gcd(M[i], a);</span><br><span class="line">        <span class="keyword">if</span>(b % d != <span class="number">0</span>)  <span class="keyword">return</span> PLL(<span class="number">-1</span>, <span class="number">-1</span>);<span class="comment">//答案不存在，返回-1</span></span><br><span class="line">        LL t = b/d * inv(a/d, M[i]/d)%(M[i]/d);</span><br><span class="line">        x = x + m*t;</span><br><span class="line">        m *= M[i]/d;</span><br><span class="line">    &#125;</span><br><span class="line">    x = (x % m + m ) % m;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) x = m;</span><br><span class="line">    <span class="keyword">return</span> PLL(x, m);<span class="comment">//返回的x就是答案，m是最后的lcm值</span></span><br><span class="line">    <span class="comment">//如果x==0，那么ans为m</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BSGS-ExBSGS"><a href="#BSGS-ExBSGS" class="headerlink" title="BSGS/ExBSGS"></a>BSGS/ExBSGS</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*(感觉这东西还是要写一下)</span></span><br><span class="line"><span class="comment">BSGS主要用于求解形如xk=y(modp)</span></span><br><span class="line"><span class="comment">(注意这里p与x互质)这样的方程的最小正整数解的问题</span></span><br><span class="line"><span class="comment">设m=?p–√?,k=am?b,a∈[1,m],b∈[0,m)</span></span><br><span class="line"><span class="comment">那么上面的方程可以变形成xam=yxb(modp)</span></span><br><span class="line"><span class="comment">枚举b,计算出右边的值存到map中,枚举a查表即可</span></span><br><span class="line"><span class="comment">Q:可以枚举左边存表,右边查嘛?</span></span><br><span class="line"><span class="comment">A:可以,但是左边查到表可以直接输出...</span></span><br><span class="line"><span class="comment">顺便一说,map里要存最大值,这样你算出的答案是最小的,所以能更新就更新</span></span><br><span class="line"><span class="comment">复杂度:O(p–√logp)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">模板题[TJOI2007]可爱的质数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;<span class="keyword">if</span>(y&amp;<span class="number">1</span>)s=<span class="number">1l</span>l*s*x%p;x=<span class="number">1l</span>l*x*x%p;y&gt;&gt;=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="built_in">sqrt</span>(p)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s=y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        M[s]=i;<span class="comment">//能更新就更新</span></span><br><span class="line">        s=<span class="number">1l</span>l*s*x%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t=ksm(x,m);s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        s=<span class="number">1l</span>l*s*t%p;</span><br><span class="line">        <span class="keyword">if</span>(M.count(s))&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i*m-M[s]);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"no solution"</span>);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩展BSGS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当p不是素数时(这时x,p不一定互质),</span></span><br><span class="line"><span class="comment">设d=gcd(x,p),</span></span><br><span class="line"><span class="comment">若d不整除y,那么只有y=1时,x=0,其他情况均无解</span></span><br><span class="line"><span class="comment">若d整除y,当d=1时,直接BSGS</span></span><br><span class="line"><span class="comment">否则有</span></span><br><span class="line"><span class="comment">xk=y(modp)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">xk?1×xd=yd(modpd)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">继续分解到d=1为止.</span></span><br><span class="line"><span class="comment">xk?t×xt∏di=y∏di(modp∏di)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后首先检验x=[0,t)是否为解,显然t是log级别的</span></span><br><span class="line"><span class="comment">如果[0,t)都不是解,由于x,p∏di</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">互质,BSGS求解即可</span></span><br><span class="line"><span class="comment">最后记得答案加上t啊</span></span><br><span class="line"><span class="comment">模板题[SPOJ3105]MOD</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">re</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> y)</span></span>&#123;x=<span class="number">1l</span>l*x*y%p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;<span class="keyword">if</span>(y&amp;<span class="number">1</span>)mul(s,x);mul(x,x);y&gt;&gt;=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exbsgs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> d=__gcd(x,p),k=<span class="number">1</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(d^<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y%d)&#123;<span class="built_in">puts</span>(<span class="string">"No Solution"</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">        ++t;y/=d;p/=d;mul(k,x/d);</span><br><span class="line">        <span class="keyword">if</span>(y==k)&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t);<span class="keyword">return</span>;&#125;</span><br><span class="line">        d=__gcd(x,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s=y;M.clear();<span class="keyword">int</span> m=<span class="built_in">sqrt</span>(p)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        M[s]=i;mul(s,x);</span><br><span class="line">    &#125;</span><br><span class="line">    s=k;k=ksm(x,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        mul(s,k);</span><br><span class="line">        <span class="keyword">if</span>(M[s])&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i*m-M[s]+t);<span class="keyword">return</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No Solution"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        x=re(),p=re(),y=re();</span><br><span class="line">        <span class="keyword">if</span>(!x&amp;&amp;!p&amp;&amp;!y)<span class="keyword">break</span>;</span><br><span class="line">        x%=p;y%=p;</span><br><span class="line">        exbsgs(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求解特殊不定不等式"><a href="#求解特殊不定不等式" class="headerlink" title="求解特殊不定不等式"></a>求解特殊不定不等式</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求解la/lb&lt; x/y &lt; ra/rb 的使得x,y最小的解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(ll la,ll lb,ll ra,ll rb,ll&amp; x,ll&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll minint=la/lb+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(minint&lt;=ra/rb)</span><br><span class="line">&#123;</span><br><span class="line">x=minint;</span><br><span class="line">y=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">minint--;<span class="comment">//意为floor(la/lb)</span></span><br><span class="line">la-=minint*lb; ra-=minint*rb;</span><br><span class="line">f(rb,ra,lb,la,y,x);</span><br><span class="line">x+=minint*y;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b, LL m)</span></span>&#123;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    a %= m;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a % m;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    LL p, d;</span><br><span class="line">&#125;;</span><br><span class="line">LL w;</span><br><span class="line"><span class="comment">//二次域乘法</span></span><br><span class="line"><span class="function">T <span class="title">multi_er</span><span class="params">(T a, T b, LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T ans;</span><br><span class="line">    ans.p = (a.p * b.p % m + a.d * b.d % m * w % m) % m;</span><br><span class="line">    ans.d = (a.p * b.d % m + a.d * b.p % m) % m;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二次域上快速幂</span></span><br><span class="line"><span class="function">T <span class="title">power</span><span class="params">(T a, LL b, LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T ans;</span><br><span class="line">    ans.p = <span class="number">1</span>;</span><br><span class="line">    ans.d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = multi_er(ans, a, m);</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = multi_er(a, a, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求勒让德符号</span></span><br><span class="line"><span class="function">LL <span class="title">Legendre</span><span class="params">(LL a, LL p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> quick_mod(a, (p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">mod</span><span class="params">(LL a, LL m)</span></span>&#123;</span><br><span class="line">    a %= m;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += m;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解x^2=n mod p;</span></span><br><span class="line"><span class="comment">//若返回-1，无解，否则返回一个解x1</span></span><br><span class="line"><span class="comment">//一般有两个解，另一个解为x2 = p-x1；</span></span><br><span class="line"><span class="function">LL <span class="title">Solve</span><span class="params">(LL n,LL p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll czc = Legendre(n, p);</span><br><span class="line">    <span class="keyword">if</span> (czc + <span class="number">1</span> == p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(czc == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL a = <span class="number">-1</span>, t;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a = rand() % p;</span><br><span class="line">        t = a * a - n;</span><br><span class="line">        w = mod(t, p);</span><br><span class="line">        <span class="keyword">if</span>(Legendre(w, p) + <span class="number">1</span> == p) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T tmp;</span><br><span class="line">    tmp.p = a;</span><br><span class="line">    tmp.d = <span class="number">1</span>;</span><br><span class="line">    T ans = power(tmp, (p + <span class="number">1</span>)&gt;&gt;<span class="number">1</span>, p);</span><br><span class="line">    <span class="keyword">return</span> ans.p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*hdu 3930</span></span><br><span class="line"><span class="comment">  题意：</span></span><br><span class="line"><span class="comment">  给定newx, k, m, 方程 (x^k)%m=newx, 求在模m意义下的所有解x。</span></span><br><span class="line"><span class="comment">  限制：</span></span><br><span class="line"><span class="comment">  0 &lt;= newx, m, k &lt;= 1.5*10^15; m是素数。</span></span><br><span class="line"><span class="comment">  思路：</span></span><br><span class="line"><span class="comment">  N次剩余</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL a,LL b,LL m)</span></span>&#123;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    a %= m;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ret = (ret + a) % m;</span><br><span class="line">        a = (a + a) % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">a_b_MOD_c</span><span class="params">(LL a,LL b,LL m)</span></span>&#123;</span><br><span class="line">    LL ret = <span class="number">1</span>;</span><br><span class="line">    a %= m;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret = mul(ret,a,m);</span><br><span class="line">        a = mul(a,a,m);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">ext_gcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) &#123; x=<span class="number">1</span>, y=<span class="number">0</span>; <span class="keyword">return</span> a; &#125;</span><br><span class="line">    LL ret= ext_gcd(b,a%b,y,x);</span><br><span class="line">    y-= a/b*x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">g_test</span><span class="params">(LL g,LL p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;a.size();++i)</span><br><span class="line">        <span class="keyword">if</span>(a_b_MOD_c(g,(p<span class="number">-1</span>)/a[i],p)==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">pri_root</span><span class="params">(LL p)</span></span>&#123;</span><br><span class="line">    a.clear();</span><br><span class="line">    LL tmp=p<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;=tmp/i;++i)</span><br><span class="line">        <span class="keyword">if</span>(tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">            a.push_back(i);</span><br><span class="line">            <span class="keyword">while</span>(tmp%i==<span class="number">0</span>)</span><br><span class="line">                tmp/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp!=<span class="number">1</span>)</span><br><span class="line">        a.push_back(tmp);</span><br><span class="line">    LL g=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(g_test(g,p))</span><br><span class="line">            <span class="keyword">return</span> g;</span><br><span class="line">        ++g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> HASH_MOD=<span class="number">9876543</span>;</span><br><span class="line">LL key[HASH_MOD], val[HASH_MOD];</span><br><span class="line"><span class="keyword">int</span> head[HASH_MOD], next[HASH_MOD];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">insert</span><span class="params">(LL x, LL y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = x % HASH_MOD;</span><br><span class="line">        key[tot] = x;</span><br><span class="line">        val[tot] = y;</span><br><span class="line">        next[tot] = head[k];</span><br><span class="line">        head[k] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">find</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = x % HASH_MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[k]; i != <span class="number">-1</span>; i = next[i])</span><br><span class="line">            <span class="keyword">if</span>(key[i] == x)</span><br><span class="line">                <span class="keyword">return</span> val[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;hs;</span><br><span class="line"><span class="comment">//求解模方程a^x=b(mod m),n为素数,无解返回-1  </span></span><br><span class="line"><span class="comment">//注意：要求0 &lt; a &lt; m; 0 &lt;= b &lt; m; 否则按题意自己转化。</span></span><br><span class="line"><span class="comment">//复杂度O(sqrt(m))</span></span><br><span class="line"><span class="function">LL <span class="title">log_mod</span><span class="params">(LL a, LL b, LL m)</span></span>&#123;</span><br><span class="line">    hs.init();</span><br><span class="line">    LL s = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(m + <span class="number">0.5</span>));</span><br><span class="line">    LL cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hs.find(cur)==<span class="number">-1</span>) hs.insert(cur,i);    <span class="comment">//记得先判重，在插入</span></span><br><span class="line">        cur = cur * a % m;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    LL v = a_b_MOD_c(a, (m - s - <span class="number">1</span> + m) % m, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; ++i)&#123;</span><br><span class="line">        LL tmp = hs.find(b);</span><br><span class="line">        <span class="keyword">if</span>(tmp!=<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> s * i + tmp;</span><br><span class="line">        b=b*v%m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*n次剩余</span></span><br><span class="line"><span class="comment">  任务：</span></span><br><span class="line"><span class="comment">  给定N, a, p, 求出(x^N)%p=a 在模p意义下的所有解x。</span></span><br><span class="line"><span class="comment">  说明：</span></span><br><span class="line"><span class="comment">  令g为p的原根，因为p为素数，所以phi(p)=p-1。</span></span><br><span class="line"><span class="comment">  由原根的性质得：</span></span><br><span class="line"><span class="comment">  如果g为p的原根，则：g^i mod p != g^j mod p (p为素数), 其中i != j且i, j介於1至(p-1)之间</span></span><br><span class="line"><span class="comment">  所以，可以设g^y=x, g^t=a，则有：</span></span><br><span class="line"><span class="comment">  g^(y*N)%p=g^t</span></span><br><span class="line"><span class="comment">  又由原根的性质：</span></span><br><span class="line"><span class="comment">  g^(y*N)%p=g^t -&gt; (y*N)%(p-1)=t (此方程可以由拓展欧几里得解)</span></span><br><span class="line"><span class="comment">  另外g^t=a可以由离散对数求出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; residue(LL p, LL N, LL a)&#123;</span><br><span class="line">    LL g = pri_root(p);</span><br><span class="line">g %= p;</span><br><span class="line">    LL m = log_mod(g, a, p);</span><br><span class="line">    <span class="built_in">vector</span>&lt;LL&gt; ret;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line">        ret.PB(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    LL A = N, B = p - <span class="number">1</span>, C = m, x, y;</span><br><span class="line">    LL d = ext_gcd(A, B, x, y);</span><br><span class="line">    <span class="keyword">if</span>(C % d != <span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">    x = x * (C / d) % B;</span><br><span class="line">    LL delta = B / d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; ++i)&#123;</span><br><span class="line">        x = ((x + delta) % B + B) % B;</span><br><span class="line">        ret.PB(a_b_MOD_c(g, x, p));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ret.begin(), ret.end());</span><br><span class="line">    ret.erase(unique(ret.begin(), ret.end()), ret.end());</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">0</span>;</span><br><span class="line">    LL k,m,newx;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>,&amp;k, &amp;m, &amp;newx)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;LL&gt; ans;</span><br><span class="line">        ans = residue(m,k,newx);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"case%d:\n"</span>,++cas);</span><br><span class="line">        <span class="keyword">if</span>(ans.size()==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类欧几里得"><a href="#类欧几里得" class="headerlink" title="类欧几里得"></a>类欧几里得</h5><script type="math/tex; mode=display">f(a,b,c,n)=\sum_{i=0}^n \lfloor\frac{ai+b}{c}\rfloor</script><script type="math/tex; mode=display">g(a,b,c,n)=\sum_{i=0}^n i\lfloor\frac{ai+b}{c}\rfloor</script><script type="math/tex; mode=display">h(a,b,c,n)=\sum_{i=0}^n \lfloor\frac{ai+b}{c}\rfloor^2</script><script type="math/tex; mode=display">m=\lfloor\frac{an+b}{c}\rfloor</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(logn)求解f(a,b,c,n) = \sum floor(a*i+b/c) (0&lt;=i&lt;=n)</span></span><br><span class="line"><span class="function">LL <span class="title">S</span><span class="params">(LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> (k*(k+<span class="number">1</span>)/<span class="number">2l</span>l)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">f</span><span class="params">(LL a,LL b,LL c,LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=c || b&gt;=c)</span><br><span class="line">        <span class="keyword">return</span> ((a/c)*S(n)%mod+(n+<span class="number">1</span>)*(b/c)%mod+f(a%c,b%c,c,n))%mod;</span><br><span class="line">    LL m=(a*n+b)/c;</span><br><span class="line">    <span class="keyword">return</span> (m*n%mod-f(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>)+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下为推广</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1e9</span>+<span class="number">7</span>,inv2=<span class="number">500000004</span>,inv6=<span class="number">166666668</span>;</span><br><span class="line"> </span><br><span class="line">LL a,b,c,l,r;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    LL f,g,h;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">data <span class="title">calc</span><span class="params">(LL a,LL b,LL c,LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data tmp;</span><br><span class="line">    <span class="keyword">if</span> (!a)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp.f=tmp.g=tmp.h=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a&gt;=c || b&gt;=c)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=calc(a%c,b%c,c,n);</span><br><span class="line">        n%=mod;</span><br><span class="line">        tmp.h=(tmp.h+</span><br><span class="line">                n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod*(a/c)%mod*(a/c)%mod</span><br><span class="line">                  +(n+<span class="number">1</span>)*(b/c)%mod*(b/c)%mod</span><br><span class="line">                    +(LL)<span class="number">2</span>*(a/c)*tmp.g%mod</span><br><span class="line">                      +(LL)<span class="number">2</span>*(b/c)*tmp.f%mod</span><br><span class="line">                        +n*(n+<span class="number">1</span>)%mod*(a/c)%mod*(b/c))%mod;</span><br><span class="line">        tmp.f=(tmp.f</span><br><span class="line">                +n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod*(a/c)</span><br><span class="line">                    +(n+<span class="number">1</span>)*(b/c))%mod;</span><br><span class="line">        tmp.g=(tmp.g</span><br><span class="line">                +n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod*(a/c)</span><br><span class="line">                    +n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod*(b/c))%mod;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    LL m=((LL)a*n+b)/c;</span><br><span class="line">    data nxt=calc(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>);</span><br><span class="line">    n%=mod; m%=mod;</span><br><span class="line">    tmp.f=((n*m-nxt.f)%mod+mod)%mod;</span><br><span class="line">    tmp.g=(LL)((n*(n+<span class="number">1</span>)%mod*m-nxt.f-nxt.h)%mod+mod)*inv2%mod;</span><br><span class="line">    tmp.h=((m*(m+<span class="number">1</span>)%mod*n-(LL)<span class="number">2</span>*(nxt.g+nxt.f)%mod-tmp.f)%mod+mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;a,&amp;c,&amp;b,&amp;l,&amp;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(calc(a,b,c,r).g-calc(a,b,c,l<span class="number">-1</span>).g+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求有向图顺序或判有环</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q; <span class="comment">//要求字典序改优先队列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i]==<span class="number">0</span>) q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V[x].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> next=V[x][i];</span><br><span class="line">            <span class="keyword">if</span>(--in[next]==<span class="number">0</span>) q.push(next);</span><br><span class="line">            Rank[next]=Rank[x]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt==n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求由form到图中其他点的最短路径</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,id;</span><br><span class="line">    node(<span class="keyword">int</span> id,<span class="keyword">int</span> val):id(id),val(val) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;hs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val&gt;hs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to,w;</span><br><span class="line">&#125;e[maxm*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++cnt]=edge&#123;head[u],v,w&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn],vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> from)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dis[i]=INF;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(from,<span class="number">0</span>));</span><br><span class="line">    dis[from]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur=q.top().id;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[cur])<span class="keyword">continue</span>;</span><br><span class="line">        vis[cur]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[cur]; i ; i=e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[cur]+e[i].w &lt; dis[v])&#123;</span><br><span class="line">                dis[v]=dis[cur]+e[i].w;</span><br><span class="line">                q.push(node(v,dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dis[i][i]=0,dis[i][j]表示i到j的最短路径</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java大数开方"><a href="#Java大数开方" class="headerlink" title="Java大数开方"></a>Java大数开方</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否为完全平方数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> boolean <span class="title">check</span><span class="params">(BigInteger now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (now.compareTo(BigInteger.ZERO) == <span class="number">0</span> || now.compareTo(BigInteger.ONE) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (now.mod(BigInteger.valueOf(<span class="number">3</span>)).compareTo(BigInteger.valueOf(<span class="number">2</span>)) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">String s = now.toString();</span><br><span class="line"><span class="keyword">if</span> (s.length() % <span class="number">2</span> == <span class="number">0</span>) s = s.substring(<span class="number">0</span>, s.length() / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> s = s.substring(<span class="number">0</span>, (<span class="number">1</span> + s.length()) / <span class="number">2</span>);</span><br><span class="line">BigInteger res = BigInteger.ZERO;</span><br><span class="line">BigInteger m = <span class="keyword">new</span> BigInteger(s);</span><br><span class="line">BigInteger two = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="string">"1"</span>) res = BigInteger.ONE;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (now.compareTo(m.multiply(m)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">m = (m.add(now.divide(m))).divide(two);</span><br><span class="line">&#125;</span><br><span class="line">res = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.multiply(res).compareTo(now) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> LL ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> abs(x)  (((x)&gt;0)?(x):-(x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI  = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///*************基础***********/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">torad</span><span class="params">(<span class="keyword">double</span> deg)</span> </span>&#123; <span class="keyword">return</span> deg / <span class="number">180</span> * PI; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> x=<span class="number">0</span>, <span class="keyword">double</span> y=<span class="number">0</span>):x(x),y(y) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;Point&gt; Polygon;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span>+ (Vector A, Vector B) &#123; <span class="keyword">return</span> Vector(A.x + B.x, A.y + B.y); &#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span>- (Point A, Point B) &#123; <span class="keyword">return</span> Vector(A.x - B.x, A.y - B.y); &#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span>* (Vector A, <span class="keyword">double</span> p) &#123; <span class="keyword">return</span> Vector(A.x * p, A.y * p); &#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span>/ (Vector A, <span class="keyword">double</span> p) &#123; <span class="keyword">return</span> Vector(A.x / p, A.y / p); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Point a, Point b) &#123; <span class="keyword">return</span> a.x &lt; b.x || (a.x == b.x &amp;&amp; a.y &lt; b.y); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (Point a, Point b) &#123; <span class="keyword">return</span> dcmp(a.x - b.x) == <span class="number">0</span> &amp;&amp; dcmp(a.y - b.y) == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A, Vector B)</span></span>&#123; <span class="keyword">return</span> A.x * B.x + A.y * B.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">msqrt</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">sqrt</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span> </span>&#123; <span class="keyword">return</span> msqrt(Dot(A, A)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length2</span><span class="params">(Vector A)</span> </span>&#123; <span class="keyword">return</span> Dot(A, A); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A, B) / Length(A) / Length(B)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">angle</span><span class="params">(Vector v)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">atan2</span>(v.y, v.x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.y - A.y * B.x; &#125;<span class="comment">//A x B &gt; 0表示A在B的顺时针方向上</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Vector <span class="title">Unit</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> x / Length(x); &#125;  <span class="comment">//单位向量</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Vector <span class="title">Normal</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> Point(-x.y, x.x) / Length(x); &#125; <span class="comment">//垂直法向量</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A, Point B, Point C)</span> </span>&#123; <span class="keyword">return</span> Cross(B - A, C - A); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross3</span><span class="params">(Point p0,Point p1,Point p2)</span>  </span>&#123;<span class="keyword">return</span> (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);&#125;<span class="comment">///返回结果为正说明p0p1在p0p2的顺时针方向，正说明p2在向量p0p1的左边（三点构成逆时针方向）</span></span><br><span class="line">                                                                                                    <span class="comment">///也可以说明p0在向量p1p2的左边（三点构成逆时针方向）,为负则相反,为0则三点共线(叉积的性质很重要)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Vector <span class="title">Rotate</span><span class="params">(Vector A, <span class="keyword">double</span> rad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x * <span class="built_in">cos</span>(rad) - A.y*<span class="built_in">sin</span>(rad), A.x*<span class="built_in">sin</span>(rad) + A.y * <span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************直线与线段**************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//求直线p+tv和q+tw的交点 Cross(v, w) == 0无交点</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point p, Vector v, Point q, Vector w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector u = p - q;</span><br><span class="line">    <span class="keyword">double</span> t = Cross(w, u) / Cross(v, w);</span><br><span class="line">    <span class="keyword">return</span> p + v * t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线段到直线的方位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SegToLine</span><span class="params">(Point a,Point b,Point c,Point d)</span> </span>&#123;<span class="comment">///Seg:ab  Line:cd  已验证</span></span><br><span class="line">    <span class="keyword">int</span> x = dcmp(Cross3(a,c,d));</span><br><span class="line">    <span class="keyword">int</span> y = dcmp(Cross3(b,c,d));</span><br><span class="line">    <span class="keyword">if</span>(x==y&amp;&amp;y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//线上</span></span><br><span class="line">    <span class="keyword">if</span>(x+y==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//同侧 左边</span></span><br><span class="line">    <span class="keyword">if</span>(x+y==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//同侧 右边</span></span><br><span class="line">    <span class="keyword">if</span>(x+y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//异侧</span></span><br><span class="line">    <span class="keyword">if</span>(x+y==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-2</span>;<span class="comment">//一点在线上，另一点左边</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-3</span>;<span class="comment">//一点在线上，另一点右边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直线ab与直线cd的交点</span></span><br><span class="line"><span class="function">Point <span class="title">LineToLine</span><span class="params">(Point a,Point b,Point c,Point d)</span> </span>&#123;   <span class="comment">///已验证</span></span><br><span class="line">    <span class="keyword">double</span> x = Cross3(a,c,d),y = Cross3(b,c,d);</span><br><span class="line">    <span class="keyword">int</span> xx=dcmp(x),yy=dcmp(y);</span><br><span class="line">    <span class="keyword">if</span>(xx==yy&amp;&amp;xx==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">-1e10</span>,<span class="number">1e10</span>&#125;;<span class="comment">//重合</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(x-y)==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">-1e10</span>,<span class="number">-1e10</span>&#125;;<span class="comment">//平行</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Vector u = a-c;</span><br><span class="line">        Vector v = (b-a)/Length((b-a));</span><br><span class="line">        Vector w = (d-c)/Length((d-c));</span><br><span class="line">        <span class="keyword">return</span> a + (Point)(v*(Cross(w,u)/Cross(v,w)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点p在直线ab的投影</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">GetLineProjection</span><span class="params">(Point P, Point A, Point B)</span> </span>&#123; <span class="comment">///已验证</span></span><br><span class="line">    Vector v = B - A;</span><br><span class="line">    <span class="keyword">return</span> A + v * (Dot(v, P - A) / Dot(v, v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//点到直线距离</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P, Point A, Point B)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector v1 = B - A, v2 = P - A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1, v2)) / Length(v1); <span class="comment">// 如果不取绝对值，得到的是有向距离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在p线段上(包括端点)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point p, Point a1, Point a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross(a1-p, a2-p)) == <span class="number">0</span> &amp;&amp; dcmp(Dot(a1-p, a2-p)) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 过两点p1, p2的直线一般方程ax+by+c=0</span></span><br><span class="line"><span class="comment">// (x2-x1)(y-y1) = (y2-y1)(x-x1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getLineGeneralEquation</span><span class="params">(Point p1, Point p2, <span class="keyword">double</span>&amp; a, <span class="keyword">double</span>&amp; b, <span class="keyword">double</span> &amp;c)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = p2.y - p1.y;</span><br><span class="line">    b = p1.x - p2.x;</span><br><span class="line">    c = -a * p1.x - b * p1.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point p, Point a, Point b)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span> Length(p - a);</span><br><span class="line">    Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1, v2)) &lt; <span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1, v3)) &gt; <span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1, v2)) / Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两线段最近距离</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dis_pair_seg</span><span class="params">(Point p1, Point p2, Point p3, Point p4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> min(min(DistanceToSegment(p1, p3, p4), DistanceToSegment(p2, p3, p4)),</span><br><span class="line">               min(DistanceToSegment(p3, p1, p2), DistanceToSegment(p4, p1, p2)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线段相交判定</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SegmentProperIntersection</span><span class="params">(Point a, Point b, Point c, Point d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(max(a.x , b.x) &lt; min(c.x , d.x)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max(a.y , b.y) &lt; min(c.y , d.y)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max(c.x , d.x) &lt; min(a.x , b.x)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max(c.y , d.y) &lt; min(a.y , b.y)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross(b-a,c-a))*dcmp(Cross(b-a,d-a))&lt;=<span class="number">0</span></span><br><span class="line">    &amp;&amp; dcmp(Cross(d-c,a-c))*dcmp(Cross(d-c,b-c))&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有向直线。它的左边就是对应的半平面</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point p, q;    <span class="comment">// 直线上任意一点,p作为起点</span></span><br><span class="line">    Vector v;   <span class="comment">// 方向向量</span></span><br><span class="line">    <span class="keyword">double</span> ang; <span class="comment">// 极角，即从x正半轴旋转到向量v所需要的角（弧度）</span></span><br><span class="line">    Line() &#123;&#125;</span><br><span class="line"><span class="comment">//    Line(Point P, Vector v):p(P),v(v)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        ang = atan2(v.y, v.x);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    Line(Point P, Point Q):p(P), q(Q)</span><br><span class="line">    &#123;</span><br><span class="line">        v = q - p;</span><br><span class="line">        ang = <span class="built_in">atan2</span>(v.y, v.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Line&amp; L) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ang &lt; L.ang;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Point <span class="title">point</span><span class="params">(<span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p + v * t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Line <span class="title">move</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Line(p + Normal(v) * d, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point q;</span><br><span class="line">        p.read(), q.read();</span><br><span class="line">        v = q - p;</span><br><span class="line">        ang = <span class="built_in">atan2</span>(v.y, v.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//两直线交点</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">GetLineIntersection</span><span class="params">(Line a, Line b)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetLineIntersection(a.p, a.v, b.p, b.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点p在有向直线L的左边（线上不算）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnLeft</span><span class="params">(<span class="keyword">const</span> Line&amp; L, <span class="keyword">const</span> Point&amp; p)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(L.v, p - L.p) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PointToLine</span><span class="params">(Point p,Point a,Point b)</span> </span>&#123;<span class="comment">///1:左 -1:右 0:线上 已验证</span></span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross3(p, a, b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 二直线交点，假定交点惟一存在</span></span><br><span class="line"><span class="comment">//Point GetLineIntersection(const Line&amp; a, const Line&amp; b) &#123;</span></span><br><span class="line"><span class="comment">//  Vector u = a.P-b.P;</span></span><br><span class="line"><span class="comment">//  double t = Cross(b.v, u) / Cross(a.v, b.v);</span></span><br><span class="line"><span class="comment">//  return a.P+a.v*t;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 半平面交主过程</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; HalfplaneIntersection(<span class="built_in">vector</span>&lt;Line&gt; L) <span class="comment">///已验证</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n = L.size();</span><br><span class="line">    sort(L.begin(), L.end()); <span class="comment">// 按极角排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> first, last;         <span class="comment">// 双端队列的第一个元素和最后一个元素的下标</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p(n);      <span class="comment">// p[i]为q[i]和q[i+1]的交点</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Line&gt; q(n);       <span class="comment">// 双端队列</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; ans;       <span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line">    q[first=last=<span class="number">0</span>] = L[<span class="number">0</span>];  <span class="comment">// 双端队列初始化为只有一个半平面L[0]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; !OnLeft(L[i], p[last<span class="number">-1</span>])) last--;</span><br><span class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; !OnLeft(L[i], p[first])) first++;</span><br><span class="line">        q[++last] = L[i];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(Cross(q[last].v, q[last<span class="number">-1</span>].v)) &lt; eps)   <span class="comment">// 两向量平行且同向，取内侧的一个</span></span><br><span class="line">        &#123;</span><br><span class="line">            last--;</span><br><span class="line">            <span class="keyword">if</span>(OnLeft(q[last], L[i].p)) q[last] = L[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(first &lt; last) p[last<span class="number">-1</span>] = GetLineIntersection(q[last<span class="number">-1</span>], q[last]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(first &lt; last &amp;&amp; !OnLeft(q[first], p[last<span class="number">-1</span>])) last--; <span class="comment">// 删除无用平面</span></span><br><span class="line">    <span class="keyword">if</span>(last - first &lt;= <span class="number">1</span>) <span class="keyword">return</span> ans; <span class="comment">// 空集</span></span><br><span class="line">    p[last] = GetLineIntersection(q[last], q[first]); <span class="comment">// 计算首尾两个半平面的交点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从deque复制到输出中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first; i &lt;= last; i++) ans.push_back(p[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********多边形**************/</span></span><br><span class="line"><span class="comment">//求多边形面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; p)</span> </span>&#123; <span class="comment">///已验证</span></span><br><span class="line">  <span class="keyword">int</span> n = p.size();</span><br><span class="line">  <span class="keyword">double</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    area += Cross(p[i]-p[<span class="number">0</span>], p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> area / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点是否在多边形内</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPointInPolygon</span><span class="params">(Point p, Polygon poly)</span> <span class="comment">/// 已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = poly.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (OnSegment(p, poly[i], poly[(i + <span class="number">1</span>) % n])) <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">//边界</span></span><br><span class="line">        <span class="keyword">int</span> k = dcmp(Cross(poly[(i + <span class="number">1</span>) % n] - poly[i], p - poly[i]));</span><br><span class="line">        <span class="keyword">int</span> d1 = dcmp(poly[i].y - p.y);</span><br><span class="line">        <span class="keyword">int</span> d2 = dcmp(poly[(i + <span class="number">1</span>) % n].y - p.y);</span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; d1 &lt;= <span class="number">0</span> &amp;&amp; d2 &gt; <span class="number">0</span>) wn++;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; d2 &lt;= <span class="number">0</span> &amp;&amp; d1 &gt; <span class="number">0</span>) wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wn != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//内部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//外部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多边形重心 点集逆时针给出</span></span><br><span class="line"><span class="function">Point <span class="title">PolyGravity</span><span class="params">(Point *p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Point tmp, g = Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> sumArea = <span class="number">0</span>, area;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n; ++i) &#123;</span><br><span class="line">        area = Cross(p[i<span class="number">-1</span>]-p[<span class="number">0</span>], p[i]-p[<span class="number">0</span>]);</span><br><span class="line">        sumArea += area;</span><br><span class="line">        tmp.x = p[<span class="number">0</span>].x + p[i<span class="number">-1</span>].x + p[i].x;</span><br><span class="line">        tmp.y = p[<span class="number">0</span>].y + p[i<span class="number">-1</span>].y + p[i].y;</span><br><span class="line">        g.x += tmp.x * area;</span><br><span class="line">        g.y += tmp.y * area;</span><br><span class="line">    &#125;</span><br><span class="line">    g.x /= (sumArea * <span class="number">3.0</span>); g.y /= (sumArea * <span class="number">3.0</span>);</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多边形重心计算模板</span></span><br><span class="line"><span class="function">Point <span class="title">bcenter</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; pnt)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = pnt.size();</span><br><span class="line">    Point p, s;</span><br><span class="line">    <span class="keyword">double</span> tp, area = <span class="number">0</span>, tpx = <span class="number">0</span>, tpy = <span class="number">0</span>;</span><br><span class="line">    p.x = pnt[<span class="number">0</span>].x;</span><br><span class="line">    p.y = pnt[<span class="number">0</span>].y;</span><br><span class="line">    <span class="comment">//FE(i, 1, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s.x = pnt[(i == n) ? <span class="number">0</span> : i].x;</span><br><span class="line">        s.y = pnt[(i == n) ? <span class="number">0</span> : i].y;</span><br><span class="line">        tp = (p.x * s.y - s.x * p.y);</span><br><span class="line">        area += tp / <span class="number">2</span>;</span><br><span class="line">        tpx += (p.x + s.x) * tp;</span><br><span class="line">        tpy += (p.y + s.y) * tp;</span><br><span class="line">        p.x = s.x;</span><br><span class="line">        p.y = s.y;</span><br><span class="line">    &#125;</span><br><span class="line">    s.x = tpx / (<span class="number">6</span> * area);</span><br><span class="line">    s.y = tpy / (<span class="number">6</span> * area);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点集凸包</span></span><br><span class="line"><span class="comment">// 如果希望在凸包的边上有输入点，把两个 &lt;= 改成 &lt;</span></span><br><span class="line"><span class="comment">// 注意：输入点集会被修改</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; ConvexHull(<span class="built_in">vector</span>&lt;Point&gt;&amp; p) <span class="comment">/// 已验证</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 预处理，删除重复点</span></span><br><span class="line">    sort(p.begin(), p.end());</span><br><span class="line">    p.erase(unique(p.begin(), p.end()), p.end());</span><br><span class="line">    <span class="keyword">int</span> n = p.size();</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; ch(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>], p[i]-ch[m<span class="number">-2</span>]) &lt;= <span class="number">0</span>) m--;</span><br><span class="line">        ch[m++] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; k &amp;&amp; Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>], p[i]-ch[m<span class="number">-2</span>]) &lt;= <span class="number">0</span>) m--;</span><br><span class="line">        ch[m++] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) m--;</span><br><span class="line">    ch.resize(m);</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Dist2</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msqrt(a.x - b.x) + msqrt(a.y - b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回点集直径的平方</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">diameter2</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p = ConvexHull(points);</span><br><span class="line">    <span class="keyword">int</span> n = p.size();</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> Dist2(p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">    p.push_back(p[<span class="number">0</span>]); <span class="comment">// 免得取模</span></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>, v = <span class="number">1</span>; u &lt; n; u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 一条直线贴住边p[u]-p[u+1]</span></span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 当Area(p[u], p[u+1], p[v+1]) &lt;= Area(p[u], p[u+1], p[v])时停止旋转</span></span><br><span class="line">            <span class="comment">// 即Cross(p[u+1]-p[u], p[v+1]-p[u]) - Cross(p[u+1]-p[u], p[v]-p[u]) &lt;= 0</span></span><br><span class="line">            <span class="comment">// 根据Cross(A,B) - Cross(A,C) = Cross(A,B-C)</span></span><br><span class="line">            <span class="comment">// 化简得Cross(p[u+1]-p[u], p[v+1]-p[v]) &lt;= 0</span></span><br><span class="line">            <span class="keyword">int</span> diff = Cross(p[u+<span class="number">1</span>]-p[u], p[v+<span class="number">1</span>]-p[v]);</span><br><span class="line">            <span class="keyword">if</span>(diff &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = max(ans, Dist2(p[u], p[v])); <span class="comment">// u和v是对踵点</span></span><br><span class="line">                <span class="keyword">if</span>(diff == <span class="number">0</span>)</span><br><span class="line">                    ans = max(ans, Dist2(p[u], p[v+<span class="number">1</span>])); <span class="comment">// diff == 0时u和v+1也是对踵点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v = (v + <span class="number">1</span>) % n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两凸包最近距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RC_Distance</span><span class="params">(Point *ch1, Point *ch2, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">0</span>, p=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(ch1[i].y-ch1[p].y &lt; -eps) p=i;</span><br><span class="line">    <span class="comment">//REP(i, m)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">if</span>(ch2[i].y-ch2[q].y &gt; eps) q=i;</span><br><span class="line">    ch1[n]=ch1[<span class="number">0</span>];</span><br><span class="line">    ch2[m]=ch2[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tmp, ans=<span class="number">1e100</span>;</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((tmp = Cross(ch1[p+<span class="number">1</span>]-ch1[p], ch2[q+<span class="number">1</span>]-ch1[p]) - Cross(ch1[p+<span class="number">1</span>]-ch1[p], ch2[q]- ch1[p])) &gt; eps)</span><br><span class="line">            q=(q+<span class="number">1</span>)%m;</span><br><span class="line">        <span class="keyword">if</span>(tmp &lt; -eps) ans = min(ans,DistanceToSegment(ch2[q],ch1[p],ch1[p+<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">else</span> ans = min(ans,dis_pair_seg(ch1[p],ch1[p+<span class="number">1</span>],ch2[q],ch2[q+<span class="number">1</span>]));</span><br><span class="line">        p=(p+<span class="number">1</span>)%n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两凸包最近距离</span></span><br><span class="line"><span class="comment">//使用vector</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RC_Distance</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; ch1, <span class="built_in">vector</span>&lt;Point&gt; ch2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">0</span>, p = <span class="number">0</span>, n = ch1.size(), m = ch2.size();</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(ch1[i].y-ch1[p].y &lt; -eps) p=i;</span><br><span class="line">    <span class="comment">//REP(i, m)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">if</span>(ch2[i].y-ch2[q].y &gt; eps) q=i;</span><br><span class="line">    ch1.push_back(ch1[<span class="number">0</span>]), ch2.push_back(ch2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tmp, ans=<span class="number">1e100</span>;</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((tmp = Cross(ch1[p+<span class="number">1</span>]-ch1[p], ch2[q+<span class="number">1</span>]-ch1[p]) - Cross(ch1[p+<span class="number">1</span>]-ch1[p], ch2[q]- ch1[p])) &gt; eps)</span><br><span class="line">            q=(q+<span class="number">1</span>)%m;</span><br><span class="line">        <span class="keyword">if</span>(tmp &lt; -eps) ans = min(ans,DistanceToSegment(ch2[q],ch1[p],ch1[p+<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">else</span> ans = min(ans,dis_pair_seg(ch1[p],ch1[p+<span class="number">1</span>],ch2[q],ch2[q+<span class="number">1</span>]));</span><br><span class="line">        p=(p+<span class="number">1</span>)%n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//凸包最大内接三角形</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RC_Triangle</span><span class="params">(Point* res,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>, tmp;</span><br><span class="line">    res[n] = res[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> j, k;</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (i+<span class="number">1</span>)%n;</span><br><span class="line">        k = (j+<span class="number">1</span>)%n;</span><br><span class="line">        <span class="keyword">while</span>((j != k) &amp;&amp; (k != i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(Cross(res[j] - res[i], res[k+<span class="number">1</span>] - res[i]) &gt; Cross(res[j] - res[i], res[k] - res[i])) k= (k+<span class="number">1</span>)%n;</span><br><span class="line">            tmp = Cross(res[j] - res[i], res[k] - res[i]);</span><br><span class="line">            <span class="keyword">if</span>(tmp &gt; ans) ans = tmp;</span><br><span class="line">            j = (j+<span class="number">1</span>)%n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//凸包最大内接三角形</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RC_Triangle</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; res, Point&amp; a, Point&amp; b, Point&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = res.size();</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>, tmp;</span><br><span class="line">    res.push_back(res[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> j, k;</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (i+<span class="number">1</span>)%n;</span><br><span class="line">        k = (j+<span class="number">1</span>)%n;</span><br><span class="line">        <span class="keyword">while</span>((j != k) &amp;&amp; (k != i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(Cross(res[j] - res[i], res[k+<span class="number">1</span>] - res[i]) &gt; Cross(res[j] - res[i], res[k] - res[i])) k= (k+<span class="number">1</span>)%n;</span><br><span class="line">            tmp = Cross(res[j] - res[i], res[k] - res[i]);</span><br><span class="line">            <span class="keyword">if</span>(tmp &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                a = res[i], b = res[j], c = res[k];</span><br><span class="line">                ans = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            j = (j+<span class="number">1</span>)%n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两凸包是否有交点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ConvexPolygonDisjoint</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt; ch1, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt; ch2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1 = ch1.size();</span><br><span class="line">    <span class="keyword">int</span> c2 = ch2.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c1; i++)</span><br><span class="line">        <span class="keyword">if</span>(isPointInPolygon(ch1[i], ch2) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 内部或边界上</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c2; i++)</span><br><span class="line">        <span class="keyword">if</span>(isPointInPolygon(ch2[i], ch1) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 内部或边界上</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c1; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c2; j++)</span><br><span class="line">            <span class="keyword">if</span>(SegmentProperIntersection(ch1[i], ch1[(i+<span class="number">1</span>)%c1], ch2[j], ch2[(j+<span class="number">1</span>)%c2]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dist</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Length(a - b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////模拟退火求费马点 保存在ptres中</span></span><br><span class="line"><span class="comment">//double fermat_point(Point *pt, int n, Point&amp; ptres)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    Point u, v;</span></span><br><span class="line"><span class="comment">//    double step = 0.0, curlen, explen, minlen;</span></span><br><span class="line"><span class="comment">//    int i, j, k;</span></span><br><span class="line"><span class="comment">//    bool flag;</span></span><br><span class="line"><span class="comment">//    u.x = u.y = v.x = v.y = 0.0;</span></span><br><span class="line"><span class="comment">//    //REP(i, n)</span></span><br><span class="line"><span class="comment">//    for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        step += fabs(pt[i].x) + fabs(pt[i].y);</span></span><br><span class="line"><span class="comment">//        u.x += pt[i].x;</span></span><br><span class="line"><span class="comment">//        u.y += pt[i].y;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    u.x /= n;</span></span><br><span class="line"><span class="comment">//    u.y /= n;</span></span><br><span class="line"><span class="comment">//    flag = 0;</span></span><br><span class="line"><span class="comment">//    while(step &gt; eps)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        for(k = 0; k &lt; 10; step /= 2, ++k)</span></span><br><span class="line"><span class="comment">//            for(i = -1; i &lt;= 1; ++i)</span></span><br><span class="line"><span class="comment">//                for(j = -1; j &lt;= 1; ++j)</span></span><br><span class="line"><span class="comment">//                &#123;</span></span><br><span class="line"><span class="comment">//                    v.x = u.x + step*i;</span></span><br><span class="line"><span class="comment">//                    v.y = u.y + step*j;</span></span><br><span class="line"><span class="comment">//                    curlen = explen = 0.0;</span></span><br><span class="line"><span class="comment">//                    //REP(i, n)</span></span><br><span class="line"><span class="comment">//                    for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//                    &#123;</span></span><br><span class="line"><span class="comment">//                        curlen += dist(u, pt[idx]);</span></span><br><span class="line"><span class="comment">//                        explen += dist(v, pt[idx]);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                    if(curlen &gt; explen)</span></span><br><span class="line"><span class="comment">//                    &#123;</span></span><br><span class="line"><span class="comment">//                        u = v;</span></span><br><span class="line"><span class="comment">//                        minlen = explen;</span></span><br><span class="line"><span class="comment">//                        flag = 1;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    ptres = u;</span></span><br><span class="line"><span class="comment">//    return flag ? minlen : curlen;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多边形费马点</span></span><br><span class="line"><span class="comment">//到所有顶点的距离和最小</span></span><br><span class="line"><span class="function">Point <span class="title">Fermat</span><span class="params">(<span class="keyword">int</span> np, Point* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> nowx = <span class="number">0</span>, nowy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> nextx = <span class="number">0</span>, nexty = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//REP(i, np)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=np;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nowx += p[i].x;</span><br><span class="line">        nowy += p[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (nowx /= np, nowy /= np;; nowx = nextx, nowy = nexty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> topx = <span class="number">0</span>, topy = <span class="number">0</span>, bot = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//REP(i, np)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=np;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> d = msqrt(msqrt(nowx - p[i].x) + msqrt(nowy - p[i].y));</span><br><span class="line">            topx += p[i].x / d;</span><br><span class="line">            topy += p[i].y / d;</span><br><span class="line">            bot += <span class="number">1</span> / d;</span><br><span class="line">        &#125;</span><br><span class="line">        nextx = topx / bot;</span><br><span class="line">        nexty = topy / bot;</span><br><span class="line">        <span class="keyword">if</span> (dcmp(nextx - nowx) == <span class="number">0</span> &amp;&amp; dcmp(nexty - nowy) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point fp;</span><br><span class="line">    fp.x = nowx;</span><br><span class="line">    fp.y = nowy;</span><br><span class="line">    <span class="keyword">return</span> fp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最近点对</span></span><br><span class="line"><span class="comment">//使用前先对输入的point进行排序,使用cmpxy函数</span></span><br><span class="line">Point point[N];</span><br><span class="line"><span class="keyword">int</span> tmpt[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point&amp; a = point[x];</span><br><span class="line">    Point&amp; b = point[y];</span><br><span class="line">    <span class="keyword">return</span> msqrt(msqrt(a.x - b.x) + msqrt(a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpxy</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> point[a].y &lt; point[b].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Closest_Pair</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = INF;</span><br><span class="line">    <span class="keyword">if</span>(left==right)</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">if</span>(left + <span class="number">1</span> == right)</span><br><span class="line">        <span class="keyword">return</span> dist(left, right);</span><br><span class="line">    <span class="keyword">int</span> mid = (left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> d1 = Closest_Pair(left,mid);</span><br><span class="line">    <span class="keyword">double</span> d2 = Closest_Pair(mid+<span class="number">1</span>,right);</span><br><span class="line">    d = min(d1,d2);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//分离出宽度为d的区间</span></span><br><span class="line">    <span class="comment">//FE(i, left, right)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;=right;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(point[mid].x-point[i].x) &lt;= d)</span><br><span class="line">            tmpt[k++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(tmpt,tmpt+k,cmpy);</span><br><span class="line">    <span class="comment">//线性扫描</span></span><br><span class="line">    <span class="comment">//REP(i, k)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; k &amp;&amp; point[tmpt[j]].y-point[tmpt[i]].y&lt;d; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> d3 = dist(tmpt[i],tmpt[j]);</span><br><span class="line">            <span class="keyword">if</span>(d &gt; d3)</span><br><span class="line">                d = d3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************圆************/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point c;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    Circle() &#123;&#125;</span><br><span class="line">    Circle(Point c, <span class="keyword">double</span> r):c(c), r(r) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Point <span class="title">point</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="comment">//根据圆心角求点坐标</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(c.x+<span class="built_in">cos</span>(a)*r, c.y+<span class="built_in">sin</span>(a)*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;c.x, &amp;c.y, &amp;r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求a点到b点(逆时针)在的圆上的圆弧长度</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DisOnCircle</span><span class="params">(Point a, Point b, Circle C)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ang1 = angle(a - C.c);</span><br><span class="line">    <span class="keyword">double</span> ang2 = angle(b - C.c);</span><br><span class="line">    <span class="keyword">if</span> (ang2 &lt; ang1) ang2 += <span class="number">2</span> * PI;</span><br><span class="line">    <span class="keyword">return</span> C.r * (ang2 - ang1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直线与圆交点 返回个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LineCircle</span><span class="params">(Point p1,Point p2,Circle c ,<span class="built_in">vector</span>&lt;Point&gt;&amp; p)</span> </span>&#123; <span class="comment">/// 已验证</span></span><br><span class="line">    Point m = GetLineProjection(c.c, p1, p2);</span><br><span class="line">    <span class="keyword">double</span> h2 = Length2(c.c-m);</span><br><span class="line">    <span class="keyword">int</span> fg = dcmp(c.r*c.r-h2);</span><br><span class="line">    <span class="keyword">double</span> len = Length(p2-p1);</span><br><span class="line">    <span class="keyword">if</span>(!fg)&#123;</span><br><span class="line">        p.push_back(m);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fg&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> rate = msqrt(c.r*c.r-h2)/len;</span><br><span class="line">        p.push_back(m-(p2-p1)*rate);</span><br><span class="line">        p.push_back(m+(p2-p1)*rate);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两圆交点 返回个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCircleCircleIntersection</span><span class="params">(Circle C1, Circle C2, <span class="built_in">vector</span>&lt;Point&gt;&amp; sol)</span> </span>&#123; <span class="comment">///已验证</span></span><br><span class="line">    <span class="keyword">double</span> d = Length(C1.c - C2.c);</span><br><span class="line">    <span class="keyword">if</span>(dcmp(d) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dcmp(C1.r - C2.r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 重合，无穷多交点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(C1.r + C2.r - d) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(<span class="built_in">fabs</span>(C1.r-C2.r) - d) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> a = angle(C2.c - C1.c);</span><br><span class="line">    <span class="keyword">double</span> da = <span class="built_in">acos</span>((C1.r*C1.r + d*d - C2.r*C2.r) / (<span class="number">2</span>*C1.r*d));</span><br><span class="line">    Point p1 = C1.point(a-da), p2 = C1.point(a+da);</span><br><span class="line">    sol.push_back(p1);</span><br><span class="line">    <span class="keyword">if</span>(p1 == p2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    sol.push_back(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两圆的公切线, -1表示无穷条切线</span></span><br><span class="line"><span class="comment">//返回切线的条数, -1表示无穷条切线</span></span><br><span class="line"><span class="comment">//a[i]和b[i]分别是第i条切线在圆A和圆B上的切点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTangents</span><span class="params">(Circle A, Circle B, Point* a, Point* b)</span> <span class="comment">///已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (A.r &lt; B.r) swap(A, B), swap(a, b);</span><br><span class="line">    <span class="comment">///****************************</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d2 = (A.c.x - B.c.x) * (A.c.x - B.c.x) + (A.c.y - B.c.y) * (A.c.y - B.c.y);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rdiff = A.r - B.r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rsum = A.r + B.r;</span><br><span class="line">    <span class="keyword">if</span> (d2 &lt; rdiff * rdiff) <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//内含</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///***************************************</span></span><br><span class="line">    <span class="keyword">double</span> base = <span class="built_in">atan2</span>(B.c.y - A.c.y, B.c.x - A.c.x);</span><br><span class="line">    <span class="keyword">if</span> (d2 == <span class="number">0</span> &amp;&amp; A.r == B.r) <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">//无线多条切线</span></span><br><span class="line">    <span class="keyword">if</span> (d2 == rdiff * rdiff)    <span class="comment">//内切, 1条切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">///**********************</span></span><br><span class="line">        a[cnt] = A.point(base); b[cnt] = B.point(base); cnt++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有外公切线</span></span><br><span class="line">    <span class="keyword">double</span> ang = <span class="built_in">acos</span>((A.r - B.r) / msqrt(d2 * <span class="number">1.0</span>));</span><br><span class="line">    a[cnt] = A.point(base + ang); b[cnt] = B.point(base + ang); cnt++;</span><br><span class="line">    a[cnt] = A.point(base - ang); b[cnt] = B.point(base - ang); cnt++;</span><br><span class="line">    <span class="keyword">if</span> (d2 == rsum * rsum)  <span class="comment">//一条内公切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[cnt] = A.point(base); b[cnt] = B.point(PI + base); cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d2 &gt; rsum * rsum)  <span class="comment">//两条内公切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> ang = <span class="built_in">acos</span>((A.r + B.r) / msqrt(d2 * <span class="number">1.0</span>));</span><br><span class="line">        a[cnt] = A.point(base + ang); b[cnt] = B.point(PI + base + ang); cnt++;</span><br><span class="line">        a[cnt] = A.point(base - ang); b[cnt] = B.point(PI + base - ang); cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过点p到圆C的切线。v[i]是第i条切线的向量。返回切线条数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTangents</span><span class="params">(Point p,Circle c,<span class="built_in">vector</span>&lt;Point&gt;&amp; v)</span> </span>&#123;<span class="comment">//存入的向量</span></span><br><span class="line">    Vector u = c.c - p;</span><br><span class="line">    <span class="keyword">double</span> dist = Length(u);</span><br><span class="line">    <span class="keyword">if</span>(dist &lt; c.r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(dist - c.r) == <span class="number">0</span>)&#123;   <span class="comment">// p在圆上，只有一条切线</span></span><br><span class="line">        v.push_back(Rotate(u, PI/<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> ang = <span class="built_in">asin</span>(c.r / dist);</span><br><span class="line">        v.push_back(Rotate(u, -ang));</span><br><span class="line">        v.push_back(Rotate(u, ang));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过点p到圆C的切点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTangentPoints</span><span class="params">(Point p, Circle C, <span class="built_in">vector</span>&lt;Point&gt;&amp; v)</span> <span class="comment">/// 已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector u = C.c - p;</span><br><span class="line">    <span class="keyword">double</span> dist = Length(u);</span><br><span class="line">    <span class="keyword">if</span>(dist &lt; C.r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(dist - C.r) == <span class="number">0</span>)   <span class="comment">// p在圆上，只有一条切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> ang = <span class="built_in">asin</span>(C.r / dist);</span><br><span class="line">        <span class="keyword">double</span> d = msqrt(dist * dist - C.r * C.r);</span><br><span class="line">        v.push_back(p + Unit(Rotate(u, -ang)) * d);</span><br><span class="line">        v.push_back(p + Unit(Rotate(u, +ang)) * d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆A与圆B的切点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTangentPoints</span><span class="params">(Circle A, Circle B, <span class="built_in">vector</span>&lt;Point&gt;&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.r &lt; B.r) swap(A, B);</span><br><span class="line">    <span class="comment">///****************************</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d2 = msqrt(A.c.x - B.c.x) + msqrt(A.c.y - B.c.y);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rdiff = A.r - B.r, rsum = A.r + B.r;</span><br><span class="line">    <span class="keyword">if</span> (d2 &lt; rdiff * rdiff) <span class="keyword">return</span>;   <span class="comment">//内含</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///***************************************</span></span><br><span class="line">    <span class="keyword">double</span> base = <span class="built_in">atan2</span>(B.c.y - A.c.y, B.c.x - A.c.x);</span><br><span class="line">    <span class="keyword">if</span> (d2 == <span class="number">0</span> &amp;&amp; A.r == B.r) <span class="keyword">return</span>;    <span class="comment">//无线多条切线</span></span><br><span class="line">    <span class="keyword">if</span> (d2 == rdiff * rdiff)    <span class="comment">//内切, 1条切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">///**********************</span></span><br><span class="line">        a.push_back(A.point(base));</span><br><span class="line">        a.push_back(B.point(base));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有外公切线</span></span><br><span class="line">    <span class="keyword">double</span> ang = <span class="built_in">acos</span>((A.r - B.r) / msqrt(d2 * <span class="number">1.0</span>));</span><br><span class="line">    a.push_back(A.point(base + ang)); a.push_back(B.point(base + ang));</span><br><span class="line">    a.push_back(A.point(base - ang)); a.push_back(B.point(base - ang));</span><br><span class="line">    <span class="keyword">if</span> (d2 == rsum * rsum)  <span class="comment">//一条内公切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        a.push_back(A.point(base));</span><br><span class="line">        a.push_back(B.point(PI + base));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d2 &gt; rsum * rsum)  <span class="comment">//两条内公切线</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> ang = <span class="built_in">acos</span>((A.r + B.r) / msqrt(d2 * <span class="number">1.0</span>));</span><br><span class="line">        a.push_back(A.point(base + ang));</span><br><span class="line">        a.push_back(B.point(PI + base + ang));</span><br><span class="line">        a.push_back(A.point(base - ang));</span><br><span class="line">        a.push_back(B.point(PI + base - ang));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三角形外接圆</span></span><br><span class="line"><span class="function">Circle <span class="title">CircumscribedCircle</span><span class="params">(Point p1, Point p2, Point p3)</span> <span class="comment">/// 已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Bx = p2.x-p1.x, By = p2.y-p1.y;</span><br><span class="line">    <span class="keyword">double</span> Cx = p3.x-p1.x, Cy = p3.y-p1.y;</span><br><span class="line">    <span class="keyword">double</span> D = <span class="number">2</span>*(Bx*Cy-By*Cx);</span><br><span class="line">    <span class="keyword">double</span> cx = (Cy*(Bx*Bx+By*By) - By*(Cx*Cx+Cy*Cy))/D + p1.x;</span><br><span class="line">    <span class="keyword">double</span> cy = (Bx*(Cx*Cx+Cy*Cy) - Cx*(Bx*Bx+By*By))/D + p1.y;</span><br><span class="line">    Point p = Point(cx, cy);</span><br><span class="line">    <span class="keyword">return</span> Circle(p, Length(p1-p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三角形内切圆</span></span><br><span class="line"><span class="function">Circle <span class="title">InscribedCircle</span><span class="params">(Point p1, Point p2, Point p3)</span> <span class="comment">/// 已验证</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = Length(p2-p3);</span><br><span class="line">    <span class="keyword">double</span> b = Length(p3-p1);</span><br><span class="line">    <span class="keyword">double</span> c = Length(p1-p2);</span><br><span class="line">    Point p = (p1*a+p2*b+p3*c)/(a+b+c);</span><br><span class="line">    <span class="keyword">return</span> Circle(p, DistanceToLine(p, p1, p2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//半径为r 与a b两直线相切的圆心</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; CircleTangentToLinesGivenRadius(Line a, Line b, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; ans;</span><br><span class="line">    Line L1 = a.move(-r), L2 = a.move(r);</span><br><span class="line">    Line L3 = b.move(-r), L4 = b.move(r);</span><br><span class="line">    ans.push_back(GetLineIntersection(L1, L3));</span><br><span class="line">    ans.push_back(GetLineIntersection(L1, L4));</span><br><span class="line">    ans.push_back(GetLineIntersection(L2, L3));</span><br><span class="line">    ans.push_back(GetLineIntersection(L2, L4));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//与两圆相切 半径为r的所有圆心</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; CircleTangentToTwoDisjointCirclesWithRadius(Circle c1, Circle c2, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; ans;</span><br><span class="line">    Vector v = c2.c - c1.c;</span><br><span class="line">    <span class="keyword">double</span> dist = Length(v);</span><br><span class="line">    <span class="keyword">int</span> d = dcmp(dist - c1.r -c2.r - r*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(d &gt; <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    getCircleCircleIntersection(Circle(c1.c, c1.r+r), Circle(c2.c, c2.r+r), ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多边形与圆相交面积</span></span><br><span class="line"><span class="function">Point <span class="title">GetIntersection</span><span class="params">(Line a, Line b)</span> <span class="comment">//线段交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector u = a.p-b.p;</span><br><span class="line">    <span class="keyword">double</span> t = Cross(b.v, u) / Cross(a.v, b.v);</span><br><span class="line">    <span class="keyword">return</span> a.p + a.v*t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">InCircle</span><span class="params">(Point x, Circle c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(c.r - Length(c.c - x)) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">OnCircle</span><span class="params">(Point x, Circle c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(c.r - Length(c.c - x)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线段与圆的交点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSegCircleIntersection</span><span class="params">(Line L, Circle C, Point* sol)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector nor = Normal(L.v);</span><br><span class="line">    Line pl = Line(C.c, nor);</span><br><span class="line">    Point ip = GetIntersection(pl, L);</span><br><span class="line">    <span class="keyword">double</span> dis = Length(ip - C.c);</span><br><span class="line">    <span class="keyword">if</span> (dcmp(dis - C.r) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Point dxy = Unit(L.v) * msqrt(msqrt(C.r) - msqrt(dis));</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    sol[ret] = ip + dxy;</span><br><span class="line">    <span class="keyword">if</span> (OnSegment(sol[ret], L.p, L.point(<span class="number">1</span>))) ret++;</span><br><span class="line">    sol[ret] = ip - dxy;</span><br><span class="line">    <span class="keyword">if</span> (OnSegment(sol[ret], L.p, L.point(<span class="number">1</span>))) ret++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线段切割圆</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SegCircleArea</span><span class="params">(Circle C, Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a1 = angle(a - C.c);</span><br><span class="line">    <span class="keyword">double</span> a2 = angle(b - C.c);</span><br><span class="line">    <span class="keyword">double</span> da = <span class="built_in">fabs</span>(a1 - a2);</span><br><span class="line">    <span class="keyword">if</span> (da &gt; PI) da = PI * <span class="number">2.0</span> - da;</span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross(b - C.c, a - C.c)) * da * msqrt(C.r) / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多边形与圆相交面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolyCiclrArea</span><span class="params">(Circle C, Point *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ret = <span class="number">0.0</span>;</span><br><span class="line">    Point sol[<span class="number">2</span>];</span><br><span class="line">    p[n] = p[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//REP(i, n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//double t1, t2;</span></span><br><span class="line">        <span class="keyword">int</span> cnt = getSegCircleIntersection(Line(p[i], p[i+<span class="number">1</span>]-p[i]), C, sol);</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!InCircle(p[i], C) || !InCircle(p[i+<span class="number">1</span>], C)) ret += SegCircleArea(C, p[i], p[i+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> ret += Cross(p[i+<span class="number">1</span>] - C.c, p[i] - C.c) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (InCircle(p[i], C) &amp;&amp; !InCircle(p[i+<span class="number">1</span>], C)) ret += Cross(sol[<span class="number">0</span>] - C.c, p[i] - C.c) / <span class="number">2.0</span>, ret += SegCircleArea(C, sol[<span class="number">0</span>], p[i+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> ret += SegCircleArea(C, p[i], sol[<span class="number">0</span>]), ret += Cross(p[i+<span class="number">1</span>] - C.c, sol[<span class="number">0</span>] - C.c) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p[i] &lt; p[i + <span class="number">1</span>]) ^ (sol[<span class="number">0</span>] &lt; sol[<span class="number">1</span>])) swap(sol[<span class="number">0</span>], sol[<span class="number">1</span>]);</span><br><span class="line">            ret += SegCircleArea(C, p[i], sol[<span class="number">0</span>]);</span><br><span class="line">            ret += Cross(sol[<span class="number">1</span>] - C.c, sol[<span class="number">0</span>] - C.c) / <span class="number">2.0</span>;</span><br><span class="line">            ret += SegCircleArea(C, sol[<span class="number">1</span>], p[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;p)</span> <span class="comment">//计算凸包的面积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = p.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">        ans += Cross(p[i] - p[<span class="number">0</span>], p[i + <span class="number">1</span>] - p[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">seg</span><span class="params">(Point o, Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dcmp(b.x - a.x) == <span class="number">0</span>) <span class="keyword">return</span> (o.y - a.y) / (b.y - a.y);</span><br><span class="line">    <span class="keyword">return</span> (o.x - a.x) / (b.x - a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; pp[<span class="number">110</span>];</span><br><span class="line">pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; s[<span class="number">2200</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">polyunion</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;*p, <span class="keyword">int</span> n)</span><span class="comment">//求n个多凸包的面积交</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = p[i].size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">            s[m++] = mp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            s[m++] = mp(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            Point a = p[i][j], b = p[i][(j + <span class="number">1</span>) % sz];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> siz = p[k].size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; siz; ii++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Point c = p[k][ii], d = p[k][(ii + <span class="number">1</span>) % siz];</span><br><span class="line">                        <span class="keyword">int</span> c1 = dcmp(Cross(b - a, c - a));</span><br><span class="line">                        <span class="keyword">int</span> c2 = dcmp(Cross(b - a, d - a));</span><br><span class="line">                        <span class="keyword">if</span> (c1 == <span class="number">0</span> &amp;&amp; c2 == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (dcmp(Dot(b - a, d - c)) &gt; <span class="number">0</span> &amp;&amp; i &gt; k)</span><br><span class="line">                            &#123;</span><br><span class="line">                                s[m++] = mp(seg(c, a, b), <span class="number">1</span>);</span><br><span class="line">                                s[m++] = mp(seg(d, a, b), <span class="number">-1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">double</span> s1 = Cross(d - c, a - c);</span><br><span class="line">                            <span class="keyword">double</span> s2 = Cross(d - c, b - c);</span><br><span class="line">                            <span class="keyword">if</span> (c1 &gt;= <span class="number">0</span> &amp;&amp; c2 &lt; <span class="number">0</span>) s[m++] = mp(s1 / (s1 - s2), <span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (c1 &lt; <span class="number">0</span> &amp;&amp; c2 &gt;= <span class="number">0</span>) s[m++] = mp(s1 / (s1 - s2), <span class="number">-1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(s, s + m);</span><br><span class="line">            <span class="keyword">double</span> pre = min(max(s[<span class="number">0</span>].first, <span class="number">0.0</span>), <span class="number">1.0</span>), now;</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> cov = s[<span class="number">0</span>].second;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                now = min(max(s[j].first, <span class="number">0.0</span>), <span class="number">1.0</span>);</span><br><span class="line">                <span class="keyword">if</span> (!cov) sum += now - pre;</span><br><span class="line">                cov += s[j].second;</span><br><span class="line">                pre = now;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += Cross(a, b)*sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li><p>输出保留c位小数点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%.*f\n"</span>, c, (<span class="keyword">double</span>)a/b);</span><br></pre></td></tr></table></figure></li><li><p>平方和公式<br>$1^2+2^2+3^2+…+n^2 = n(n+1)(2n+1)/6$</p><p>$2^2+4^2+6^2+…+(2n)^2=2n(n+1)(2n+1)/3$</p></li><li><p>立方和公式<br>$1^3+2^3+3^3+…+n^3=（n(n+1)/2)^2$</p></li><li><p>等差数列求和公式<br>$S_n=n(a_1+a_n)/2$</p></li><li><p>等比数列求和公式:<br>$S_n=a_1(1-q^n)/(1-q)$</p></li><li><p>组合数性质</p><p>$C_n^0+C_n^1+…+C_n^n=2^n$</p></li><li><p>错排公式：<br>$D(1)=0,D(2)=1;D(n)=(n-1)[D(n-2)+D(n-1)]$</p></li><li><p>斐波那契数列通项公式</p><script type="math/tex; mode=display">\frac{1}{\sqrt{5}}[(\frac{1+\sqrt{5}}{2})^n-(\frac{1-\sqrt{5}}{2})^n](n>=1)</script></li><li><p>等价类划分</p><p>$S_0=1,S_n=C(n-1,0)*S_{n-1}+C(n-1,1)*S_{n-2}+…+C(n-1,n-1)*S_0$</p></li><li><p>阶乘逼近函数</p></li></ul><script type="math/tex; mode=display">n!=\sqrt{2\pi n}(\frac{n}{e})^ne^{\frac{1}{12n}-\frac{\ln(9n)}{(9n)^{\pi}-(9n)^{-\pi}}}</script><ul><li><p>三角形面积</p><p>$S = \frac{1}{2}absin(\theta )$</p><p>$p = \frac{1}{2}(a+b+c),S=\sqrt{p(p-a)(p-b)(p-c)}$ </p></li><li><p>基姆拉尔森公式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m[<span class="number">15</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>( (year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>) || year%<span class="number">400</span>==<span class="number">0</span> ) m[<span class="number">2</span>]=<span class="number">29</span>; <span class="comment">//闰年</span></span><br><span class="line"><span class="keyword">else</span> m[<span class="number">2</span>]=<span class="number">28</span>;<span class="comment">//平年</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">larson</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(month == <span class="number">1</span> || month == <span class="number">2</span>)&#123;</span><br><span class="line">year -= <span class="number">1</span>;</span><br><span class="line">month += <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (day+<span class="number">2</span>*month+<span class="number">3</span>*(month+<span class="number">1</span>)/<span class="number">5</span>+year+(year/<span class="number">4</span>)-(year/<span class="number">100</span>)+(year/<span class="number">400</span>)+<span class="number">1</span>)%<span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两矩形相交部分(a,c) - (b,d)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line">a=max(min(x1,x2),min(x3,x4));</span><br><span class="line">b=min(max(x1,x2),max(x3,x4));</span><br><span class="line">c=max(min(y1,y2),min(y3,y4));</span><br><span class="line">d=min(max(y1,y2),max(y3,y4));</span><br></pre></td></tr></table></figure></li><li><p>浮点数判断大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; -eps ? <span class="number">-1</span> : a &lt; eps ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>勾股数</p><p>当a为大于1的<a href="https://baike.baidu.com/item/奇数" target="_blank" rel="noopener">奇数</a>2n+1时，b=2n²+2n, c=2n²+2n+1</p><p>当a为大于4的偶数2n时，b=n²-1, c=n²+1</p></li><li><p>希尔伯特曲线坐标与编号相互转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* x, <span class="keyword">int</span>* y, <span class="keyword">int</span> rx, <span class="keyword">int</span> ry)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ry == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (rx == <span class="number">1</span>)&#123;</span><br><span class="line">            *x = n - <span class="number">1</span> - *x;</span><br><span class="line">            *y = n - <span class="number">1</span> - *y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = *x;</span><br><span class="line">        *x = *y;</span><br><span class="line">        *y = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//convert (x,y) to d // 1&lt;&lt;k==n,x,y从0开始,注意方向</span></span><br><span class="line"><span class="function">ll <span class="title">xy2d</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rx, ry, s;</span><br><span class="line">    ll d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (s = n / <span class="number">2</span>; s &gt; <span class="number">0</span>; s /= <span class="number">2</span>)&#123;</span><br><span class="line">        rx = (x &amp; s) &gt; <span class="number">0</span>;</span><br><span class="line">        ry = (y &amp; s) &gt; <span class="number">0</span>;</span><br><span class="line">        d += s * s * ((<span class="number">3</span> * rx) ^ ry);</span><br><span class="line">        rot(n, &amp;x, &amp;y, rx, ry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//convert d to (x,y)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">d2xy</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d, <span class="keyword">int</span>* x, <span class="keyword">int</span>* y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rx, ry, s, t = d;</span><br><span class="line">    *x = *y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">1</span>; s &lt; n; s *= <span class="number">2</span>)&#123;</span><br><span class="line">        rx = <span class="number">1</span> &amp; (t / <span class="number">2</span>);</span><br><span class="line">        ry = <span class="number">1</span> &amp; (t ^ rx);</span><br><span class="line">        rot(s, x, y, rx, ry);</span><br><span class="line">        *x += s * rx;</span><br><span class="line">        *y += s * ry;</span><br><span class="line">        t /= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      PassWord: xtuacm
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="Template" scheme="http://quincy.ink/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>ARM嵌入式系统 学习笔记</title>
    <link href="http://quincy.ink/ARM%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/ARM嵌入式系统-学习笔记.html</id>
    <published>2019-04-23T00:15:17.000Z</published>
    <updated>2020-05-02T01:12:06.987Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="第1章-嵌入式系统概述"><a href="#第1章-嵌入式系统概述" class="headerlink" title="第1章 嵌入式系统概述"></a>第1章 嵌入式系统概述</h3><ol><li><p>嵌入式系统定义：嵌入到对象体系中的专用计算机应用系统。</p></li><li><p>应用举例：手机、MP3、打印机、DV等。<a id="more"></a></p></li><li><p>嵌入式系统</p><ul><li>分类</li></ul><p>①嵌入式微处理器（EMPU，基础是CPU，应用于专门设计的电路板上，满足嵌入式应用的特殊要求，在其工作温度、抗电磁干扰、可靠性等方面做了增强）</p><p>②微控制器（MCU，整个计算机系统集成到一块芯片中，适用于控制）</p><p>③DSP处理器（DSP，应用目标是大批量的消费类产品）</p><p>④片上系统（SOC，分通用和专用，专用芯片可用于互联网安全方面）</p><ul><li>特点：嵌入性、专用性、计算机</li></ul></li><li><p>嵌入式处理器：为了完成特殊的应用而设计的特殊目的处理器。</p></li><li><p>嵌入式最小系统：提供嵌入式处理器运行所必须的条件的电路与嵌入式处理器共同组成的系统。</p></li><li><p>嵌入式系统基本概念：</p><ul><li>实时操作系统（RTOS）：一段在嵌入式系统启动后首先执行的背景程序，用户的应用程序是运行于RTOS之上的各个任务，RTOS根据各个任务的要求，进行资源管理、消息管理、任务调度及异常处理等工作。</li><li>资源：程序运行时可使用的软、硬件环境。</li><li>共享资源：被一个以上任务使用的资源。</li><li>任务：一个线程。</li><li>任务切换：保存当前运行任务的工作状态并入栈，把下一个要运行任务的当前状态从栈中装回CPU寄存器并开始运行。</li><li>内核：负责管理各个任务，提供任务切换的基本服务。</li><li>非占先式内核：中断后回到中断了的任务。</li><li>占先式内核：中断后让进入就绪态优先级最高的开始运行。</li><li>任务优先级：表示任务被调度的优先程度。</li><li>中断：一种硬件机制，用于通知CPU有个异步事件发生了。</li></ul></li><li><p>常见嵌入式实时操作系统</p><ul><li>μClinux：开源</li><li>Windows CE：开放</li><li>VxWorks：实时性卓越</li><li>μC/OS - ΙΙ：开源、抢占式</li></ul></li></ol><p><br></p><h3 id="第2章-ARM7体系结构"><a href="#第2章-ARM7体系结构" class="headerlink" title="第2章 ARM7体系结构"></a>第2章 ARM7体系结构</h3><ol><li><p>ARM简介</p><ul><li>ARM公司是一家知识产权(IP)供应商，它与一般的半导体公司最大的不同就是不制造芯片且不向终端用户出售芯片，而是通过转让设计方案，由合作伙伴生产出各具特色的芯片。</li><li>ARM架构是ARM公司面向市场设计的第一款低成本RISC微处理器。</li></ul></li><li><p>ARM7后缀含义：</p><ul><li>带M：64位乘法指令</li><li>带D：支持片上调试</li><li>带T：高密度16位Thumb指令集扩展</li><li>带I：Embedded ICE硬件仿真功能模块</li></ul></li><li><p>ARM处理器使用冯·诺依曼结构，指令数据共用一条32位总线；直接支持8位字节(2^32)，16位半字(2^31)或者32位字(2^30)的数据类型。</p></li><li><p>如果一个数据是以字方式存储的，那么它就是字对齐的，否则就是非字对齐的；特征：bit0=bit1=0,其他任意。</p><p>如果一个数据是以半字方式存储的，那么它就是半字对齐的，否则就是非半字对齐的；特征：bit0=0,其他任意。</p></li><li><p><strong>流水线</strong></p><p>三级：①取指：从存储器装载一条指令 ②译码：识别将要执行的指令 ③执行：处理指令并将结果写回寄存器</p></li><li><p>ARM处理器状态</p><ul><li>ARM指令集为32位长度，效率高，代码密度低，都是有条件执行，具有最完整的功能；Thumb指令集为16位长度，代码密度较高，只有一条具备有条件执行，能实现ARM指令集的大部分功能。在功能上可以认为Thumb是ARM的子集。</li><li>当前程序状态寄存器CPSR中的控制位<strong>T</strong>反映处理器正在操作的状态，T=0，处理器处于ARM状态，T=1，处理器处于Thumb状态。</li><li>从一个ARM例程调用另一个Thumb例程时，内核必须切换状态，反之亦然。<strong>BX分支</strong>将ARM内核的操作状态在ARM和Thumb之间进行切换。</li></ul></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;7. ARM处理器模式</p><ul><li>除了用户模式以外，其余所有6种模式称之为非用户模式</li><li>特权模式中除去系统模式外的5种模式称之为异常模式</li><li>用户(usr)、系统(sys)、管理(svc)、中止(abt)、未定义(und)、中断(irq)、快速中断(fiq)</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;8. ARM内部寄存器</p><ul><li>ARM处理器内部共有37个用户可访问的32位寄存器，其中有6个32位状态寄存器目前只使用了其中12位；31个通用寄存器+6个状态寄存器(1个CPSR+5个SPSR)；不可同时访问，对其访问取决于处理器状态和处理器模式。</li><li>堆栈指针R13(SP)，保存堆栈的出入口地址、待使用寄存器内容</li><li>链接寄存器R14(LR)，保存子程序和子程序的返回地址</li><li>程序计数器R15(PC)，总是指向“正在取指”的指令</li><li>所有模式共享一个程序状态寄存器CPSR，ARM通过此寄存器监视和控制内部操作的。SPSR为异常模式中保存CPSR当前值的备份程序寄存器。</li><li>程序状态寄存器格式</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">N</th><th style="text-align:center">Z</th><th style="text-align:center">C</th><th style="text-align:center">V</th><th style="text-align:center">…</th><th style="text-align:center">I</th><th style="text-align:center">F</th><th style="text-align:center">T</th><th style="text-align:center">M4</th><th style="text-align:center">M3</th><th style="text-align:center">M2</th><th style="text-align:center">M1</th><th style="text-align:center">M0</th></tr></thead><tbody><tr><td style="text-align:center">负</td><td style="text-align:center">0</td><td style="text-align:center">进位</td><td style="text-align:center">溢出</td><td style="text-align:center">保留</td><td style="text-align:center">irq禁止</td><td style="text-align:center">fiq禁止</td><td style="text-align:center">状态位</td><td style="text-align:center">模式位</td><td style="text-align:center">.</td><td style="text-align:center">.</td><td style="text-align:center">.</td><td style="text-align:center">.</td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;&nbsp;9. 模式控制位</p><div class="table-container"><table><thead><tr><th style="text-align:center">M[4:0]</th><th style="text-align:center">模式</th></tr></thead><tbody><tr><td style="text-align:center">10000</td><td style="text-align:center">用户</td></tr><tr><td style="text-align:center">10001</td><td style="text-align:center">快速中断</td></tr><tr><td style="text-align:center">10010</td><td style="text-align:center">中断</td></tr><tr><td style="text-align:center">10011</td><td style="text-align:center">管理</td></tr><tr><td style="text-align:center">10111</td><td style="text-align:center">中止</td></tr><tr><td style="text-align:center">11011</td><td style="text-align:center">未定义</td></tr><tr><td style="text-align:center">11111</td><td style="text-align:center">系统</td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;&nbsp;10. 异常向量表</p><div class="table-container"><table><thead><tr><th style="text-align:center">地址</th><th style="text-align:center">异常</th><th style="text-align:center">模式</th></tr></thead><tbody><tr><td style="text-align:center">0x0000 0000</td><td style="text-align:center">复位</td><td style="text-align:center">管理</td></tr><tr><td style="text-align:center">0x0000 0004</td><td style="text-align:center">未定义指令</td><td style="text-align:center">未定义</td></tr><tr><td style="text-align:center">0x0000 0008</td><td style="text-align:center">软件中断</td><td style="text-align:center">管理</td></tr><tr><td style="text-align:center">0x0000 000C</td><td style="text-align:center">中止（预取）</td><td style="text-align:center">中止</td></tr><tr><td style="text-align:center">0x0000 0010</td><td style="text-align:center">中止（数据）</td><td style="text-align:center">中止</td></tr><tr><td style="text-align:center">0x0000 0014</td><td style="text-align:center">保留</td><td style="text-align:center">保留</td></tr><tr><td style="text-align:center">0x0000 0018</td><td style="text-align:center">IRQ</td><td style="text-align:center">中断</td></tr><tr><td style="text-align:center">0x0000 001C</td><td style="text-align:center">FIQ</td><td style="text-align:center">快速中断</td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;&nbsp;11. 中断优先级</p><div class="table-container"><table><thead><tr><th style="text-align:center">优先级</th><th style="text-align:center">异常</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">复位</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">数据中止</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">FIQ</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">IRQ</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">预取指中止</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">未定义指令</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">软件中断SWI</td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;&nbsp;12. ARM体系的储存系统</p><p>&nbsp;&nbsp;&nbsp;&nbsp;位于地址A的字包含的字节位于A、A+1、A+2、A+3；</p><ul><li><p>小端格式：一个字中的最低地址被看作是最低位字节，最高地址的字节被看作是最高位字节，储存器系统字节0连接到数据线7~0；</p></li><li><p>大端格式：一个字中的最高位字节保存在最低地址，最低位字节保存在最高位地址，储存器系统字节0连接到数据线31~24；</p><p><img src="https://s2.ax1x.com/2019/05/21/EztbfU.jpg" alt="EztbfU.jpg"></p></li></ul><p><br></p><h3 id="第3章-ARM7TDMI（-S）指令系统"><a href="#第3章-ARM7TDMI（-S）指令系统" class="headerlink" title="第3章 ARM7TDMI（-S）指令系统"></a>第3章 ARM7TDMI（-S）指令系统</h3><ol><li><p>ARM处理器寻址方式</p><ul><li><p>寄存器寻址： 寄存器编号</p><blockquote><p>MOV  R1,R2 ；将R2的值存入R1</p><p>SUB R0,R1,R2；将R1的值减R2的值结果存入R0</p></blockquote></li><li><p>立即寻址： 操作数</p><blockquote><p>SUBS R0,R0,#1；R0-1存入R0</p><p>MOV R0,#0xFF000；将立即数0xFF000装入R0</p></blockquote></li><li><p>寄存器移位寻址： ASR(1-32)、LSL(1-31)、LSR(1-32)、ROR(1-31)、RRX(1)</p><blockquote><p>MOV R0,R2,LSL #3 ；R2的值左移3位结果存入R0</p><p>ANDS R1,R1,R2,LSL R3 ；R2的值左移R3位，结果与R1相与后存入R1</p></blockquote></li><li><p>寄存器间接寻址： []</p><blockquote><p>LDR R1,[R2] ；将R2指向的储存单元的数据读出存入R1    //加载字数据</p><p>SWP R1,R1,[R2]；将R2指向的储存单元的数据与R1的值交换</p></blockquote></li><li><p>基址寻址</p><blockquote><p>STR R1,[R0,#-4]！；将R1的值存入R0-4指定的储存单元    //存储字数据</p></blockquote></li><li><p>多寄存器寻址：！，{ }</p><blockquote><p>LDMIA R1!,{R2-R7,R12}；将R1指向的单元中的数据读出到R2-R7,R12中，R1++；//多寄存器加载</p><p>STMIA R0!,{R2-R7,R12}；将R2-R7,R12的值保存到R0指向的存储单元中，R0++;   //多寄存器存储</p></blockquote></li><li><p>堆栈寻址</p><p>满堆栈：指向最后压入栈的有效数据项，向移动指针再写数据；</p><p>空堆栈：指向下一个待压入数据的空位置，先写入数据在移动指针；</p><p>X递增：增大地址向上增长；X递减：减小地址向下增长。</p></li><li><p>相对寻址</p><p>程序计数器PC提供基准地址，地址码字段作为偏移量</p></li></ul></li></ol><p><br></p><h3 id="第4章-LPC2000系列ARM硬件结构"><a href="#第4章-LPC2000系列ARM硬件结构" class="headerlink" title="第4章 LPC2000系列ARM硬件结构"></a>第4章 LPC2000系列ARM硬件结构</h3><ol><li><p>为存储器分配地址的过程称为存储器映射；但为了增加系统的灵活性，系统中有部分存储单元（主要包括引导块(Boot Block)和用于保存向量表的少量存储单元）可以同时出现在不同地址上，则称为存储器重映射。</p></li><li><p>存储器重映射并不是对映射单元的内容进行了复制，只是将多个地址指向了同一个存储单元，通过“存储器管理部件”实现。即一个物理地址对应多个逻辑地址。</p></li><li><p>Boot Block是芯片设计厂家在LPC2000系列ARM内部固化的一段代码，用户无法对其修改或删除。这段代码在芯片复位后被首先运行，其功能主要是判断运行哪个存储器上的程序，检查用户代码是否有效，判断芯片是否被加密，芯片的在应用编程(IAP)以及在系统编程功能(ISP)。</p></li><li><p>系统启动代码(Boot Loader)：大部分由汇编指令构成，可以实现向量表定义、堆栈初始化、系统变量初始化、中断系统初始化、I/O初始化、外围初始化、地址重映射等操作。启动顺序：Boot Block-&gt;Boot Loader-&gt;操作系统</p></li><li><p>时钟系统概述：时钟是计算机系统的脉搏，处理器核在一拍接一拍的时钟驱动下完成指令执行、状态变换等动作。外设部件在时钟的驱动下进行着各种工作，比如串口数据的收发、A/D转换、定时器计数等。因此时钟对于一个计算机系统是至关重要的，通常时钟系统出现问题也是最致命的，比如振荡器不起振、振荡不稳、停振等。组成：晶体振荡器、唤醒定时器、锁相环（PLL）和VPB分频器。</p></li><li><p>晶体振荡器的两个模式：使用外部时钟源时，称为“从属模式”；使用外部晶体时，称为“振荡模式”。</p></li><li><p>LPC2000系列ARM两个复位源：</p><ul><li>外部复位：通过把芯片的$\overline{RESET}$引脚拉为低电平使芯片复位。$\overline{RESET}$引脚为施密特触发输入引脚，带有一个额外的干扰滤波器，可以滤除非常短促的脉冲信号，使处理器不会被干扰脉冲意外复位，或者被不稳定的复位信号复位多次。<ul><li>$\overline{RESET}$需要保持一段时间的低电平，必须在晶振稳定运行之后才能撤除。</li><li>在系统编程(ISP)：是一种非常实用的片内Flash烧写方式。ISP工作时，通过<strong>UART0</strong>使用约定协议与计算机上的ISP软件进行通信，并按用户的操作要求，调用内部的IAP代码实现各种功能。</li></ul></li><li>看门狗复位：内置看门狗部件，可以利用此部件来复位处理器。</li></ul></li><li><p>锁相环PLL</p><ul><li>作用：将振荡器产生的时钟频率$F_{OSC}$进行升频。</li><li>LPC2000系列ARM是基于ARM7内核的，该内核的工作频率基本在100Mhz以下，所以LPC2000系列ARM大部分支持最高60MHz的内核时钟，少部分支持70MHz的内核时钟。</li><li>PLL频率计算：$F_{OSC}$经流控振荡器CCO得到$F_{CCO}$，$F_{CCO}$经过2P分频后得$F_{CCLK}=F_{CCO}/(2*P)$，$F_{CCO}/(2*P)$经M分频后得到$F_{CCO}/(2*P*M) = F_{OSC}$</li><li><p><strong>PLL设置</strong>  <a href="https://www.cnblogs.com/tureno/articles/2714811.html" target="_blank" rel="noopener">参考链接</a></p><ul><li><p>$F_{CCO}$取值必须在156～320MHz内</p></li><li><p>M取值1-32，将M-1放在PLLCFG[4:0]</p></li><li><p>P取值1,2,4,8，将$log_2P$放在PLLCFG[6:5]</p></li><li><p>PLLCON寄存器:包涵使能连接PLL的位,也就是控制PLL是否进行连接,这个连接需要在向PLLFEED发送正确的信息(馈送序列)的时候才生效,否则及时将使能位置位,PLL也不会连接到电路中。PLLCON必须在PLL开始连接之前就设置好,否则会造成系统不可预知的错误,<strong>先设置1后设置3</strong>。</p></li><li><p>PLLSTAT寄存器:从里面可以读出PLLCON,PLLCFG的值,但必须是在PLLFEED的馈送序列被发送,PLLCON,PLLCFG生效以后才可以读到正确的值(<strong>while(PLLSTAT &amp; (1&lt;&lt;10) == 0) ;</strong>)</p></li><li><p>PLLFEED寄存器:向此寄存器以连续的VPB总线周期写入<strong>0xaa,0x55</strong>,即馈送序列，在正确的序列被写入PLLFEED之后,PLLCON,PLLCFG才生效,PLL电路才能正确的连接到电路中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PLLCON = <span class="number">1</span>;</span><br><span class="line">PLLCFG = (M<span class="number">-1</span>)|（log2(P)&lt;&lt;<span class="number">5</span>）;</span><br><span class="line">PLLFEED = <span class="number">0xaa</span>;</span><br><span class="line">PLLFEED = <span class="number">0x55</span>;</span><br><span class="line"><span class="keyword">while</span>(PLLSTAT &amp; (<span class="number">1</span>&lt;&lt;<span class="number">10</span>) == <span class="number">0</span>);</span><br><span class="line">PLLCON = <span class="number">3</span>;</span><br><span class="line">PLLFEED = <span class="number">0xaa</span>;</span><br><span class="line">PLLFEED = <span class="number">0x55</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p>&nbsp;&nbsp;9. VPB分频器</p><ul><li>作用：将$F_{CCLK}$分频，方便外设工作、降低系统功耗</li></ul><p>&nbsp;&nbsp;10. 两种节电模式：</p><ul><li>空闲模式：处理器停止执行指令，使功耗最低降至1～2mA电流</li><li>掉电模式：振荡器关闭，芯片没有任何内部时钟，功耗降低到几乎为零</li></ul><p>&nbsp;&nbsp;11. bank0~bank3的片选信号分别是CS0~CS3。</p><p>&nbsp;&nbsp;12. 外部存储器接口</p><ul><li>LPC2200的外部存储器宽度可设定为8位，16位和32位</li><li>宽度为8位时，有效数据线D7~D0，只有BLS0有效</li><li>宽度为16位时，有效数据线D15~D0，BLS0、BLS1都有效</li><li>操作16位存储器时，需将LPC2200的地址线A1连接到存储器地址A0处</li></ul><p>&nbsp;&nbsp;13. PSRAM读写数据</p><ul><li><p>写入16位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">uint16 *point16;</span><br><span class="line">uint16 data16 = <span class="number">0x00</span>;</span><br><span class="line">point16 = (uint16 *)<span class="number">0x80001020</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">*point16 = data16++; <span class="comment">//循环向地址0x80001020处写入数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写入低8位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">uint8 *point8;</span><br><span class="line">uint8 data8 = <span class="number">0x00</span>;</span><br><span class="line">point8 = (uint8 *)<span class="number">0x80001010</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">*point8 = data8++;<span class="comment">//循环向地址0x80001010处写入数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写入高8位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">uint8 *point8;</span><br><span class="line">uint8 data8 = <span class="number">0x00</span>;</span><br><span class="line">point8 = (uint8 *)<span class="number">0x80001011</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">*point8 = data8++;<span class="comment">//循环向地址0x80001011处写入数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取8位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">uint8 RcvDate8;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    uint8 *point8;</span><br><span class="line">    point8 = (uint*)<span class="number">0x80001010</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        RcvDate8 = *point8++;<span class="comment">//读取0x80001010处的数据</span></span><br><span class="line">        RcvDate8 = *point8++;<span class="comment">//读取0x80001011处的数据</span></span><br><span class="line">        RcvDate8 = *point8++;<span class="comment">//读取0x80001012处的数据</span></span><br><span class="line">        RcvDate8 = *point8--;<span class="comment">//读取0x80001013处的数据</span></span><br><span class="line">        point8--;</span><br><span class="line">        point8--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;14. ARM的大部分引脚都具有多种功能，即引脚复用。但是一个引脚在同一时刻只能使用其中一个功能，通过配置相关寄存器控制多路开关与片内外设。</p><p>&nbsp;&nbsp;15. GPIO的特性</p><ul><li>可以独立控制每个GPIO口的方向（输入/输出模式）</li><li>可以独立设置每个GPIO口的输出状态（高/低电平）</li><li>所有GPIO口在复位后默认为输入状态</li></ul><p>&nbsp;&nbsp;16. GPIO应用示例</p><p>​    <img src="https://s2.ax1x.com/2019/05/21/VSfToV.jpg" alt="VSfToV.jpg"></p><ul><li><p>设置P0.0为输出高电平</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PINSEL0 &amp;= <span class="number">0xFFFFFFFC</span>; <span class="comment">//设置引脚连接模块，将P0.0设置为GPIO功能</span></span><br><span class="line">IO0DIR |= <span class="number">0x00000001</span>; <span class="comment">//将P0.0设置为输出</span></span><br><span class="line">IOSET = <span class="number">0x00000001</span>; <span class="comment">//设置P0.0输出高电平</span></span><br></pre></td></tr></table></figure></li><li><p>使用GPIO控制蜂鸣器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BEEPCON 0x00000080 <span class="comment">//P0.7控制B1，低电平蜂鸣</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    PINSEL0 = <span class="number">0x00000000</span>; <span class="comment">//设置引脚连接GPIO</span></span><br><span class="line">    IO0DIR = BEEPCON; <span class="comment">//设置I/O为输出</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        IO0SET = BEEPCON; <span class="comment">//BEEPCON=1</span></span><br><span class="line">        Delay(<span class="number">10</span>);</span><br><span class="line">        IO0CLR = BEEPCON; <span class="comment">//BEEPCON=0</span></span><br><span class="line">        Delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reuturn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取P0.0引脚的电平状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uint32 PinStat; <span class="comment">//定义存放I/O状态的变量</span></span><br><span class="line">PINSEL0 &amp;= <span class="number">0xFFFFFFFC</span>; <span class="comment">//设置引脚连接模块，将P0.0设置为GPIO功能</span></span><br><span class="line">IO0DIR &amp;= <span class="number">0xFFFFFFFE</span>; <span class="comment">//将P0.0设置为输入</span></span><br><span class="line">PinStat = IO0PIN&amp;<span class="number">0x01</span>; <span class="comment">//通过IP0PIN寄存器获取P0.0当前电平状态</span></span><br></pre></td></tr></table></figure></li><li><p>读取按键状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BEEPCON 0x00000080</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_P014 0x00004000 <span class="comment">//定义P0.14屏蔽字</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    uint32 i;</span><br><span class="line">    PINSEL0 = <span class="number">0x00000000</span>; <span class="comment">//设置引脚连接GPIO</span></span><br><span class="line">    IO0DIR = BEEPCON; <span class="comment">//设置B1控制口为输出，其他I/O为输入</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((IO0DIR&amp;PIN_P014)!=<span class="number">0</span>) IO0SET = BEEPCON;</span><br><span class="line">        <span class="keyword">else</span> IO0CLR = BEEPCON;</span><br><span class="line">        Delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在多个I/O口线上输出数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DataBus 0xFF</span></span><br><span class="line">PINSEL0 &amp;= <span class="number">0xFFFF0000</span>；<span class="comment">//设置引脚连接模块，将P0.0~P0.7设置为GPIO功能</span></span><br><span class="line">IO0DIR |= DataBus; <span class="comment">//将所有I/O口设置为输出</span></span><br><span class="line">IO0CLR = DataBus; <span class="comment">//将所有I/O口设置为低电平输出</span></span><br><span class="line">IO0SET = Data; <span class="comment">//将输出的数据从I/O口输出</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;17. 中断分类</p><ul><li>快速中断请求（FIQ）：优先级最高</li><li>向量IRQ：中等优先级，16个优先级，每个中断源分别设置服务程序入口</li><li>非向量IRQ：优先级最低，支持一个非向量中断，所有中断共用一个服务程序入口</li></ul><p>&nbsp;&nbsp;18. VIC可以管理32路中断请求。</p><p>&nbsp;&nbsp;19. 中断触发方式</p><ul><li>边沿触发：上升沿触发、下降沿触发</li><li>电平触发：高电平触发、低电平触发</li></ul><p>&nbsp;&nbsp;20. 外部中断应用示例</p><ul><li><p>EINT0低电平中断初始化</p><p><img src="https://s2.ax1x.com/2019/05/21/VpSrex.jpg" alt="VpSrex.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PINSEL1 = (PINSEL1&amp;<span class="number">0xFFFFFFFC</span>)|<span class="number">0x01</span>; <span class="comment">//选择P0.16为EINT0</span></span><br><span class="line">EXTMODE = EXTMODE&amp;<span class="number">0x0E</span>; <span class="comment">//电平触发</span></span><br><span class="line">EXTPOLAR = EXTPOLAR&amp;<span class="number">0x0E</span>; <span class="comment">//低电平中断</span></span><br><span class="line"><span class="comment">/*设置向量中断控制器*/</span></span><br><span class="line">VICIntSelect = VICIntSelect&amp;(~(<span class="number">1</span>&lt;&lt;<span class="number">14</span>)); <span class="comment">//EINT0分配为IRQ中断</span></span><br><span class="line">VICVectCntl0 = <span class="number">0x20</span>|<span class="number">14</span>; <span class="comment">//EINT分配为向量IRQ通道0</span></span><br><span class="line">VICVectAddr0 = (uint32)EINT0_ISR; <span class="comment">//向量IRQ通道0的中断服务程序地址为EINT0_ISR</span></span><br><span class="line">VICIntEnable = (<span class="number">1</span>&lt;&lt;<span class="number">14</span>); <span class="comment">//EINT0中断使能</span></span><br></pre></td></tr></table></figure></li><li><p>EINT0下降沿中断初始化</p><p><img src="https://s2.ax1x.com/2019/05/21/VpSyTK.jpg" alt="VpSyTK.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PINSEL1 = (PINSEL1&amp;<span class="number">0xFFFFFFFC</span>)|<span class="number">0x01</span>;</span><br><span class="line">EXTMODE = EXTMODE|<span class="number">0x01</span>;</span><br><span class="line">EXTPOLAR = EXTPOLAR&amp;<span class="number">0x0E</span>;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;21. SPI总线系统是一种<strong>同步串行</strong>外设接口，允许MCU与各种外围设备一串行方式进行通信、数据交换。</p><p>&nbsp;&nbsp;22. $I^2C$BUS是NXP半导体公司推出的芯片间<strong>串行</strong>传输总线，它以2根连线实现了完善的<strong>双向数据传送</strong>，可以极方便的构成多机系统和外围器件拓展系统。</p><p>&nbsp;&nbsp;23. LPC2000系列ARM7微控制器包含有2个符合16C550工业标准的<strong>异步</strong>串行口（UART）：UART0和UART1。其中UART0只提供<strong>TXD（发送）</strong>和<strong>RXD（接受）</strong>信号引脚，而UART1增加了一个调制解调器（Modem）接口。</p><p>&nbsp;&nbsp;24. UART应用示例</p><ul><li><p>UART0初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UART_BPS 115200</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART0_Ini</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    uint16 Fdiv;</span><br><span class="line">    U0LCR = <span class="number">0x83</span>; <span class="comment">//DLAB=1,可设置波特率</span></span><br><span class="line">    Fdiv = (Fpclk/<span class="number">16</span>)/UART_BPS;<span class="comment">//设置波特率</span></span><br><span class="line">    U0DLM = Fdiv/<span class="number">256</span>;<span class="comment">//除数锁存高位寄存器</span></span><br><span class="line">    U0DLL = Fdiv%<span class="number">256</span>;<span class="comment">//除数锁存低位寄存器</span></span><br><span class="line">    U0LCR = <span class="number">0x03</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><img src="https://s2.ax1x.com/2019/05/21/VSze29.jpg" alt="VSze29.jpg"></p></li><li><p>UART0查询方式接受数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">uint8 <span class="title">UART0_RcvByte</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    uint8 rcv_data;</span><br><span class="line">    <span class="keyword">while</span>((U0LSR&amp;<span class="number">0x01</span>)==<span class="number">0</span>);<span class="comment">//状态</span></span><br><span class="line">    rcv_data = U0RBR;<span class="comment">//接受缓存</span></span><br><span class="line">    <span class="keyword">return</span> rcv_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UART0中断方式接受数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">irq <span class="title">UART_Exception</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span>(U0IIR&amp;<span class="number">0x0f</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x04</span>:<span class="comment">//发生RDA中断</span></span><br><span class="line">            <span class="comment">//从接受FIFO中读取数据</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x0c</span>:<span class="comment">//发生字符超时中断——CTI</span></span><br><span class="line">            <span class="keyword">while</span>((U0LSR&amp;<span class="number">0x01</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//如果接受FIFO中含有的有效数据，就读取UnRBR寄存器 </span></span><br><span class="line">                RcvData[i++]=U0RBR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    VICVectAddr = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;25. 看门狗</p><ul><li>带内部预分频器的可编程32位定时器</li></ul><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;第1章-嵌入式系统概述&quot;&gt;&lt;a href=&quot;#第1章-嵌入式系统概述&quot; class=&quot;headerlink&quot; title=&quot;第1章 嵌入式系统概述&quot;&gt;&lt;/a&gt;第1章 嵌入式系统概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;嵌入式系统定义：嵌入到对象体系中的专用计算机应用系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用举例：手机、MP3、打印机、DV等。
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="嵌入式系统" scheme="http://quincy.ink/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析 学习笔记</title>
    <link href="http://quincy.ink/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/算法设计与分析-学习笔记.html</id>
    <published>2019-03-19T01:06:26.000Z</published>
    <updated>2020-05-02T01:12:39.091Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章-算法概述"><a href="#第一章-算法概述" class="headerlink" title="第一章 算法概述"></a>第一章 算法概述</h4><p>算法的定义：是对特定问题求解步骤的一种描述，包含操作的有限规则和操作的有限序列</p><p>算法的性质：确定性（指令无歧义）、有限性（无死循环）、输入、输出</p><p>程序的定义：是算法用某种程序设计语言的具体实现<a id="more"></a></p><p>程序和算法的区别：程序不一定满足有限性，比如操作系统 </p><p>算法复杂性决定于：(1)求解问题的规模；(2)具体的输入数据；(3)算法本身的设计</p><p>O(1)&lt;O(logn)&lt;O(n)&lt;O($n^c$)&lt;O($c^n$)&lt;O(n!)</p><p>如果存在正的常数c和自然数n0，使得n&gt;=n0时有f(n)&lt;=cg(n)，则称f(n)当n充分大时有上界，且g(n)是它的一个上界，记为f(n)=O(g(n))，还说f(n)的阶不高于f(n)的阶。</p><p>求上下界函数：</p><script type="math/tex; mode=display">\lim_{n\rightarrow\infty} \frac{f(n)}{g(n)} = \begin{cases}0, & \text{f(n)=O(g(n))}\\\infty, & \text{f(n)= $\Omega$(g(n))}\\c,& \text{f(n)=$\Theta$(g(n))} \end{cases}</script><h4 id="第二章-递归与分治"><a href="#第二章-递归与分治" class="headerlink" title="第二章 递归与分治"></a>第二章 递归与分治</h4><p>一般递归方程时间复杂度分析</p><script type="math/tex; mode=display">T(n)<=\begin{cases}1,&\text{n=1}\\ aT(n∣b)+D(n),&\text{n>1}     \end{cases}</script><p>其中，a是子问题的个数，b是递减的步长，|表示递减方式，D(n)是合成子问题的开销</p><p>当|为减法：</p><script type="math/tex; mode=display">T(n)<=\begin{cases}O(a^n),&\text{a>1}\\ O(n),&\text{a=1}     \end{cases}</script><p>当|为除法：</p><p>$p=log_ba$</p><p>①D(n)为常数</p><script type="math/tex; mode=display">T(n)<=\begin{cases}O(n^p),&\text{a>1}\\ O(log_bn),&\text{a=1}     \end{cases}</script><p>②D(n)为线性函数cn</p><script type="math/tex; mode=display">T(n)<=\begin{cases}O(n),&\text{a<b}\\ O(nlog_bn),&\text{a=b}\\ O(n^p),&\text{a>b} \end{cases}</script><p>③D(n)为幂函数$n^x$</p><script type="math/tex; mode=display">T(n)<=\begin{cases}O(n^x),&\text{a<D(b)}\\ O(n^plog_bn),&\text{a=D(b)}\\ O(n^p),&\text{a>D(b)} \end{cases}</script><h4 id="第三章-动态规划"><a href="#第三章-动态规划" class="headerlink" title="第三章 动态规划"></a>第三章 动态规划</h4><p>动态规划算法的基本要素：最优子结构性质（自底向上）、重叠子问题性质（子问题之间并非独立）</p><p>设计算法步骤：</p><ul><li>找出最优解的性质，刻画其结构特征</li><li>递归定义最优值</li><li>自底向上计算最优值</li><li>根据最优值构造最优解</li></ul><p>可用动态规划方法时，贪心算法可能不适用</p><h4 id="第四章-贪心算法"><a href="#第四章-贪心算法" class="headerlink" title="第四章 贪心算法"></a>第四章 贪心算法</h4><p>适用情形：设待求解问题有N个输入，根据必须满足的条件和目标函数，希望从问题的所有允许解中求出最优值；可用贪心算法时，动态规划方法可能不适用</p><p>贪心算法的基本要素：贪心选择性质（局部最优、自顶向下）、最优子结构性质</p><p>Prim：在保证连通的前提下依次选出权重较小的n – 1条边，O($n^2$)</p><p>Kruskal：在保证无回路的前提下依次选出权重较小的n – 1条边，O(eloge)</p><h4 id="第五章-回溯法"><a href="#第五章-回溯法" class="headerlink" title="第五章 回溯法"></a>第五章 回溯法</h4><p>适用情形：当需要找出它的解集或者要求回答什么解是满足某些约束条件的最佳解时，往往要使用回溯法</p><p>搜索方式：</p><ul><li>深度优先搜索：不一定能找到解，时空复杂度较小</li><li>广度优先搜索：一定能找到解，时空复杂度较大</li><li>启发式搜索：较快找到解，取决于评价函数优劣</li></ul><h4 id="第六章-分支限界法"><a href="#第六章-分支限界法" class="headerlink" title="第六章 分支限界法"></a>第六章 分支限界法</h4><p>回溯法和分界限界法的相同点：都是在问题的解空间树上搜索问题解的算法</p><p>回溯法和分界限界法的不同点：</p><ul><li>求解目标不同：求出满足约束的所有解；求出某种意义下的最优解</li><li>剪枝不同：只通过约束条件剪掉非可行解；通过约束条件和目标函数的限界剪掉不包含最优解的可行解</li><li>搜索方式不同：DFS；BFS</li><li>实现数据结构不同：栈；队列</li></ul><h4 id="第七章-概率算法"><a href="#第七章-概率算法" class="headerlink" title="第七章 概率算法"></a>第七章 概率算法</h4><p>定义：是一种使用概率和统计方法在其执行过程中对于下一计算步骤作出随机选择的算法</p><p>特征：</p><ul><li>输入包括原问题输入和供随机选择的随机序列两部分</li><li>运行过程中，包括一次或多次随机选择，根据随机值决定程算法运行</li><li>算法的结果不能保证一定是正确的，但可以限定其出错概率</li><li>对于相同的输入实例可以有不同的结果，执行时间也可能不同</li></ul><p>分类：</p><ul><li>舍伍德算法：总能求得问题的一个解，且所求得解的结果总是正确的。其主要目的是消除算法所需计算时间对输入实例的依赖（如快速排序）</li><li>拉斯维加斯算法：要么给出正确解，要么得不到解，反复求解多次可使失效的概率任意小</li><li>蒙特卡罗算法：总能得到解，偶尔产生不正确解，反复求解多次可使不正确解的概率任意小</li></ul><h4 id="第八章-字符串"><a href="#第八章-字符串" class="headerlink" title="第八章 字符串"></a>第八章 字符串</h4><p>KMP：next[]，newnext[] 求解（0,1,…）</p><p>BM：dist[] 求解（…,m）</p><p>KR：速度要快、冲突概率要小、相邻两个字符串的hash值要有相关性</p><p>以上算法时间复杂度：最好O(n+m)，最坏O(n*m)</p><h4 id="第九章-NP完全问题"><a href="#第九章-NP完全问题" class="headerlink" title="第九章 NP完全问题"></a>第九章 NP完全问题</h4><p>P类问题：所有可以在多项式时间内求解的判定问题构成P类问题。判定问题：判断是否有一种能够解决某一类问题的能行算法的研究课题。</p><p>NP类问题：所有的非确定性多项式时间可解的判定问题构成NP类问题。非确定性算法：非确定性算法将问题分解成猜测和验证两个阶段。</p><p>NPC问题：NP中的某些问题的复杂性与整个类的复杂性相关联。这些问题中任何一个如果存在多项式时间的算法，那么所有NP问题都是多项式时间可解的，这些问题被称为NP-完全问题。</p><p>$P \subseteq NP$</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章-算法概述&quot;&gt;&lt;a href=&quot;#第一章-算法概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 算法概述&quot;&gt;&lt;/a&gt;第一章 算法概述&lt;/h4&gt;&lt;p&gt;算法的定义：是对特定问题求解步骤的一种描述，包含操作的有限规则和操作的有限序列&lt;/p&gt;
&lt;p&gt;算法的性质：确定性（指令无歧义）、有限性（无死循环）、输入、输出&lt;/p&gt;
&lt;p&gt;程序的定义：是算法用某种程序设计语言的具体实现
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="算法设计与分析" scheme="http://quincy.ink/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>物联网概论 学习笔记</title>
    <link href="http://quincy.ink/%E7%89%A9%E8%81%94%E7%BD%91%E6%A6%82%E8%AE%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/物联网概论-学习笔记.html</id>
    <published>2019-03-07T15:06:49.000Z</published>
    <updated>2020-05-02T01:13:05.120Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>物联网（IoT）：Internet of Things</p></li><li><p>物联网是具有自我<font color="Red"><strong>标示、感知和智能</strong></font>的物理实体基于通信技术相互连接形成的网络，这些物理设备可以在<font color="Red"><strong>无需人工干预</strong></font>的条件下实现<font color="Red"><strong>协同和互动</strong></font>，为人们提供<font color="Red"><strong>智慧和集约的服务</strong></font>，传感网是物联网的基础，是物联网的组成部分<a id="more"></a></p></li><li><p>物联网三层体系结构：感知层、网络层和应用层</p><p>感知层是物联网的皮肤和五官——识别物体，采集信息；</p><p>网络层是物联网的神经中枢和大脑——信息传递和处理；</p><p>应用层是物联网的“社会分工”——与行业需求结合，实现广泛智能化</p></li><li><p>RFID全称：Radio Frequency Identification 射频识别</p></li><li><p>RFID系统的基本组成：</p><p>①硬件组成：RFID标签、识读器、天线和主机</p><p>②软件组成：RFID系统软件、中间件和应用软件</p></li><li><p>RFID系统结构通过<font color="yellow"><strong>空中接口</strong></font>将电子标签与读写器连接</p></li><li><p>RFID系统的原理：</p><p>①耦合(Coupling)：根据需求和成本可利用电磁波和磁感应</p><p>②磁耦合</p><p>③电磁波耦合(反向散射原理)</p></li><li><p>RFID频段分布</p><p>低频：125.124KHz 恶劣环境下使用</p><p>高频：13.56MHz 门禁卡、公交卡等 （ISO/IEC 14443标准 非接触集成电路接近卡）</p><p>超高频：433.92Mhz / 868-960Mhz</p><p>微波：2.45GHz</p></li><li><p>一般传感器的定义：测量装置、输入与输出有对应关系、有一定的精确度</p></li><li><p>一般传感器的组成：</p><p>①敏感元件：直接感受被测量、并输出与被测量成确定关系的某一物理量的元件</p><p>②转换元件：敏感元件的输出就是它的输入，将感受到的非电量直接转换为电量的元件</p><p>③测量电路：将转换元件输出的电量变换为便于显示、记录、控制、处理的有用电信号</p></li><li><p>传感器的<strong>静态特性</strong>：</p><p>①线性度：指其输出量与输入量之间的实际关系曲线(即静态特征曲线)偏离直线的程度，又称为非线性误差</p><p>②灵敏度：指传感器在稳态下的输出变化量△y与引起变化的输入变化△x之比</p><p>③迟滞：传感器在正(输入量增大)和反(输入量减小)行程期间，其输出-输入特性曲线不重合的现象</p><p>④重复性：在输入按同一方向连续多次变动时得到特性曲线不一致的程度</p><p>⑤分辨率：在测量方向内所能测量输入量的最小变化量△x</p><p>⑥漂移：在外界的干扰下，输出量发生与输入量无关的变化</p></li><li><p>应变效应：金属导体或者半导体在受外力作用时，会产生相应的应变，其阻值也随之发生变化 。</p></li><li><p>应变片式传感器——电桥</p><p>①直流电桥（单臂电桥、惠斯通电桥）：$K_{u} = U/4$</p><p>②半差动电桥(双臂电桥)：$K_{u} = U/2$</p><p>③全桥电路（全臂电桥）：$K_{u} = U$</p></li><li><p>变磁阻式(自感)传感器：</p><p>电感：在电路中电流发生变化时能产生电动势的性质成为电感，分为自感和互感</p><ul><li><strong>自感</strong>：当线圈中有电流通过时，线圈的周围就会产生磁场。当线圈中电流发生变化时，其周围的磁场也产生相应的变化，此变化的磁场可使线圈自身产生感应电动势。</li><li>互感：两个电感线圈相互靠近时，一个电感线圈的磁场变化将影响另一个电感线圈，这种影响就是互感。互感的大小取决于电感线圈的自感与两个电感线圈耦合的程度 。</li></ul><p>应用范畴：微位移</p><p>分类：</p><ul><li>变气隙式 &nbsp;&nbsp;工作原理：<font color="yellow"><strong>气隙厚度</strong></font>的改变，使得磁路中磁阻值变化，从而导致电路电感值变化</li><li>变截面式</li><li>螺管式</li></ul></li><li><p>电容式传感器：$c_0 = \frac{\epsilon_0\epsilon_rS}{d_0}$</p><p>分类：①变极距型②变面积型③变介质型（油箱测油位）</p><p>应用：手机指纹识别</p><p>ps:实验箱指纹识别模块使用的是光电式传感器</p></li><li><p>磁电式传感器-霍尔传感器</p><p>霍尔效应：置于磁场中的静止载流导体, 当它的电流方向与磁场方向不一致时, 载流导体上<font color="blue"><strong>垂直</strong></font>于电流和磁场方向产生电动势。该电势称霍尔电势。</p><ul><li>霍尔电势与控制电流和磁感应强度成正比</li><li>霍尔电势的灵敏度与霍尔常数RH正比而与霍尔片厚度成反比</li></ul><p>应用：微位移、测转速(汽车轮胎)、测电流、计数、开关等</p></li><li><p>压电式传感器</p><p>压电效应：某些电介质,当沿着一定方向对其施力而使它变形时,其内部就产生极化现象,同时在它的两个表面上便产生符号相反的电荷,当外力去掉后,其又重新恢复到不带电状态。</p><ul><li><p>Z为光轴，X为电轴，Y为机械轴</p></li><li><p>压电效应称为纵向压电效应，沿Y方向产生的为横向压电效应，沿Z轴不产生</p></li><li><p>侧压力时线性度不好，需要在力传递系统中加入预加力，称<font color="pink"><strong>预载</strong></font></p></li></ul></li><li><p>光电式传感器</p><p>光电效应：光的频率越高，其光子能量就越大。当具有一定能量的光子作用到某些物体上转化为该物体中一些电子的能量而产生电效应。</p><p>分类：</p><ul><li><p>外光电效应（光线照到某些物体上造成表面电子逸出的现象）</p></li><li><p>光电导效应、光生伏特效应(内光电效应) （物体受光照后，内部原子释放出电子不能逸出表面，使物体电阻率发生变化或产生光电动势的现象）</p></li><li><p>光电倍增管：对光电流放大以提高灵敏度,阳极最后收集到的电子数是阴极发射的$10^5～10^6$倍</p><p><img src="https://s2.ax1x.com/2019/05/07/EsX6VU.png" alt="EsX6VU.png"></p></li></ul><p>应用：亮度传感器、烟雾报警器、光电鼠标等</p></li><li><p>无线传感器</p><p>定义：是大量的静止或移动的传感器以<font color="green"><strong>自组织</strong></font>和<font color="green"><strong>多跳</strong></font>的方式构成的无线网络，目的是协作地<font color="red"><strong>采集、处理、传输</strong></font>网络覆盖地域内感知对象的检测信息，并报告用户。</p><p>传感器节点 -&gt; <strong>汇聚节点</strong> -&gt; 管理节点</p><p>网络节点组成：传感模块—计算模块—通信模块——存储模块</p><p>无线传感网：WSN(Wireless sensor network)</p><ul><li>电池供电，能量有限（耗能排序：发送&gt;接受&gt;空闲&gt;睡眠</li><li>短距离通讯（距离增加一倍，功耗增加三倍</li><li>节点生命周期</li><li>自适应网络</li></ul><p>路由的性质：</p><p><a href="https://imgchr.com/i/EsjKdU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/07/EsjKdU.md.png" alt="EsjKdU.md.png"></a></p><p>路由策略分析：最大PA、最小能量消耗、最少跳转、最大最小PA节点</p><p>定向扩散路由：①兴趣扩散（洪泛方式）②梯度建立③加强路径</p><p>GPSR绕过路由空洞的步骤：    </p><ul><li>构造全网连接平面图</li><li>通过删边处理，变成可平面图（GG、RNG算法</li><li>通过右手法则，绕过路由空洞（每经过一个面，顺时针到的第一条边</li></ul><p>MAC协议：</p><p>分类：时分复用无竞争接入方式(分配型）、随机竞争接入方式（竞争型）、竞争与固定分配相结合的接入方式（混合型）</p><p>S-MAC协议：</p><p>优点：</p><ul><li>周期性的侦听/睡眠的低占空比方式</li><li>虚拟簇的调度方式</li><li>自适应流量的侦听机制：通信结束继续侦听一段时间</li><li>串音避免：RTS/CTS/DATA/ACK</li></ul><p>缺点：延迟受限于帧长度，不适合实时业务</p><p>分配性MAC协议：</p><ul><li><p>“隐藏终端”（Hidden Stations）：在通信领域，基站A向基站B发送信息，基站C未侦测到A也向B发送，故A和C同时将信号发送至B，引起信号冲突，最终导致发送至B的信号都丢失了。</p><p><a href="https://imgchr.com/i/EkzdaD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/22/EkzdaD.png" alt="EkzdaD.png"></a></p></li><li><p>暴露终端是指在发送节点的覆盖范围内而在接收节点的覆盖范围外的节点，暴露终端因听到发送节点的发送而可能延迟发送。但是，它其实是在接收节点的通信范围之外，它的发送不会造成冲突。这就引入了不必要的延时。</p><p><a href="https://imgchr.com/i/EkzaVO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/22/EkzaVO.png" alt="EkzaVO.png"></a></p></li></ul></li><li><p>ZigBee</p><p>功能节点：协调者（COORDINATOR）、路由器（ROUTER）、终端设备（END DEVICE）</p><ul><li>协调者（老大）功能：发送网络信标、建立一个PAN、管理网络节点、存储网络节点信息、寻找节点对路由信息</li><li>路由器功能：允许其它设备加入网络、跳跃路由、辅助子设备供电</li><li>终端设备功能：传感节点的载体、轻载化程序设计</li></ul><p>网络拓扑结构：星型、网型、树形</p><p>模式：非信标模式（CSMA/CA）、信标模式（竞争和分配的混合性信道接入）</p><ul><li>CSMA/CA方式下通过三个参数的调节来实现冲突避免：退避次数（NB)、竞争窗口长度（CW)、退避指数（BE）</li></ul><p>信标、超帧及其结构：</p><ul><li><p>超帧包含活动部分和非活动部分，超帧以一个信标的开始为开始，信标定义超帧结构</p></li><li><p>CAP为自由竞争阶段、CFP为非竞争阶段、CFP内可以保证GTS（保证时隙）的传送</p></li><li><p>信标是子设备同步父设备的标记</p><p><a href="https://imgchr.com/i/EAEnSO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/22/EAEnSO.md.png" alt="EAEnSO.md.png"></a></p></li></ul><p>耗能：传感模块的功耗远高于射频模块的功耗，这是因为传感模块大多采用模拟电路进行感测，需要一直恒定的加载电流。</p></li></ol><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;物联网（IoT）：Internet of Things&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;物联网是具有自我&lt;font color=&quot;Red&quot;&gt;&lt;strong&gt;标示、感知和智能&lt;/strong&gt;&lt;/font&gt;的物理实体基于通信技术相互连接形成的网络，这些物理设备可以在&lt;font color=&quot;Red&quot;&gt;&lt;strong&gt;无需人工干预&lt;/strong&gt;&lt;/font&gt;的条件下实现&lt;font color=&quot;Red&quot;&gt;&lt;strong&gt;协同和互动&lt;/strong&gt;&lt;/font&gt;，为人们提供&lt;font color=&quot;Red&quot;&gt;&lt;strong&gt;智慧和集约的服务&lt;/strong&gt;&lt;/font&gt;，传感网是物联网的基础，是物联网的组成部分
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="物联网概论" scheme="http://quincy.ink/tags/%E7%89%A9%E8%81%94%E7%BD%91%E6%A6%82%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计 学习笔记</title>
    <link href="http://quincy.ink/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://quincy.ink/概率论与数理统计-学习笔记.html</id>
    <published>2019-03-04T01:31:59.000Z</published>
    <updated>2020-05-02T01:12:23.449Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-随机事件及其概率"><a href="#第一章-随机事件及其概率" class="headerlink" title="第一章 随机事件及其概率"></a>第一章 随机事件及其概率</h3><h4 id="第一节-随机事件及其频率、概率的统计定义"><a href="#第一节-随机事件及其频率、概率的统计定义" class="headerlink" title="第一节 随机事件及其频率、概率的统计定义"></a>第一节 随机事件及其频率、概率的统计定义</h4><p>随机事件(偶然事件)：在试验的结果中，可能发生、也可能不发生的事件</p><p>随机事件的频率具有一定的稳定性  </p><p>随机事件的概率为频率的近似值 $P(A) \approx f(A) = \frac{m}{n}$</p><a id="more"></a><p>必然事件 P(U)=1；不可能事件 P(V)=0</p><h4 id="第二节-样本空间"><a href="#第二节-样本空间" class="headerlink" title="第二节 样本空间"></a>第二节 样本空间</h4><p>样本点：随机试验的每一个可能出现的且是最简单的不可再分的结果</p><p>样本空间：所有的样本点构成的集合（分为可列个和不可列个(如误差范围)）</p><p>任一随机事件A都是样本空间Ω的一个子集</p><h4 id="第三节-事件的关系及运算"><a href="#第三节-事件的关系及运算" class="headerlink" title="第三节 事件的关系及运算"></a>第三节 事件的关系及运算</h4><p>包含/包含于：$A \subset B$</p><p>和(并)：$A∪B$</p><p>积(交)：$A∩B 或 AB$</p><p>互不相容(互斥)：两个互不相容事件的和 $A+B$</p><p>对立(逆)：$\overline{A}=B$</p><p>完备事件组：n个事件至少有一个事件一定发生</p><p>A发生但B不发生：$A-B=A\overline{B}=A-AB$</p><p>运算性质：交换律、结合律、分配律、德摩根律（$\overline{A∪B}=\overline{A}&ensp;\overline{B},\overline{AB}=\overline{A}∪\overline{B}$）</p><h4 id="第四节-概率的古典定义"><a href="#第四节-概率的古典定义" class="headerlink" title="第四节 概率的古典定义"></a>第四节 概率的古典定义</h4><p>乘法定理：完成一件事需r步，第i步有$ m_ i $种方法，完成这件事总方法数 $ m_ 1m_ 2…m_ r $</p><p>加法定理：完成一件事有r类方法，第i类有$ m_ i $种方法，完成这件事总方法数 $ m_ 1+m_ 2+…+m_ r $</p><p>排列：$ A _ n ^m = \frac{n!}{(n-m)!} $</p><p>组合：$ C _ n ^m = \frac{A _ n ^m}{P_ m} =  \frac{n!}{(n-m)!m!}$</p><p>概率的古典定义：试验样本总共有$ n_Ω$ 个<font color="#FF0000">等可能</font>的基本事件，其中随机事件A包含$ n_A$个基本事件，($ n_A$&lt;=$ n_Ω$)，则 $P(A) =  \frac{n_A}{n_Ω}$</p><font color="blue">不放回依次抽样与一次抽样的一致性、抽签次序无关性</font><h4 id="第五节-概率加法定理"><a href="#第五节-概率加法定理" class="headerlink" title="第五节 概率加法定理"></a>第五节 概率加法定理</h4><p>若随机事件A与B互斥，即$AB = \emptyset，则P(A+B)= P(A)+P(B)  \Rightarrow  P(A)+P(\overline{A})=1$</p><p>若A、B是任意的两个随机事件，则二者和事件的概率为 $P(A∪B)=P(A)+P(B)-P(AB)$</p><p>$\Rightarrow   P(A∪B∪C)=P(A)+P(B)+P(C)-P(AB)-P(AC)-P(BC)+P(ABC) $</p><h4 id="第六节-条件概率与乘法定理"><a href="#第六节-条件概率与乘法定理" class="headerlink" title="第六节 条件概率与乘法定理"></a>第六节 条件概率与乘法定理</h4><p>已知事件A发生的条件下，事件B发生的概率：$P(B|A)=\frac{P(AB)}{P(A)}$</p><p>若$P(A_1A_2…A_{n-1})&gt;0,则 P(A_1A_2…A_{n})=P(A_1)P(A_2|A_1)P(A_3|A_1A_2)…P(A_n|A_1A_2…A_n-1)$</p><h4 id="第七节-全概率公式与贝叶斯公式"><a href="#第七节-全概率公式与贝叶斯公式" class="headerlink" title="第七节 全概率公式与贝叶斯公式"></a>第七节 全概率公式与贝叶斯公式</h4><p>&ensp;&ensp;先验，由因溯果</p><script type="math/tex; mode=display">P(A) = \sum_{i=1}^nP(B_i)P(A|B_i)</script><p> &ensp;&ensp;后验，由果溯因</p><script type="math/tex; mode=display">P(B_i|A) = \frac{P(AB_i)}{P(A)} = \frac{P(B_i)P(A|B_i)}{\sum_{i=1}^nP(B_i)P(A|B_i)},i=1,2,...,n</script><h4 id="第八节-随机事件的独立性"><a href="#第八节-随机事件的独立性" class="headerlink" title="第八节 随机事件的独立性"></a>第八节 随机事件的独立性</h4><p>若两事件A与B满足$P(AB) = P(A)P(B)$，则称事件A与B相互独立</p><p>&ensp;&ensp;性质1：不可能事件及必然事件与任意的随机事件相互独立</p><p>&ensp;&ensp;性质2：A与B相互独立，则A与$\overline{B},\overline{A}与B,\overline{A}与\overline{B}$也相互独立&ensp;&ensp;（相互对称性）</p><h4 id="第九节-贝努力概型"><a href="#第九节-贝努力概型" class="headerlink" title="第九节 贝努力概型"></a>第九节 贝努力概型</h4><p>事件A恰好发生k次的概率：$P_n(k) = C_n^kp^kq^{n-k},k=0,1,2,…,n$</p><p>$\sum_{k=0}^nP_n(k) = \sum_{k=0}^nC_n^kp^kq^{n-k} = (p+q)^n = 1$</p><p>事件A发生次数介于$m_1$与$m_2$之间：$P_n(m_1 \leq k \leq m_2) = \sum_{k=m1}^{m2}P_n(k)$</p><p>事件A至少发生r次：$P(k \geq r) = \sum_{k=r}^nP_n(k) = 1 - \sum_{k=0}^{r-1}P_n(k)$</p><h4 id="第十节-概率论的公理化体系"><a href="#第十节-概率论的公理化体系" class="headerlink" title="第十节 概率论的公理化体系"></a>第十节 概率论的公理化体系</h4><p>非负性：P(A) $\leq$ 0;</p><p>规范性：P(Ω)=1;</p><p>可列可加性(可数可加性)：$A_1,A_2,…$ 两两互不相容，则$P(\sum_{i=1}^\infty A_i) = \sum_{i=1}^\infty P(A_i)$</p><p><br></p><h3 id="第二章-随机变量及其分布"><a href="#第二章-随机变量及其分布" class="headerlink" title="第二章 随机变量及其分布"></a>第二章 随机变量及其分布</h3><h4 id="第一节-随机变量的概念"><a href="#第一节-随机变量的概念" class="headerlink" title="第一节 随机变量的概念"></a>第一节 随机变量的概念</h4><p>设Ω为随机变量的样本空间，如果对每一个样本点$\omega \in Ω$，均有唯一确定的实数X($\omega$)与之对应，即存在一个定义于Ω的单值实函数X=X($\omega$)，则称X=X($\omega$)为样本空间Ω上的随机变量</p><h4 id="第二节-离散型随机变量的概率分布"><a href="#第二节-离散型随机变量的概率分布" class="headerlink" title="第二节 离散型随机变量的概率分布"></a>第二节 离散型随机变量的概率分布</h4><p>性质：</p><p>①$p_k \geq 0 (k=1,2,..) $</p><p>②$\sum_{k=1}^{\infty}p_k = 1$</p><h4 id="第三节-几种常用的离散型随机变量的分布"><a href="#第三节-几种常用的离散型随机变量的分布" class="headerlink" title="第三节 几种常用的离散型随机变量的分布"></a>第三节 几种常用的离散型随机变量的分布</h4><ul><li><p>0-1分布：$P(X=1) = p，P(X=0) = q（0&lt;p&lt;1，p+q=1）$</p></li><li><p>超几何分布：$P(X=m) = \frac{C_M^mC_{N-M}^{n-m}}{C_N^n} （n \leq N,M \leq N），记作X～H(n,M,N)$，N趋向无穷大时近似服从二项分布</p></li><li><p>二项分布：$P(X=k) = C_n^kp^kq^{n-k} （k=0,1,2,…,n） ，记作X ～B(n,p)$    ，n很大，p很小时，可用泊松分布近似替代二项分布</p></li></ul><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;二项式分布的最可能取值( P(X=k)取得最大值的k )：</p><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;①若(n+1)p不是整数，则其整数部分[(n+1)p]即为所求；</p><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;②若(n+1)p=m是整数，则m和m-1即为所求</p><ul><li><p>泊松分布：$P(X=k) = P_{\lambda}(k) = \frac{\lambda^k}{k!}e^{-\lambda} （k=0,1,2,…），记作X～P(\lambda)$</p></li><li><p>几何分布：$P(X=k)=q^{k-1}p（k=1,2,…）， 记作X～G(p)$</p></li></ul><h4 id="第四节-随机变量的分布函数"><a href="#第四节-随机变量的分布函数" class="headerlink" title="第四节 随机变量的分布函数"></a>第四节 随机变量的分布函数</h4><p>$F(x) = P(X \leq x)$</p><p>性质：</p><p>$F(x) 单调不减，若x_1&lt;x_2,则F(x_1) \leq F(x_2)$</p><p>对于任意x，P(x)=F(x)-F(x-0),即当前值-左极限值</p><p>$P(x_1&lt;X \leq x_2) = F(x_2)-F(x_1)$离散型随机变量只能用</p><p>$P(x_1 \leq X \leq x_2) =P(x_1&lt;X \leq x_2)=P(x_1 \leq X&lt;x_2)=P(x_1&lt;X&lt;x_2) =F(x_2)-F(x_1)$连续性随机变量都适用</p><p>离散型随机变量的F(x)含跳跃间断点；连续性随机变量F(x)连续且位于y=0与y=1之间</p><h4 id="第五节-连续性随机变量的概率密度"><a href="#第五节-连续性随机变量的概率密度" class="headerlink" title="第五节 连续性随机变量的概率密度"></a>第五节 连续性随机变量的概率密度</h4><ol><li><p>分布函数F(x)与概率密度函数f(x)的关系：</p><ul><li>$f(x) = F^{′}(x) $</li><li>$F(x)=\int_{-\infty}^xf(t)dt$</li></ul></li><li><p>性质：</p><ul><li>$因为F(-\infty)=0,F(+\infty)=1,所以有\int_{-\infty}^{+\infty}f(x)dx = 1$</li><li>$P(x_1&lt;X \leq x_2)=F(x_2)-F(x_1)=\int_{x_1}^{x_2}f(x)dx$</li></ul></li></ol><h4 id="第六节-几种常用的连续随机变量的分布"><a href="#第六节-几种常用的连续随机变量的分布" class="headerlink" title="第六节 几种常用的连续随机变量的分布"></a>第六节 几种常用的连续随机变量的分布</h4><p>均匀分布 X~U(a,b)</p><ul><li><script type="math/tex; mode=display">f(x)=\begin{cases} \frac{1}{b-a},&\text{a<x<b}\\ 0,&\text{其他} \end{cases}</script></li><li><script type="math/tex; mode=display">F(x)=\begin{cases}0,&\text{x$\leq$a}\\ \frac{x-a}{b-a},&\text{a<x<b}\\ 1,&\text{x $\geq$b} \end{cases}</script></li></ul><p>指数分布 X~e($\lambda$)</p><ul><li><script type="math/tex; mode=display">f(x)=\begin{cases}\lambda e^{-\lambda x},&\text{x>0}\\ 0,&\text{其他} \end{cases}</script></li><li><script type="math/tex; mode=display">F(x)=\begin{cases}1-e^{-\lambda x},&\text{x>0}\\ 0,&\text{x$\leq$0} \end{cases}</script></li></ul><p>正态分布 X~N($\mu,\sigma^2$)</p><ul><li><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^{2}}{2\sigma^2}},x\in(-\infty,+\infty)</script></li><li><script type="math/tex; mode=display">F(x)=\Phi(\frac{x-\mu}{\sigma})，\Phi(-x)=1-\Phi(x)</script></li></ul><h4 id="第七节-随机变量函数的分布"><a href="#第七节-随机变量函数的分布" class="headerlink" title="第七节 随机变量函数的分布"></a>第七节 随机变量函数的分布</h4><p><br></p><h3 id="第三章-多维随机变量及其分布"><a href="#第三章-多维随机变量及其分布" class="headerlink" title="第三章 多维随机变量及其分布"></a>第三章 多维随机变量及其分布</h3><h4 id="第一节-二维随机变量的联合分布"><a href="#第一节-二维随机变量的联合分布" class="headerlink" title="第一节 二维随机变量的联合分布"></a>第一节 二维随机变量的联合分布</h4><ul><li>$P(X=x_i,Y=y_j)=P_{ij}(i,j=1,2,…)$</li><li>$F(x,y)=P(X \leq x,Y \leq y)=P[\{X \leq x\}∩\{Y \leq y\}]$</li><li>$P(x_1&lt;X \leq x_2,y_1&lt;Y \leq y_2)=F(x_2,y_2)-F(x_2,y_1)-F(x_1,y_2)+F(x_1,y_1)$</li><li>二维均匀分布</li></ul><script type="math/tex; mode=display">f(x)=\begin{cases}\frac{1}{S},&\text{(x,y)}\in\text{D} \\ 0,&\text{(x,y)}\notin\text{D} \end{cases}</script><ul><li>二维正态分布$(X,Y)～N(\mu_1,\sigma_1^2;\mu_2,\sigma_2^2;\rho)$<script type="math/tex; mode=display">f(x,y)=\frac{1}{2\pi\sigma_1\sigma_2\sqrt{1-\rho^2}}e^{-\frac{1}{2(1-\rho^2)}[\frac{(x-\mu_1)^2}{\sigma_1^2}-\frac{2\rho(x-\mu_1)(y-\mu_2)}{\sigma_1\sigma_2}+\frac{(y-\mu_2)^2}{\sigma_2^2}]}</script></li></ul><h4 id="第二节-二维随机变量的边缘分布"><a href="#第二节-二维随机变量的边缘分布" class="headerlink" title="第二节 二维随机变量的边缘分布"></a>第二节 二维随机变量的边缘分布</h4><ol><li><p>离散型：固定一行或一列累加</p></li><li><p>连续性</p><p> $F_X(x)=F(x,+\infty)$</p><p> $F_Y(y)=F(+\infty,y)$</p><p>$ f_X(x)=(F_X(x))^′=\int_{-\infty}^{+\infty}f(x,y)dy$</p><p>$ f_Y(y)=(F_Y(y))^′=\int_{-\infty}^{+\infty}f(x,y)dx$</p><p>若随机变量(X,Y)服从二维正态分布$N(\mu_1,\sigma_1^2;\mu_2,\sigma_2^2;\rho)$，则X～$N(\mu_1,\sigma_1^2)$,$Y～N(\mu_2,\sigma_2^2)$</p></li></ol><h4 id="第三节-二维随机变量的条件分布"><a href="#第三节-二维随机变量的条件分布" class="headerlink" title="第三节 二维随机变量的条件分布"></a>第三节 二维随机变量的条件分布</h4><ol><li><p>离散型</p><p>$P_{X|Y}(x_i|y_j)=P(X=x_i|Y=y_j)=\frac{P(X=x_i,Y=y_j)}{P(Y=y_j)}=\frac{P_{ij}}{P_{·j}},(i=1,2,…)$</p></li><li><p>连续性</p><p>$F_{X|Y}(x|y)=\frac{\int_{-\infty}^xf(x,y)dx}{f_Y(y)}$</p><p>$f_{X|Y}(x|y)=\frac{f(x,y)}{f_Y(y)}$</p></li></ol><h4 id="第四节-随机变量的独立性"><a href="#第四节-随机变量的独立性" class="headerlink" title="第四节 随机变量的独立性"></a>第四节 随机变量的独立性</h4><p>充分必要条件：</p><p>$P(X=x_i,Y=y_j)=P(X=x_i)P(Y=y_j)$</p><p>$F(x,y)=F_X(x)F_Y(y)$</p><p>$f(x,y)=f_X(x)f_Y(y)$</p><p>离散型随机变量有：$P_{ij}=P_{i·}P_{·j}$</p><h4 id="第五节-二维随机变量函数的分布"><a href="#第五节-二维随机变量函数的分布" class="headerlink" title="第五节 二维随机变量函数的分布"></a>第五节 二维随机变量函数的分布</h4><ul><li><p>Z=X+Y，积分选择x型或y型</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{+\infty}f(x,z-x)dx,f_Z(z)=\int_{-\infty}^{+\infty}f(z-y,y)dx</script></li><li><p>Z=max(X,Y)，最大的大于z，两个都大于z</p><script type="math/tex; mode=display">F_Z(z)=F_X(z)F_Y(z)，f_Z(z)=f_X(z)F_Y(z)+F_X(z)f_Y(z)</script></li><li><p>Z=min(X,Y)，取对立使最小的小于z，两个都小于z</p><script type="math/tex; mode=display">F_Z(z)=1-[1-F_X(z)][1-F_Y(z)]，f_Z(z)=f_X(z)[1-F_Y(z)]+f_Y(z)[1-F_X(z)]</script></li><li><p>…</p></li></ul><p><br></p><h3 id="第四章-随机变量的数字特征"><a href="#第四章-随机变量的数字特征" class="headerlink" title="第四章 随机变量的数字特征"></a>第四章 随机变量的数字特征</h3><h4 id="第一节-数学期望"><a href="#第一节-数学期望" class="headerlink" title="第一节 数学期望"></a>第一节 数学期望</h4><p>离散型：</p><ul><li>一维：$E(X)=\sum_{i=1}^{\infty}x_ip_i$，绝对收敛时才有期望</li><li>二维：$E(X)=\sum_ix_iP(X=x_i)=\sum_i\sum_jx_ip_{ij}$</li></ul><p>连续型：</p><ul><li>一维：$E(X)=\int_{-\infty}^{+\infty}xf(x)dx$，被积函数xf(x)有界,绝对收敛时才有期望</li><li>二维：$E(X)=\int_{-\infty}^{+\infty}xf_X(x)dx=\int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}xf(x,y)dxdy$</li></ul><p>随机变量函数：</p><ul><li>一维：$E[g(X)]=\sum_{k=1}^{+\infty}g(x_k)p_k$；$E[g(X)]=\int_{-\infty}^{+\infty}g(x)f(x)dx$</li><li>二维：$E[g(X,Y)]=\int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}g(x,y)f(x,y)dxdy$</li></ul><p>性质：</p><ul><li>$E(C)=C$，C为常数</li><li>$E(CX)=CE(X)$</li><li>$E(X+Y)=E(X)+E(Y)$</li><li>相互独立有$E(XY)=E(X)E(Y)$</li></ul><h4 id="第二节-方差和矩"><a href="#第二节-方差和矩" class="headerlink" title="第二节 方差和矩"></a>第二节 方差和矩</h4><p>计算公式：$D(x)=E(X^2)-[E(X)]^2$</p><p>性质：</p><ul><li>$D(C)=0$，C为常数</li><li>$D(X+C)=D(X)$</li><li>$D(CX)=C^2D(X)$</li><li>$D(X \pm Y)=D(X)+D(Y) \pm 2Cov(X,Y)$，相互独立时Cov(X,Y)为0，反之不成立</li><li>D(X)=0的充要条件为$P(X=E(X))=1$</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">分布</th><th style="text-align:center">E(X)</th><th style="text-align:center">D(X)</th></tr></thead><tbody><tr><td style="text-align:center">01分布</td><td style="text-align:center">p</td><td style="text-align:center">pq</td></tr><tr><td style="text-align:center">二项分布</td><td style="text-align:center">np</td><td style="text-align:center">npq</td></tr><tr><td style="text-align:center">泊松分布</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">$\lambda$</td></tr><tr><td style="text-align:center">均匀分布</td><td style="text-align:center">$\frac{a+b}{2}$</td><td style="text-align:center">$\frac{(b-a)^2}{12}$</td></tr><tr><td style="text-align:center">指数分布</td><td style="text-align:center">$\frac{1}{\lambda}$</td><td style="text-align:center">$\frac{1}{\lambda^2}$</td></tr><tr><td style="text-align:center">正态分布</td><td style="text-align:center">$\mu$</td><td style="text-align:center">$\sigma^2$</td></tr><tr><td style="text-align:center">$\chi^2$分布</td><td style="text-align:center">n</td><td style="text-align:center">2n</td></tr></tbody></table></div><p>k阶原点矩：$E(|X|^k)$，一阶原点矩即为期望</p><p>k阶中心矩：$E(|X-E(X)|^k)$，二阶中心矩即为方差</p><h4 id="第三节-协方差与相关系数"><a href="#第三节-协方差与相关系数" class="headerlink" title="第三节 协方差与相关系数"></a>第三节 协方差与相关系数</h4><p>计算公式：$Cov(X,Y)=E(XY)-E(X)E(Y)$</p><p>性质：</p><ul><li>$Cov(X,Y)=Cov(Y,X)$</li><li>$Cov(aX,bY)=abCov(X,Y)$</li><li>$Cov(X_1+X_2,Y)=Cov(X_1,Y)+Cov(X_2,Y)$</li></ul><p>计算公式：$\rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)D(Y)}}$</p><p>性质：</p><ul><li>$|\rho_{XY}|\leq1$</li><li>$|\rho_{XY}|=1$的充要条件是P{Y=aX+b}=1，根据a的正负看正/负相关</li><li>X,Y相互独立，$\rho_{XY}=0$，反之不成立</li></ul><p><br></p><h3 id="第五章-大数定律与中心极限定理"><a href="#第五章-大数定律与中心极限定理" class="headerlink" title="第五章 大数定律与中心极限定理"></a>第五章 大数定律与中心极限定理</h3><h4 id="第一节-大数定律"><a href="#第一节-大数定律" class="headerlink" title="第一节 大数定律"></a>第一节 大数定律</h4><ul><li><p>切比雪夫不等式，X的期望$\mu$、方差$\varepsilon$</p><script type="math/tex; mode=display">P(|X-\mu|\geq\ \varepsilon)\leq \frac{\sigma^2}{\varepsilon^2}，P(|X-\mu|<\ \varepsilon)\geq 1-\frac{\sigma^2}{\varepsilon^2}</script></li><li><p>切比雪夫大数定律，$D(X_i) \leq K $</p><script type="math/tex; mode=display">E(\frac{1}{n}\sum_{i=1}^{n}X_i)=\frac{1}{n}E(\sum_{i=1}^{n}X_i)</script><script type="math/tex; mode=display">D(\frac{1}{n}\sum_{i=1}^{n}X_i)=\frac{1}{n^2}D(\sum_{i=1}^{n}X_i)</script><script type="math/tex; mode=display">\lim_{n\rightarrow+\infty} \{ {|\frac{1}{n}\sum_{i=1}^{n}X_i-\frac{1}{n}\sum_{i=1}^{n}E(X_i)|<\varepsilon} \} =1</script></li><li><p>独立同分布大数定律</p><script type="math/tex; mode=display">\lim_{n\rightarrow+\infty} \{ {|\frac{1}{n}\sum_{i=1}^{n}X_i-\mu|<\varepsilon} \} =1</script></li><li><p>贝努力大数定律</p><script type="math/tex; mode=display">\lim_{n\rightarrow+\infty} \{ {|\frac{n_A}{n}-p|<\varepsilon} \} =1</script></li></ul><h4 id="第二节-中心极限定律"><a href="#第二节-中心极限定律" class="headerlink" title="第二节 中心极限定律"></a>第二节 中心极限定律</h4><script type="math/tex; mode=display">Y_n=\frac{\sum_{i=1}^{n}X_i-E(\sum_{i=1}^{n}X_i)}{\sqrt{D(\sum_{i=1}^{n}X_i)}}=\frac{\sum_{i=1}^{n}X_i-n\mu}{\sqrt{n}\sigma}</script><script type="math/tex; mode=display">P(X_1<Y_n<X_2)\approx\Phi(x_2)-\Phi(x_1)</script><p><br></p><h3 id="第六章-数理统计的基本概念与抽样分析"><a href="#第六章-数理统计的基本概念与抽样分析" class="headerlink" title="第六章 数理统计的基本概念与抽样分析"></a>第六章 数理统计的基本概念与抽样分析</h3><h4 id="第一节-数理统计的基本概念"><a href="#第一节-数理统计的基本概念" class="headerlink" title="第一节 数理统计的基本概念"></a>第一节 数理统计的基本概念</h4><p>样本抽样特性：独立性、代表性、随机性</p><p>统计量：不含任何未知参数的、样本$X_1,X_2…X_n$的函数</p><p>样本均值：$\overline{X}= \frac{1}{n}\sum_{i=1}^{n}X_i$</p><p>样本方差：$S^2=\frac{1}{n-1}\sum_{i=1}^n(X_i-\overline{X})^2$</p><p>频率直方图要点：各区将长度可不等，子区间个数8~15个，端点取值比样本观测值多一位小数，区间高=频率/区间宽</p><h4 id="第二节-数理统计中某些常用分布"><a href="#第二节-数理统计中某些常用分布" class="headerlink" title="第二节 数理统计中某些常用分布"></a>第二节 数理统计中某些常用分布</h4><p>样本观测值相互独立且都服从标椎正态分布，n越大越对称，记为$\chi^2(n)$</p><script type="math/tex; mode=display">\chi^2=\sum_{i=1}^nX_i^2</script><script type="math/tex; mode=display">P(X\geq\chi_{\alpha}^2)=\alpha</script><p>X~N(0,1),Y~ $\chi^2$(n)，且X与Y独立，记为t~t(n)</p><script type="math/tex; mode=display">T=\frac{X}{\sqrt{\frac{Y}{n}}}</script><script type="math/tex; mode=display">P(X\geq t_{\alpha}(n))=\alpha,t_{1-\alpha}(n)=-t_\alpha(n)(对称性)</script><p>X~ $\chi^2$(n),Y~ $\chi^2$(m)，且X与Y独立，记为F~F(n,m)；若X~F(n,m),则1/X~F(m,n)</p><script type="math/tex; mode=display">F=\frac{X/n}{Y/m}</script><script type="math/tex; mode=display">P(F\geq F_{\alpha}(n,m))=\alpha,\frac{1}{F_\alpha(n,m)}=F_{1-\alpha}(m,n)(查表推论)</script><h4 id="第三节-正态分布统计量的分布"><a href="#第三节-正态分布统计量的分布" class="headerlink" title="第三节 正态分布统计量的分布"></a>第三节 正态分布统计量的分布</h4><p>单个正态分布</p><script type="math/tex; mode=display">\frac{\overline x-\mu}{\sigma/\sqrt{n}} ～ N(0,1)</script><script type="math/tex; mode=display">\frac{1}{\sigma^2}\sum_{i=1}^n(x_i-\mu)^2～\chi^2(n)</script><script type="math/tex; mode=display">\frac{(n-1)s^2}{\sigma^2}=\frac{1}{\sigma^2}\sum_{i=1}^n(x_i-\overline x)^2～\chi^2(n-1)</script><script type="math/tex; mode=display">\frac{\overline x-\mu}{s/\sqrt{n}}～t(n-1)</script><p>两个正态分布，总体方差相等</p><script type="math/tex; mode=display">\frac{s_1^2}{s_2^2}～F(n-1,m-1)</script><script type="math/tex; mode=display">\frac{(\overline x-\overline y)-(\mu_1-\mu_2)}{s_w\sqrt{\frac{1}{n}+\frac{1}{m}}}～t(n+m-2),s_w=\frac{(n-1)s_1^2+(m-1)s_2^2}{n+m-2}</script><p>两个正态分布，总体方差不等</p><script type="math/tex; mode=display">\frac{s_1^2/\sigma_1^2}{s_2^2/\sigma_2^2}～F(n-1,m-1)</script><script type="math/tex; mode=display">\frac{(\overline x-\overline y)-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n}+\frac{\sigma_2^2}{m}}}～N(0,1)</script><p><br></p><h3 id="第七章-参数估计"><a href="#第七章-参数估计" class="headerlink" title="第七章 参数估计"></a>第七章 参数估计</h3><h4 id="第一节-参数的点估计"><a href="#第一节-参数的点估计" class="headerlink" title="第一节 参数的点估计"></a>第一节 参数的点估计</h4><p>无偏估计：无偏估计的期望等于未知参数；无偏估计1的方差$\leq$无偏估计2的方差，说明参数1较参数2有效</p><p>矩估计法:一个未知参数建立方程（1），两个未知参数建立方程组（1）（2）</p><p>（1）样本均值$\overline x$估计总体期望$\mu$</p><p>（2）二阶样本中心距$B_2$估计总体方差$\sigma^2$</p><p>极大似然法：</p><script type="math/tex; mode=display">离散型：L(\theta)=\prod_{i=1}^np(x_i,\theta);连续型：L(\theta)=\prod_{i=1}^nf(x_i,\theta)</script><script type="math/tex; mode=display">\frac{dL}{d\theta}=0;\frac{d\ln L}{d\theta}=0</script><h4 id="第三节-正态总体参数的区间估计"><a href="#第三节-正态总体参数的区间估计" class="headerlink" title="第三节 正态总体参数的区间估计"></a>第三节 正态总体参数的区间估计</h4><p>利用第六章第三节的正态分布统计量的分布估计区间(2*2*2=8).</p><p><br></p><h3 id="第八章-假设检验"><a href="#第八章-假设检验" class="headerlink" title="第八章 假设检验"></a>第八章 假设检验</h3><p><a href="https://imgchr.com/i/ZCu0dH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZCu0dH.md.jpg" alt="ZCu0dH.md.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一章-随机事件及其概率&quot;&gt;&lt;a href=&quot;#第一章-随机事件及其概率&quot; class=&quot;headerlink&quot; title=&quot;第一章 随机事件及其概率&quot;&gt;&lt;/a&gt;第一章 随机事件及其概率&lt;/h3&gt;&lt;h4 id=&quot;第一节-随机事件及其频率、概率的统计定义&quot;&gt;&lt;a href=&quot;#第一节-随机事件及其频率、概率的统计定义&quot; class=&quot;headerlink&quot; title=&quot;第一节 随机事件及其频率、概率的统计定义&quot;&gt;&lt;/a&gt;第一节 随机事件及其频率、概率的统计定义&lt;/h4&gt;&lt;p&gt;随机事件(偶然事件)：在试验的结果中，可能发生、也可能不发生的事件&lt;/p&gt;
&lt;p&gt;随机事件的频率具有一定的稳定性  &lt;/p&gt;
&lt;p&gt;随机事件的概率为频率的近似值 $P(A) \approx f(A) = \frac{m}{n}$&lt;/p&gt;
    
    </summary>
    
      <category term="专业课程" scheme="http://quincy.ink/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="概率论与数理统计" scheme="http://quincy.ink/tags/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>牛客练习赛-41</title>
    <link href="http://quincy.ink/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B-41.html"/>
    <id>http://quincy.ink/牛客练习赛-41.html</id>
    <published>2019-03-03T02:33:31.000Z</published>
    <updated>2019-03-03T05:27:21.099Z</updated>
    
    <content type="html"><![CDATA[<p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/373#question" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/373#question</a></p><blockquote><p><strong>A 翻硬币问题</strong></p></blockquote><p><strong>题意：</strong>A和B玩游戏，A先手，要将n个正面硬币翻转为反面且每次只能翻转m个，B有一次可以在A翻转后将一枚硬币翻转的机会，给出n,m问A是否能将所有硬币翻转<a id="more"></a></p><p><strong>思路：</strong> 简单签到题，容易想到：</p><p>​        当n&lt;m时，A翻不了</p><p>​        当n==m时，A可以一下就翻完</p><p>​        当n&gt;m时，无论A是否刚好翻完，B都可以打乱</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n==m) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span>     <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>B 666RGP</strong></p></blockquote><p><strong>题意：</strong>给出n个数(n&lt;=300,-666&lt;=ai&lt;=666)，分数开始初值为0，对于第i个数有两种操作，一是分数+a[i],二是分数*(-1)，问经过n个数后有多少种方法分数变为-666，且中间分数不能出现666，答案对1e8+7取模</p><p><strong>思路：</strong>简单计数dp</p><p>设dp[i] [j]表示，经过第i个数后分数为j的答案，那么有dp[i] [j] = dp[i-1] [j - a[i]] + dp[i-1] [-j]</p><p>注意过滤掉j==666的情况</p><p>因为j最大会有2*300*666 这么大，如果开dp[300] [2*300*666] 肯定空间不够</p><p>考虑转移方程只和i 和 i-1有关，可以用滚动数组形式优化</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">700</span>*<span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e8</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxv*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">305</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    dp[<span class="number">0</span>][maxv]=<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-666</span>*n;j&lt;=<span class="number">666</span>*n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">666</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dp[i&amp;<span class="number">1</span>][j+maxv]=(dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][-j+maxv]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j-a[i]+maxv])%P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n&amp;<span class="number">1</span>][<span class="number">-666</span>+maxv]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>C 抓捕盗窃犯</strong></p></blockquote><p><strong>题意：</strong>在n点中，第i个点有ai个人，再给出下一时刻第i个点的所有人转移到vi点，问在m个地方建立哨卡（可以一直监控当地经过的人），最多可以监视到多少人</p><p><strong>思路：</strong></p><p>n个点，每个点有一条有向出边</p><p>容易想到这些点将组成一些块</p><p>且每个块内都有一个环</p><p>这样，一个块的所有地点的人都会经过环</p><p>那么用并查集整合n个地点人口，再取前m大就行</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x]==x?x:f[x]=get(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;to);</span><br><span class="line">        <span class="keyword">int</span> x=get(i),y=get(to);</span><br><span class="line">        <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">            f[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> f=get(i);</span><br><span class="line">        b[f]+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;n-m;i--)&#123;</span><br><span class="line">        ans+=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>D 最小相似度</strong></p></blockquote><p><strong>题意：</strong>给出n个m长的二进制01串，问构造一个m长的01串使得这个串和这n个串对应位相同的数量最大的最小值</p><p><strong>思路：</strong>将n个串都作为起点进行bfs，搜索完所有2^m内的数，dp[i]表示从某个起点到i需要翻转的位数，既有多少位与原先某个串不相同，m-max(dp[i]) 即为最小相同的位数</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">25</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*((<span class="number">1</span>&lt;&lt;m)+<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            tmp+=(<span class="number">1</span>&lt;&lt;j)*(s[j]-<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[tmp]=<span class="number">0</span>;</span><br><span class="line">        q.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[u^(<span class="number">1</span>&lt;&lt;j)]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dp[u^(<span class="number">1</span>&lt;&lt;j)]=dp[u]+<span class="number">1</span>;</span><br><span class="line">            q.push(u^(<span class="number">1</span>&lt;&lt;j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++) ans=max(ans,dp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m-ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>E 球的体积并</strong></p></blockquote><p><strong>题意：</strong>给出两个球的球心坐标和半径，求两球相交体积</p><p><strong>思路：</strong>球冠体积公式(h为球冠高，r为球半径,d为球心距)</p><script type="math/tex; mode=display">V=PI*h(3a^2+h^2)/6=PI*h^2(3r-h)/3</script><script type="math/tex; mode=display">h=r-(ra^2-rb^2+d^2)/2d</script><p>注意外离、外切、内含的几种情况需特判</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y,z;</span><br><span class="line">    point() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    point(<span class="keyword">double</span> a, <span class="keyword">double</span> b,<span class="keyword">double</span> c) &#123;</span><br><span class="line">        x = a;</span><br><span class="line">        y = b;</span><br><span class="line">        z = c;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> -(<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span> &#123;     <span class="comment">//返回减去后的新点</span></span><br><span class="line">        <span class="keyword">return</span> point(x - b.x, y - b.y,z-b.z);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> +(<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span> &#123;     <span class="comment">//返回加上后的新点</span></span><br><span class="line">        <span class="keyword">return</span> point(x + b.x, y + b.y,z+b.z);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span> &#123;    <span class="comment">//返回相乘后的新点</span></span><br><span class="line">        <span class="keyword">return</span> point(x * k, y * k,z*k);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span> &#123;    <span class="comment">//返回相除后的新点</span></span><br><span class="line">        <span class="keyword">return</span> point(x / k, y / k,z/k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span> &#123;    <span class="comment">//点乘</span></span><br><span class="line">        <span class="keyword">return</span> x*b.x + y*b.y+z*b.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; point;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(point p1, point p2)</span> </span>&#123;       <span class="comment">//返回平面上两点距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((p1 - p2)*(p1 - p2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sphere</span> &#123;</span><span class="comment">//球</span></span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    point centre;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">v</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4.0</span>/<span class="number">3</span>*PI*r*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sphere;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(sphere a, sphere b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = dist(a.centre, b.centre);<span class="comment">//球心距</span></span><br><span class="line">    <span class="comment">//double t = (d*d + a.r*a.r - b.r*b.r) / (2.0 * d);//</span></span><br><span class="line">    <span class="comment">//double h = sqrt((a.r*a.r) - (t*t)) * 2;//h1=h2，球冠的高</span></span><br><span class="line">    <span class="comment">//double angle_a = 2 * acos((a.r*a.r + d*d - b.r*b.r) / (2.0 * a.r*d));  //余弦公式计算r1对应圆心角，弧度</span></span><br><span class="line">    <span class="comment">//double angle_b = 2 * acos((b.r*b.r + d*d - a.r*a.r) / (2.0 * b.r*d));  //余弦公式计算r2对应圆心角，弧度</span></span><br><span class="line">    <span class="keyword">if</span>(d-a.r-b.r&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,a.v()+b.v());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d+a.r&lt;b.r||d+b.r&lt;a.r)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,max(a.v(),b.v()));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> l1 = (a.r*a.r - b.r*b.r + d*d) / (<span class="number">2</span>*d);</span><br><span class="line">    <span class="keyword">double</span> l2 = (b.r*b.r - a.r*a.r + d*d) / (<span class="number">2</span>*d);</span><br><span class="line">    <span class="keyword">double</span> h1 = a.r - l1, h2 = b.r - l2;<span class="comment">//分别为两个球缺的高度</span></span><br><span class="line">    <span class="keyword">double</span> v1 = PI*h1*h1*(a.r - h1 / <span class="number">3</span>);<span class="comment">//相交部分r1圆所对应的球缺部分体积</span></span><br><span class="line">    <span class="keyword">double</span> v2 = PI*h2*h2*(b.r - h2 / <span class="number">3</span>);<span class="comment">//相交部分r2圆所对应的球缺部分体积</span></span><br><span class="line">    <span class="keyword">double</span> v = v1 + v2;<span class="comment">//相交部分体积</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,a.v()+b.v()-v);</span><br><span class="line">    <span class="comment">//double s1 = PI*a.r*x1;  //r1对应球冠表面积</span></span><br><span class="line">    <span class="comment">//double s2 = PI*a.r*x2;  //r2对应球冠表面积</span></span><br><span class="line">    <span class="comment">//double s = 4 * PI*(a.r*a.r + b.r*b.r) - s1 - s2;//剩余部分表面积</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sphere a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;a.centre.x,&amp;a.centre.y,&amp;a.centre.z,&amp;a.r);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;b.centre.x,&amp;b.centre.y,&amp;b.centre.z,&amp;b.r);</span><br><span class="line">    Solve(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>F 简单数学题</strong></p></blockquote><p>数学弃…</p><p><br></p><p>岑巨出的题，难度适中，B题dp因为没注意要从dp[0] [maxv]开始初始化debug了很久</p><p>C题想到了并查集竟然不想写</p><p>E题内含的条件写错了，一直以为公式错了QAQ</p><p>还是大意了啊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/373#question&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/373#question&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A 翻硬币问题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;题意：&lt;/strong&gt;A和B玩游戏，A先手，要将n个正面硬币翻转为反面且每次只能翻转m个，B有一次可以在A翻转后将一枚硬币翻转的机会，给出n,m问A是否能将所有硬币翻转
    
    </summary>
    
      <category term="ACM" scheme="http://quincy.ink/categories/ACM/"/>
    
    
      <category term="dp" scheme="http://quincy.ink/tags/dp/"/>
    
      <category term="并查集" scheme="http://quincy.ink/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="数学" scheme="http://quincy.ink/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="bfs" scheme="http://quincy.ink/tags/bfs/"/>
    
  </entry>
  
</feed>
